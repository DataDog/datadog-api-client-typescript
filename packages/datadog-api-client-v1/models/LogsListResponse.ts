/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Log } from "./Log";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Response object with all logs matching the request and pagination information.
 */

export class LogsListResponse {
  /**
   * Array of logs matching the request and the `nextLogId` if sent.
   */
  "logs"?: Array<Log>;
  /**
   * Hash identifier of the next log to return in the list. This parameter is used for the pagination feature.
   */
  "nextLogId"?: string;
  /**
   * Status of the response.
   */
  "status"?: string;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    logs: {
      baseName: "logs",
      type: "Array<Log>",
      format: "",
    },
    nextLogId: {
      baseName: "nextLogId",
      type: "string",
      format: "",
    },
    status: {
      baseName: "status",
      type: "string",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return LogsListResponse.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): LogsListResponse {
    const res = new LogsListResponse();

    res.logs = ObjectSerializer.deserialize(data.logs, "Array<Log>", "");

    res.nextLogId = ObjectSerializer.deserialize(data.nextLogId, "string", "");

    res.status = ObjectSerializer.deserialize(data.status, "string", "");

    return res;
  }

  static serialize(data: LogsListResponse): { [key: string]: any } {
    const attributeTypes = LogsListResponse.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.logs = ObjectSerializer.serialize(data.logs, "Array<Log>", "");

    res.nextLogId = ObjectSerializer.serialize(data.nextLogId, "string", "");

    res.status = ObjectSerializer.serialize(data.status, "string", "");

    return res;
  }

  public constructor() {}
}
