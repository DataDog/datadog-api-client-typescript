/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* An application key with its associated metadata.
*/

export class ApplicationKey {
    /**
    * Hash of an application key.
    */
    'hash'?: string;
    /**
    * Name of an application key.
    */
    'name'?: string;
    /**
    * Owner of an application key.
    */
    'owner'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "hash": {
            "baseName": "hash",
            "type": "string",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "owner": {
            "baseName": "owner",
            "type": "string",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return ApplicationKey.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): ApplicationKey {
      let res = new ApplicationKey();

      res.hash = ObjectSerializer.deserialize(data.hash, "string", "")

      res.name = ObjectSerializer.deserialize(data.name, "string", "")

      res.owner = ObjectSerializer.deserialize(data.owner, "string", "")


      return res;
    }

    static serialize(data: ApplicationKey): {[key: string]: any} {
        let attributeTypes = ApplicationKey.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.hash = ObjectSerializer.serialize(data.hash, "string", "")

        res.name = ObjectSerializer.serialize(data.name, "string", "")

        res.owner = ObjectSerializer.serialize(data.owner, "string", "")

        return res
    }
    
    public constructor() {
    }
}



