/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Number of hosts/containers recorded for each hour for a given organization.
 */

export class UsageHostHour {
  /**
   * Contains the total number of infrastructure hosts reporting during a given hour that were running the Datadog Agent.
   */
  "agentHostCount"?: number;
  /**
   * Contains the total number of hosts that reported via Alibaba integration (and were NOT running the Datadog Agent).
   */
  "alibabaHostCount"?: number;
  /**
   * Contains the total number of Azure App Services hosts using APM.
   */
  "apmAzureAppServiceHostCount"?: number;
  /**
   * Shows the total number of hosts using APM during the hour, these are counted as billable (except during trial periods).
   */
  "apmHostCount"?: number;
  /**
   * Contains the total number of hosts that reported via the AWS integration (and were NOT running the Datadog Agent).
   */
  "awsHostCount"?: number;
  /**
   * Contains the total number of hosts that reported via Azure integration (and were NOT running the Datadog Agent).
   */
  "azureHostCount"?: number;
  /**
   * Shows the total number of containers reported by the Docker integration during the hour.
   */
  "containerCount"?: number;
  /**
   * Contains the total number of hosts that reported via the Google Cloud integration (and were NOT running the Datadog Agent).
   */
  "gcpHostCount"?: number;
  /**
   * Contains the total number of Heroku dynos reported by the Datadog Agent.
   */
  "herokuHostCount"?: number;
  /**
   * Contains the total number of billable infrastructure hosts reporting during a given hour. This is the sum of `agent_host_count`, `aws_host_count`, and `gcp_host_count`.
   */
  "hostCount"?: number;
  /**
   * The hour for the usage.
   */
  "hour"?: Date;
  /**
   * Contains the total number of hosts that reported via the Azure App Services integration (and were NOT running the Datadog Agent).
   */
  "infraAzureAppService"?: number;
  /**
   * Contains the total number of hosts reported by Datadog exporter for the OpenTelemetry Collector.
   */
  "opentelemetryHostCount"?: number;
  /**
   * Contains the total number of hosts that reported via vSphere integration (and were NOT running the Datadog Agent).
   */
  "vsphereHostCount"?: number;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    agentHostCount: {
      baseName: "agent_host_count",
      type: "number",
      format: "int64",
    },
    alibabaHostCount: {
      baseName: "alibaba_host_count",
      type: "number",
      format: "int64",
    },
    apmAzureAppServiceHostCount: {
      baseName: "apm_azure_app_service_host_count",
      type: "number",
      format: "int64",
    },
    apmHostCount: {
      baseName: "apm_host_count",
      type: "number",
      format: "int64",
    },
    awsHostCount: {
      baseName: "aws_host_count",
      type: "number",
      format: "int64",
    },
    azureHostCount: {
      baseName: "azure_host_count",
      type: "number",
      format: "int64",
    },
    containerCount: {
      baseName: "container_count",
      type: "number",
      format: "int64",
    },
    gcpHostCount: {
      baseName: "gcp_host_count",
      type: "number",
      format: "int64",
    },
    herokuHostCount: {
      baseName: "heroku_host_count",
      type: "number",
      format: "int64",
    },
    hostCount: {
      baseName: "host_count",
      type: "number",
      format: "int64",
    },
    hour: {
      baseName: "hour",
      type: "Date",
      format: "date-time",
    },
    infraAzureAppService: {
      baseName: "infra_azure_app_service",
      type: "number",
      format: "int64",
    },
    opentelemetryHostCount: {
      baseName: "opentelemetry_host_count",
      type: "number",
      format: "int64",
    },
    vsphereHostCount: {
      baseName: "vsphere_host_count",
      type: "number",
      format: "int64",
    },
  };

  static getAttributeTypeMap() {
    return UsageHostHour.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): UsageHostHour {
    const res = new UsageHostHour();

    res.agentHostCount = ObjectSerializer.deserialize(
      data.agent_host_count,
      "number",
      "int64"
    );

    res.alibabaHostCount = ObjectSerializer.deserialize(
      data.alibaba_host_count,
      "number",
      "int64"
    );

    res.apmAzureAppServiceHostCount = ObjectSerializer.deserialize(
      data.apm_azure_app_service_host_count,
      "number",
      "int64"
    );

    res.apmHostCount = ObjectSerializer.deserialize(
      data.apm_host_count,
      "number",
      "int64"
    );

    res.awsHostCount = ObjectSerializer.deserialize(
      data.aws_host_count,
      "number",
      "int64"
    );

    res.azureHostCount = ObjectSerializer.deserialize(
      data.azure_host_count,
      "number",
      "int64"
    );

    res.containerCount = ObjectSerializer.deserialize(
      data.container_count,
      "number",
      "int64"
    );

    res.gcpHostCount = ObjectSerializer.deserialize(
      data.gcp_host_count,
      "number",
      "int64"
    );

    res.herokuHostCount = ObjectSerializer.deserialize(
      data.heroku_host_count,
      "number",
      "int64"
    );

    res.hostCount = ObjectSerializer.deserialize(
      data.host_count,
      "number",
      "int64"
    );

    res.hour = ObjectSerializer.deserialize(data.hour, "Date", "date-time");

    res.infraAzureAppService = ObjectSerializer.deserialize(
      data.infra_azure_app_service,
      "number",
      "int64"
    );

    res.opentelemetryHostCount = ObjectSerializer.deserialize(
      data.opentelemetry_host_count,
      "number",
      "int64"
    );

    res.vsphereHostCount = ObjectSerializer.deserialize(
      data.vsphere_host_count,
      "number",
      "int64"
    );

    return res;
  }

  static serialize(data: UsageHostHour): { [key: string]: any } {
    const attributeTypes = UsageHostHour.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.agent_host_count = ObjectSerializer.serialize(
      data.agentHostCount,
      "number",
      "int64"
    );

    res.alibaba_host_count = ObjectSerializer.serialize(
      data.alibabaHostCount,
      "number",
      "int64"
    );

    res.apm_azure_app_service_host_count = ObjectSerializer.serialize(
      data.apmAzureAppServiceHostCount,
      "number",
      "int64"
    );

    res.apm_host_count = ObjectSerializer.serialize(
      data.apmHostCount,
      "number",
      "int64"
    );

    res.aws_host_count = ObjectSerializer.serialize(
      data.awsHostCount,
      "number",
      "int64"
    );

    res.azure_host_count = ObjectSerializer.serialize(
      data.azureHostCount,
      "number",
      "int64"
    );

    res.container_count = ObjectSerializer.serialize(
      data.containerCount,
      "number",
      "int64"
    );

    res.gcp_host_count = ObjectSerializer.serialize(
      data.gcpHostCount,
      "number",
      "int64"
    );

    res.heroku_host_count = ObjectSerializer.serialize(
      data.herokuHostCount,
      "number",
      "int64"
    );

    res.host_count = ObjectSerializer.serialize(
      data.hostCount,
      "number",
      "int64"
    );

    res.hour = ObjectSerializer.serialize(data.hour, "Date", "date-time");

    res.infra_azure_app_service = ObjectSerializer.serialize(
      data.infraAzureAppService,
      "number",
      "int64"
    );

    res.opentelemetry_host_count = ObjectSerializer.serialize(
      data.opentelemetryHostCount,
      "number",
      "int64"
    );

    res.vsphere_host_count = ObjectSerializer.serialize(
      data.vsphereHostCount,
      "number",
      "int64"
    );

    return res;
  }

  public constructor() {}
}
