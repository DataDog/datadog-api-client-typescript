/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { LogsArithmeticProcessor } from './LogsArithmeticProcessor';
import { LogsAttributeRemapper } from './LogsAttributeRemapper';
import { LogsCategoryProcessor } from './LogsCategoryProcessor';
import { LogsCategoryProcessorCategory } from './LogsCategoryProcessorCategory';
import { LogsDateRemapper } from './LogsDateRemapper';
import { LogsFilter } from './LogsFilter';
import { LogsGeoIPParser } from './LogsGeoIPParser';
import { LogsGrokParser } from './LogsGrokParser';
import { LogsGrokParserRules } from './LogsGrokParserRules';
import { LogsLookupProcessor } from './LogsLookupProcessor';
import { LogsMessageRemapper } from './LogsMessageRemapper';
import { LogsPipelineProcessor } from './LogsPipelineProcessor';
import { LogsServiceRemapper } from './LogsServiceRemapper';
import { LogsStatusRemapper } from './LogsStatusRemapper';
import { LogsStringBuilderProcessor } from './LogsStringBuilderProcessor';
import { LogsTraceRemapper } from './LogsTraceRemapper';
import { LogsTraceRemapperType } from './LogsTraceRemapperType';
import { LogsURLParser } from './LogsURLParser';
import { LogsUserAgentParser } from './LogsUserAgentParser';
import { TargetFormatType } from './TargetFormatType';
import { HttpFile } from '../http/http';

/**
* Definition of a logs processor.
*/
export class LogsProcessor {
    'grok': LogsGrokParserRules;
    /**
    * Whether or not the processor is enabled.
    */
    'isEnabled'?: boolean;
    /**
    * Name of the processor.
    */
    'name'?: string;
    /**
    * List of sample logs to test this grok parser.
    */
    'samples'?: Array<string>;
    /**
    * Source attribute used to perform the lookup.
    */
    'source': string;
    'type': LogsTraceRemapperType;
    /**
    * Array of source attributes.
    */
    'sources': Array<string>;
    /**
    * Override or not the target element if already set,
    */
    'overrideOnConflict'?: boolean;
    /**
    * Remove or preserve the remapped source element.
    */
    'preserveSource'?: boolean;
    /**
    * Defines if the sources are from log `attribute` or `tag`.
    */
    'sourceType'?: string;
    /**
    * Name of the attribute that contains the corresponding value in the mapping list or the `default_lookup` if not found in the mapping list.
    */
    'target': string;
    'targetFormat'?: TargetFormatType;
    /**
    * Defines if the final attribute or tag name is from log `attribute` or `tag`.
    */
    'targetType'?: string;
    /**
    * Normalize the ending slashes or not.
    */
    'normalizeEndingSlashes'?: boolean;
    /**
    * Define if the source attribute is URL encoded or not.
    */
    'isEncoded'?: boolean;
    /**
    * Array of filters to match or not a log and their corresponding `name`to assign a custom value to the log.
    */
    'categories': Array<LogsCategoryProcessorCategory>;
    /**
    * Arithmetic operation between one or more log attributes.
    */
    'expression': string;
    /**
    * If true, it replaces all missing attributes of `template` by an empty string. If `false` (default), skips the operation for missing attributes.
    */
    'isReplaceMissing'?: boolean;
    /**
    * A formula with one or more attributes and raw text.
    */
    'template': string;
    'filter'?: LogsFilter;
    /**
    * Ordered list of processors in this pipeline.
    */
    'processors'?: Array<LogsProcessor>;
    /**
    * Value to set the target attribute if the source value is not found in the list.
    */
    'defaultLookup'?: string;
    /**
    * Mapping table of values for the source attribute and their associated target attribute values, formatted as `[\"source_key1,target_value1\", \"source_key2,target_value2\"]`
    */
    'lookupTable': Array<string>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "grok",
            "baseName": "grok",
            "type": "LogsGrokParserRules",
            "format": ""
        },
        {
            "name": "isEnabled",
            "baseName": "is_enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "samples",
            "baseName": "samples",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "LogsTraceRemapperType",
            "format": ""
        },
        {
            "name": "sources",
            "baseName": "sources",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "overrideOnConflict",
            "baseName": "override_on_conflict",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "preserveSource",
            "baseName": "preserve_source",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "sourceType",
            "baseName": "source_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "target",
            "baseName": "target",
            "type": "string",
            "format": ""
        },
        {
            "name": "targetFormat",
            "baseName": "target_format",
            "type": "TargetFormatType",
            "format": ""
        },
        {
            "name": "targetType",
            "baseName": "target_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "normalizeEndingSlashes",
            "baseName": "normalize_ending_slashes",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isEncoded",
            "baseName": "is_encoded",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "categories",
            "baseName": "categories",
            "type": "Array<LogsCategoryProcessorCategory>",
            "format": ""
        },
        {
            "name": "expression",
            "baseName": "expression",
            "type": "string",
            "format": ""
        },
        {
            "name": "isReplaceMissing",
            "baseName": "is_replace_missing",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "string",
            "format": ""
        },
        {
            "name": "filter",
            "baseName": "filter",
            "type": "LogsFilter",
            "format": ""
        },
        {
            "name": "processors",
            "baseName": "processors",
            "type": "Array<LogsProcessor>",
            "format": ""
        },
        {
            "name": "defaultLookup",
            "baseName": "default_lookup",
            "type": "string",
            "format": ""
        },
        {
            "name": "lookupTable",
            "baseName": "lookup_table",
            "type": "Array<string>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return LogsProcessor.attributeTypeMap;
    }
    
    public constructor() {
    }
}

