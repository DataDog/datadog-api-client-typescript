/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* The page count for the current pagination.
*/

export class UsageAttributionPagination {
    /**
    * Maximum amount of records to be returned.
    */
    'limit'?: number;
    /**
    * Records to be skipped before beginning to return.
    */
    'offset'?: number;
    /**
    * Direction to sort by.
    */
    'sortDirection'?: string;
    /**
    * Field to sort by.
    */
    'sortName'?: string;
    /**
    * Total number of records.
    */
    'totalNumberOfRecords'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "limit": {
            "baseName": "limit",
            "type": "number",
            "format": "int64"
        },
        "offset": {
            "baseName": "offset",
            "type": "number",
            "format": "int64"
        },
        "sortDirection": {
            "baseName": "sort_direction",
            "type": "string",
            "format": ""
        },
        "sortName": {
            "baseName": "sort_name",
            "type": "string",
            "format": ""
        },
        "totalNumberOfRecords": {
            "baseName": "total_number_of_records",
            "type": "number",
            "format": "int64"
        }    };

    static getAttributeTypeMap() {
        return UsageAttributionPagination.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): UsageAttributionPagination {
      let res = new UsageAttributionPagination();

      res.limit = ObjectSerializer.deserialize(data.limit, "number", "int64")

      res.offset = ObjectSerializer.deserialize(data.offset, "number", "int64")

      res.sortDirection = ObjectSerializer.deserialize(data.sort_direction, "string", "")

      res.sortName = ObjectSerializer.deserialize(data.sort_name, "string", "")

      res.totalNumberOfRecords = ObjectSerializer.deserialize(data.total_number_of_records, "number", "int64")


      return res;
    }

    static serialize(data: UsageAttributionPagination): {[key: string]: any} {
        let attributeTypes = UsageAttributionPagination.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.limit = ObjectSerializer.serialize(data.limit, "number", "int64")

        res.offset = ObjectSerializer.serialize(data.offset, "number", "int64")

        res.sort_direction = ObjectSerializer.serialize(data.sortDirection, "string", "")

        res.sort_name = ObjectSerializer.serialize(data.sortName, "string", "")

        res.total_number_of_records = ObjectSerializer.serialize(data.totalNumberOfRecords, "number", "int64")

        return res
    }
    
    public constructor() {
    }
}



