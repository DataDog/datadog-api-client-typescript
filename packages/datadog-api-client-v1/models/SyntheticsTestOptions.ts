/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SyntheticsDeviceID } from './SyntheticsDeviceID';
import { SyntheticsTestOptionsMonitorOptions } from './SyntheticsTestOptionsMonitorOptions';
import { SyntheticsTestOptionsRetry } from './SyntheticsTestOptionsRetry';
import { SyntheticsTickInterval } from './SyntheticsTickInterval';
import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* Object describing the extra options for a Synthetic test.
*/

export class SyntheticsTestOptions {
    /**
    * For SSL test, whether or not the test should allow self signed certificates.
    */
    'acceptSelfSigned'?: boolean;
    /**
    * Allows loading insecure content for an HTTP request.
    */
    'allowInsecure'?: boolean;
    /**
    * For browser test, array with the different device IDs used to run the test.
    */
    'deviceIds'?: Array<SyntheticsDeviceID>;
    /**
    * Whether or not to disable CORS mechanism.
    */
    'disableCors'?: boolean;
    /**
    * For API HTTP test, whether or not the test should follow redirects.
    */
    'followRedirects'?: boolean;
    /**
    * Minimum amount of time in failure required to trigger an alert.
    */
    'minFailureDuration'?: number;
    /**
    * Minimum number of locations in failure required to trigger an alert.
    */
    'minLocationFailed'?: number;
    'monitorOptions'?: SyntheticsTestOptionsMonitorOptions;
    /**
    * Prevents saving screenshots of the steps.
    */
    'noScreenshot'?: boolean;
    'retry'?: SyntheticsTestOptionsRetry;
    'tickEvery'?: SyntheticsTickInterval;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "acceptSelfSigned": {
            "baseName": "accept_self_signed",
            "type": "boolean",
            "format": ""
        },
        "allowInsecure": {
            "baseName": "allow_insecure",
            "type": "boolean",
            "format": ""
        },
        "deviceIds": {
            "baseName": "device_ids",
            "type": "Array<SyntheticsDeviceID>",
            "format": ""
        },
        "disableCors": {
            "baseName": "disableCors",
            "type": "boolean",
            "format": ""
        },
        "followRedirects": {
            "baseName": "follow_redirects",
            "type": "boolean",
            "format": ""
        },
        "minFailureDuration": {
            "baseName": "min_failure_duration",
            "type": "number",
            "format": "int64"
        },
        "minLocationFailed": {
            "baseName": "min_location_failed",
            "type": "number",
            "format": "int64"
        },
        "monitorOptions": {
            "baseName": "monitor_options",
            "type": "SyntheticsTestOptionsMonitorOptions",
            "format": ""
        },
        "noScreenshot": {
            "baseName": "noScreenshot",
            "type": "boolean",
            "format": ""
        },
        "retry": {
            "baseName": "retry",
            "type": "SyntheticsTestOptionsRetry",
            "format": ""
        },
        "tickEvery": {
            "baseName": "tick_every",
            "type": "SyntheticsTickInterval",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return SyntheticsTestOptions.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): SyntheticsTestOptions {
      let res = new SyntheticsTestOptions();

      res.acceptSelfSigned = ObjectSerializer.deserialize(data.accept_self_signed, "boolean", "")

      res.allowInsecure = ObjectSerializer.deserialize(data.allow_insecure, "boolean", "")

      res.deviceIds = ObjectSerializer.deserialize(data.device_ids, "Array<SyntheticsDeviceID>", "")

      res.disableCors = ObjectSerializer.deserialize(data.disableCors, "boolean", "")

      res.followRedirects = ObjectSerializer.deserialize(data.follow_redirects, "boolean", "")

      res.minFailureDuration = ObjectSerializer.deserialize(data.min_failure_duration, "number", "int64")

      res.minLocationFailed = ObjectSerializer.deserialize(data.min_location_failed, "number", "int64")

      res.monitorOptions = ObjectSerializer.deserialize(data.monitor_options, "SyntheticsTestOptionsMonitorOptions", "")

      res.noScreenshot = ObjectSerializer.deserialize(data.noScreenshot, "boolean", "")

      res.retry = ObjectSerializer.deserialize(data.retry, "SyntheticsTestOptionsRetry", "")

      if ([30, 60, 300, 900, 1800, 3600, 21600, 43200, 86400, 604800, undefined].includes(data.tick_every)) {
          res.tickEvery = data.tick_every;
      } else {
          throw TypeError(`invalid enum value ${ data.tick_every } for tick_every`);
      }


      return res;
    }

    static serialize(data: SyntheticsTestOptions): {[key: string]: any} {
        let attributeTypes = SyntheticsTestOptions.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.accept_self_signed = ObjectSerializer.serialize(data.acceptSelfSigned, "boolean", "")

        res.allow_insecure = ObjectSerializer.serialize(data.allowInsecure, "boolean", "")

        res.device_ids = ObjectSerializer.serialize(data.deviceIds, "Array<SyntheticsDeviceID>", "")

        res.disableCors = ObjectSerializer.serialize(data.disableCors, "boolean", "")

        res.follow_redirects = ObjectSerializer.serialize(data.followRedirects, "boolean", "")

        res.min_failure_duration = ObjectSerializer.serialize(data.minFailureDuration, "number", "int64")

        res.min_location_failed = ObjectSerializer.serialize(data.minLocationFailed, "number", "int64")

        res.monitor_options = ObjectSerializer.serialize(data.monitorOptions, "SyntheticsTestOptionsMonitorOptions", "")

        res.noScreenshot = ObjectSerializer.serialize(data.noScreenshot, "boolean", "")

        res.retry = ObjectSerializer.serialize(data.retry, "SyntheticsTestOptionsRetry", "")

        if ([30, 60, 300, 900, 1800, 3600, 21600, 43200, 86400, 604800, undefined].includes(data.tickEvery)) {
            res.tick_every = data.tickEvery;
        } else {
            throw TypeError(`invalid enum value ${ data.tickEvery } for tickEvery`);
        }

        return res
    }
    
    public constructor() {
    }
}



