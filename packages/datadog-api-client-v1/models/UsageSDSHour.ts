/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Sensitive Data Scanner usage for a given organization for a given hour.
 */

export class UsageSDSHour {
  /**
   * The hour for the usage.
   */
  "hour"?: Date;
  /**
   * The total number of bytes scanned of logs usage by the Sensitive Data Scanner from the start of the given hour’s month until the given hour.
   */
  "logsScannedBytes"?: number;
  /**
   * The total number of bytes scanned across all usage types by the Sensitive Data Scanner from the start of the given hour’s month until the given hour.
   */
  "totalScannedBytes"?: number;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    hour: {
      baseName: "hour",
      type: "Date",
      format: "date-time",
    },
    logsScannedBytes: {
      baseName: "logs_scanned_bytes",
      type: "number",
      format: "int64",
    },
    totalScannedBytes: {
      baseName: "total_scanned_bytes",
      type: "number",
      format: "int64",
    },
  };

  static getAttributeTypeMap() {
    return UsageSDSHour.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): UsageSDSHour {
    const res = new UsageSDSHour();

    res.hour = ObjectSerializer.deserialize(data.hour, "Date", "date-time");

    res.logsScannedBytes = ObjectSerializer.deserialize(
      data.logs_scanned_bytes,
      "number",
      "int64"
    );

    res.totalScannedBytes = ObjectSerializer.deserialize(
      data.total_scanned_bytes,
      "number",
      "int64"
    );

    return res;
  }

  static serialize(data: UsageSDSHour): { [key: string]: any } {
    const attributeTypes = UsageSDSHour.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.hour = ObjectSerializer.serialize(data.hour, "Date", "date-time");

    res.logs_scanned_bytes = ObjectSerializer.serialize(
      data.logsScannedBytes,
      "number",
      "int64"
    );

    res.total_scanned_bytes = ObjectSerializer.serialize(
      data.totalScannedBytes,
      "number",
      "int64"
    );

    return res;
  }

  public constructor() {}
}
