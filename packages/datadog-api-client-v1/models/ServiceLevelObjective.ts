/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Creator } from "./Creator";
import { SLOThreshold } from "./SLOThreshold";
import { SLOType } from "./SLOType";
import { ServiceLevelObjectiveQuery } from "./ServiceLevelObjectiveQuery";
import { AttributeTypeMap } from "./ObjectSerializer";

/**
 * A service level objective object includes a service level indicator, thresholds for one or more timeframes, and metadata (`name`, `description`, `tags`, etc.).
 */

export class ServiceLevelObjective {
  /**
   * Creation timestamp (UNIX time in seconds)  Always included in service level objective responses.
   */
  "createdAt"?: number;
  "creator"?: Creator;
  /**
   * A user-defined description of the service level objective.  Always included in service level objective responses (but may be `null`). Optional in create/update requests.
   */
  "description"?: string;
  /**
   * A list of (up to 20) monitor groups that narrow the scope of a monitor service level objective.  Included in service level objective responses if it is not empty. Optional in create/update requests for monitor service level objectives, but may only be used when then length of the `monitor_ids` field is one.
   */
  "groups"?: Array<string>;
  /**
   * A unique identifier for the service level objective object.  Always included in service level objective responses.
   */
  "id"?: string;
  /**
   * Modification timestamp (UNIX time in seconds)  Always included in service level objective responses.
   */
  "modifiedAt"?: number;
  /**
   * A list of monitor ids that defines the scope of a monitor service level objective. **Required if type is `monitor`**.
   */
  "monitorIds"?: Array<number>;
  /**
   * The union of monitor tags for all monitors referenced by the `monitor_ids` field. Always included in service level objective responses for monitor service level objectives (but may be empty). Ignored in create/update requests. Does not affect which monitors are included in the service level objective (that is determined entirely by the `monitor_ids` field).
   */
  "monitorTags"?: Array<string>;
  /**
   * The name of the service level objective object.
   */
  "name": string;
  "query"?: ServiceLevelObjectiveQuery;
  /**
   * A list of tags associated with this service level objective. Always included in service level objective responses (but may be empty). Optional in create/update requests.
   */
  "tags"?: Array<string>;
  /**
   * The thresholds (timeframes and associated targets) for this service level objective object.
   */
  "thresholds": Array<SLOThreshold>;
  "type": SLOType;

  "unparsedObject"?: any;

  static readonly attributeTypeMap: AttributeTypeMap = {
    createdAt: {
      baseName: "created_at",
      type: "number",
      format: "int64",
    },
    creator: {
      baseName: "creator",
      type: "Creator",
    },
    description: {
      baseName: "description",
      type: "string",
    },
    groups: {
      baseName: "groups",
      type: "Array<string>",
    },
    id: {
      baseName: "id",
      type: "string",
    },
    modifiedAt: {
      baseName: "modified_at",
      type: "number",
      format: "int64",
    },
    monitorIds: {
      baseName: "monitor_ids",
      type: "Array<number>",
      format: "int64",
    },
    monitorTags: {
      baseName: "monitor_tags",
      type: "Array<string>",
    },
    name: {
      baseName: "name",
      type: "string",
      required: true,
    },
    query: {
      baseName: "query",
      type: "ServiceLevelObjectiveQuery",
    },
    tags: {
      baseName: "tags",
      type: "Array<string>",
    },
    thresholds: {
      baseName: "thresholds",
      type: "Array<SLOThreshold>",
      required: true,
    },
    type: {
      baseName: "type",
      type: "SLOType",
      required: true,
    },
  };

  static getAttributeTypeMap(): AttributeTypeMap {
    return ServiceLevelObjective.attributeTypeMap;
  }

  public constructor() {}
}
