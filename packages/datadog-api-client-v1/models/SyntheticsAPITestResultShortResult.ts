/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SyntheticsTiming } from "./SyntheticsTiming";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Result of the last API test run.
 */

export class SyntheticsAPITestResultShortResult {
  /**
   * Describes if the test run has passed or failed.
   */
  "passed"?: boolean;
  "timings"?: SyntheticsTiming;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    passed: {
      baseName: "passed",
      type: "boolean",
      format: "",
    },
    timings: {
      baseName: "timings",
      type: "SyntheticsTiming",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return SyntheticsAPITestResultShortResult.attributeTypeMap;
  }

  static deserialize(data: {
    [key: string]: any;
  }): SyntheticsAPITestResultShortResult {
    const res = new SyntheticsAPITestResultShortResult();

    res.passed = ObjectSerializer.deserialize(data.passed, "boolean", "");

    res.timings = ObjectSerializer.deserialize(
      data.timings,
      "SyntheticsTiming",
      ""
    );

    return res;
  }

  static serialize(data: SyntheticsAPITestResultShortResult): {
    [key: string]: any;
  } {
    const attributeTypes =
      SyntheticsAPITestResultShortResult.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.passed = ObjectSerializer.serialize(data.passed, "boolean", "");

    res.timings = ObjectSerializer.serialize(
      data.timings,
      "SyntheticsTiming",
      ""
    );

    return res;
  }

  public constructor() {}
}
