/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ObjectSerializer } from "./ObjectSerializer";

/**
 * The object containing the aggregates.
 */

export class UsageAttributionAggregatesBody {
  /**
   * The aggregate type.
   */
  "aggType"?: string;
  /**
   * The field.
   */
  "field"?: string;
  /**
   * The value for a given field.
   */
  "value"?: number;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    aggType: {
      baseName: "agg_type",
      type: "string",
      format: "",
    },
    field: {
      baseName: "field",
      type: "string",
      format: "",
    },
    value: {
      baseName: "value",
      type: "number",
      format: "double",
    },
  };

  static getAttributeTypeMap() {
    return UsageAttributionAggregatesBody.attributeTypeMap;
  }

  static deserialize(data: {
    [key: string]: any;
  }): UsageAttributionAggregatesBody {
    const res = new UsageAttributionAggregatesBody();

    res.aggType = ObjectSerializer.deserialize(data.agg_type, "string", "");

    res.field = ObjectSerializer.deserialize(data.field, "string", "");

    res.value = ObjectSerializer.deserialize(data.value, "number", "double");

    return res;
  }

  static serialize(
    data: UsageAttributionAggregatesBody
  ): { [key: string]: any } {
    const attributeTypes = UsageAttributionAggregatesBody.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.agg_type = ObjectSerializer.serialize(data.aggType, "string", "");

    res.field = ObjectSerializer.serialize(data.field, "string", "");

    res.value = ObjectSerializer.serialize(data.value, "number", "double");

    return res;
  }

  public constructor() {}
}
