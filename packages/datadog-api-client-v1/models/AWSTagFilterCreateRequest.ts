/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AWSNamespace } from "./AWSNamespace";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * The objects used to set an AWS tag filter.
 */

export class AWSTagFilterCreateRequest {
  /**
   * Your AWS Account ID without dashes.
   */
  "accountId"?: string;
  "namespace"?: AWSNamespace;
  /**
   * The tag filter string.
   */
  "tagFilterStr"?: string;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    accountId: {
      baseName: "account_id",
      type: "string",
      format: "",
    },
    namespace: {
      baseName: "namespace",
      type: "AWSNamespace",
      format: "",
    },
    tagFilterStr: {
      baseName: "tag_filter_str",
      type: "string",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return AWSTagFilterCreateRequest.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): AWSTagFilterCreateRequest {
    const res = new AWSTagFilterCreateRequest();

    res.accountId = ObjectSerializer.deserialize(data.account_id, "string", "");

    if (
      [
        "elb",
        "application_elb",
        "sqs",
        "rds",
        "custom",
        "network_elb",
        "lambda",
        undefined,
      ].includes(data.namespace)
    ) {
      res.namespace = data.namespace;
    } else {
      throw TypeError(`invalid enum value ${data.namespace} for namespace`);
    }

    res.tagFilterStr = ObjectSerializer.deserialize(
      data.tag_filter_str,
      "string",
      ""
    );

    return res;
  }

  static serialize(data: AWSTagFilterCreateRequest): { [key: string]: any } {
    const attributeTypes = AWSTagFilterCreateRequest.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.account_id = ObjectSerializer.serialize(data.accountId, "string", "");

    if (
      [
        "elb",
        "application_elb",
        "sqs",
        "rds",
        "custom",
        "network_elb",
        "lambda",
        undefined,
      ].includes(data.namespace)
    ) {
      res.namespace = data.namespace;
    } else {
      throw TypeError(`invalid enum value ${data.namespace} for namespace`);
    }

    res.tag_filter_str = ObjectSerializer.serialize(
      data.tagFilterStr,
      "string",
      ""
    );

    return res;
  }

  public constructor() {}
}
