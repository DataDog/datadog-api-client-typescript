/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SyntheticsAssertion } from "./SyntheticsAssertion";
import { SyntheticsBrowserVariable } from "./SyntheticsBrowserVariable";
import { SyntheticsConfigVariable } from "./SyntheticsConfigVariable";
import { SyntheticsTestRequest } from "./SyntheticsTestRequest";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Configuration object for a Synthetic test.
 */

export class SyntheticsTestConfig {
  /**
   * Array of assertions used for the test. Required for single API tests.
   */
  "assertions"?: Array<SyntheticsAssertion>;
  /**
   * Array of variables used for the test.
   */
  "configVariables"?: Array<SyntheticsConfigVariable>;
  "request"?: SyntheticsTestRequest;
  /**
   * Browser tests only - array of variables used for the test steps.
   */
  "variables"?: Array<SyntheticsBrowserVariable>;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    assertions: {
      baseName: "assertions",
      type: "Array<SyntheticsAssertion>",
      format: "",
    },
    configVariables: {
      baseName: "configVariables",
      type: "Array<SyntheticsConfigVariable>",
      format: "",
    },
    request: {
      baseName: "request",
      type: "SyntheticsTestRequest",
      format: "",
    },
    variables: {
      baseName: "variables",
      type: "Array<SyntheticsBrowserVariable>",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return SyntheticsTestConfig.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): SyntheticsTestConfig {
    const res = new SyntheticsTestConfig();

    res.assertions = ObjectSerializer.deserialize(
      data.assertions,
      "Array<SyntheticsAssertion>",
      ""
    );

    res.configVariables = ObjectSerializer.deserialize(
      data.configVariables,
      "Array<SyntheticsConfigVariable>",
      ""
    );

    res.request = ObjectSerializer.deserialize(
      data.request,
      "SyntheticsTestRequest",
      ""
    );

    res.variables = ObjectSerializer.deserialize(
      data.variables,
      "Array<SyntheticsBrowserVariable>",
      ""
    );

    return res;
  }

  static serialize(data: SyntheticsTestConfig): { [key: string]: any } {
    const attributeTypes = SyntheticsTestConfig.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.assertions = ObjectSerializer.serialize(
      data.assertions,
      "Array<SyntheticsAssertion>",
      ""
    );

    res.configVariables = ObjectSerializer.serialize(
      data.configVariables,
      "Array<SyntheticsConfigVariable>",
      ""
    );

    res.request = ObjectSerializer.serialize(
      data.request,
      "SyntheticsTestRequest",
      ""
    );

    res.variables = ObjectSerializer.serialize(
      data.variables,
      "Array<SyntheticsBrowserVariable>",
      ""
    );

    return res;
  }

  public constructor() {}
}
