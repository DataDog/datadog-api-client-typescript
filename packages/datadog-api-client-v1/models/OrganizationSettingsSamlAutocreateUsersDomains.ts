/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Has two properties, `enabled` (boolean) and `domains`, which is a list of domains without the @ symbol.
 */

export class OrganizationSettingsSamlAutocreateUsersDomains {
  /**
   * List of domains where the SAML automated user creation is enabled.
   */
  "domains"?: Array<string>;
  /**
   * Whether or not the automated user creation based on SAML domain is enabled.
   */
  "enabled"?: boolean;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    domains: {
      baseName: "domains",
      type: "Array<string>",
      format: "",
    },
    enabled: {
      baseName: "enabled",
      type: "boolean",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return OrganizationSettingsSamlAutocreateUsersDomains.attributeTypeMap;
  }

  static deserialize(data: {
    [key: string]: any;
  }): OrganizationSettingsSamlAutocreateUsersDomains {
    const res = new OrganizationSettingsSamlAutocreateUsersDomains();

    res.domains = ObjectSerializer.deserialize(
      data.domains,
      "Array<string>",
      ""
    );

    res.enabled = ObjectSerializer.deserialize(data.enabled, "boolean", "");

    return res;
  }

  static serialize(
    data: OrganizationSettingsSamlAutocreateUsersDomains
  ): { [key: string]: any } {
    const attributeTypes = OrganizationSettingsSamlAutocreateUsersDomains.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.domains = ObjectSerializer.serialize(data.domains, "Array<string>", "");

    res.enabled = ObjectSerializer.serialize(data.enabled, "boolean", "");

    return res;
  }

  public constructor() {}
}
