/**
 * Datadog API V1 Collection
 * Collection of all Datadog Public endpoints.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@datadoghq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { EventAlertType } from './EventAlertType';
import { EventPriority } from './EventPriority';
import { HttpFile } from '../http/http';

/**
* Object representing an event.
*/
export class Event {
    'alertType'?: EventAlertType;
    /**
    * POSIX timestamp of the event. Must be sent as an integer (i.e. no quotes). Limited to events no older than 7 days.
    */
    'dateHappened'?: number;
    /**
    * A device name.
    */
    'deviceName'?: string;
    /**
    * Host name to associate with the event. Any tags associated with the host are also applied to this event.
    */
    'host'?: string;
    /**
    * Integer ID of the event.
    */
    'id'?: number;
    /**
    * Payload of the event.
    */
    'payload'?: string;
    'priority'?: EventPriority;
    /**
    * The type of event being posted. Option examples include nagios, hudson, jenkins, my_apps, chef, puppet, git, bitbucket, etc. A complete list of source attribute values [available here](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).
    */
    'sourceTypeName'?: string;
    /**
    * A list of tags to apply to the event.
    */
    'tags'?: Array<string>;
    /**
    * The body of the event. Limited to 4000 characters. The text supports markdown. To use markdown in the event text, start the text block with `%%% \\n` and end the text block with `\\n %%%`. Use `msg_text` with the Datadog Ruby library.
    */
    'text'?: string;
    /**
    * The event title. Limited to 100 characters. Use `msg_title` with the Datadog Ruby library.
    */
    'title'?: string;
    /**
    * URL of the event.
    */
    'url'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "alertType",
            "baseName": "alert_type",
            "type": "EventAlertType",
            "format": ""
        },
        {
            "name": "dateHappened",
            "baseName": "date_happened",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "deviceName",
            "baseName": "device_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "host",
            "baseName": "host",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "payload",
            "baseName": "payload",
            "type": "string",
            "format": ""
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "EventPriority",
            "format": ""
        },
        {
            "name": "sourceTypeName",
            "baseName": "source_type_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string",
            "format": ""
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Event.attributeTypeMap;
    }
    
    public constructor() {
    }
}

