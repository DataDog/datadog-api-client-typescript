/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* Markers allow you to add visual conditional formatting for your graphs.
*/

export class WidgetMarker {
    /**
    * Combination of:   - A severity error, warning, ok, or info   - A line type: dashed, solid, or bold 
    */
    'displayType'?: string;
    /**
    * Label to display over the marker.
    */
    'label'?: string;
    /**
    * Timestamp for the widget.
    */
    'time'?: string;
    /**
    * Value to apply. Can be a single value y = 15 or a range of values 0 < y < 10.
    */
    'value': string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "displayType": {
            "baseName": "display_type",
            "type": "string",
            "format": ""
        },
        "label": {
            "baseName": "label",
            "type": "string",
            "format": ""
        },
        "time": {
            "baseName": "time",
            "type": "string",
            "format": ""
        },
        "value": {
            "baseName": "value",
            "type": "string",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return WidgetMarker.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): WidgetMarker {
      let res = new WidgetMarker();

      res.displayType = ObjectSerializer.deserialize(data.display_type, "string", "")

      res.label = ObjectSerializer.deserialize(data.label, "string", "")

      res.time = ObjectSerializer.deserialize(data.time, "string", "")

      if (data.value === undefined) {
          throw new TypeError("missing required attribute 'value' on 'WidgetMarker' object");
      }
      res.value = ObjectSerializer.deserialize(data.value, "string", "")


      return res;
    }

    static serialize(data: WidgetMarker): {[key: string]: any} {
        let attributeTypes = WidgetMarker.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.display_type = ObjectSerializer.serialize(data.displayType, "string", "")

        res.label = ObjectSerializer.serialize(data.label, "string", "")

        res.time = ObjectSerializer.serialize(data.time, "string", "")

        if (data.value === undefined) {
            throw new TypeError("missing required attribute 'value' on 'WidgetMarker' object");
        }
        res.value = ObjectSerializer.serialize(data.value, "string", "")

        return res
    }
    
    public constructor() {
    }
}



