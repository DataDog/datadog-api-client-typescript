/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SLOHistoryMetrics } from "./SLOHistoryMetrics";
import { SLOHistorySLIData } from "./SLOHistorySLIData";
import { SLOThreshold } from "./SLOThreshold";
import { SLOType } from "./SLOType";
import { SLOTypeNumeric } from "./SLOTypeNumeric";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * An array of service level objective objects.
 */

export class SLOHistoryResponseData {
  /**
   * The `from` timestamp in epoch seconds.
   */
  "fromTs"?: number;
  /**
   * For `metric` based SLOs where the query includes a group-by clause, this represents the list of grouping parameters.  This is not included in responses for `monitor` based SLOs.
   */
  "groupBy"?: Array<string>;
  /**
   * For grouped SLOs, this represents SLI data for specific groups.  This is not included in the responses for `metric` based SLOs.
   */
  "groups"?: Array<SLOHistorySLIData>;
  /**
   * For multi-monitor SLOs, this represents SLI data for specific monitors.  This is not included in the responses for `metric` based SLOs.
   */
  "monitors"?: Array<SLOHistorySLIData>;
  "overall"?: SLOHistorySLIData;
  "series"?: SLOHistoryMetrics;
  /**
   * mapping of string timeframe to the SLO threshold.
   */
  "thresholds"?: { [key: string]: SLOThreshold };
  /**
   * The `to` timestamp in epoch seconds.
   */
  "toTs"?: number;
  "type"?: SLOType;
  "typeId"?: SLOTypeNumeric;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    fromTs: {
      baseName: "from_ts",
      type: "number",
      format: "int64",
    },
    groupBy: {
      baseName: "group_by",
      type: "Array<string>",
      format: "",
    },
    groups: {
      baseName: "groups",
      type: "Array<SLOHistorySLIData>",
      format: "",
    },
    monitors: {
      baseName: "monitors",
      type: "Array<SLOHistorySLIData>",
      format: "",
    },
    overall: {
      baseName: "overall",
      type: "SLOHistorySLIData",
      format: "",
    },
    series: {
      baseName: "series",
      type: "SLOHistoryMetrics",
      format: "",
    },
    thresholds: {
      baseName: "thresholds",
      type: "{ [key: string]: SLOThreshold; }",
      format: "",
    },
    toTs: {
      baseName: "to_ts",
      type: "number",
      format: "int64",
    },
    type: {
      baseName: "type",
      type: "SLOType",
      format: "",
    },
    typeId: {
      baseName: "type_id",
      type: "SLOTypeNumeric",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return SLOHistoryResponseData.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): SLOHistoryResponseData {
    const res = new SLOHistoryResponseData();

    res.fromTs = ObjectSerializer.deserialize(data.from_ts, "number", "int64");

    res.groupBy = ObjectSerializer.deserialize(
      data.group_by,
      "Array<string>",
      ""
    );

    res.groups = ObjectSerializer.deserialize(
      data.groups,
      "Array<SLOHistorySLIData>",
      ""
    );

    res.monitors = ObjectSerializer.deserialize(
      data.monitors,
      "Array<SLOHistorySLIData>",
      ""
    );

    res.overall = ObjectSerializer.deserialize(
      data.overall,
      "SLOHistorySLIData",
      ""
    );

    res.series = ObjectSerializer.deserialize(
      data.series,
      "SLOHistoryMetrics",
      ""
    );

    res.thresholds = ObjectSerializer.deserialize(
      data.thresholds,
      "{ [key: string]: SLOThreshold; }",
      ""
    );

    res.toTs = ObjectSerializer.deserialize(data.to_ts, "number", "int64");

    if (["metric", "monitor", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      const raw = new SLOHistoryResponseData();
      raw.unparsedObject = data;
      return raw;
    }

    if ([0, 1, undefined].includes(data.type_id)) {
      res.typeId = data.type_id;
    } else {
      const raw = new SLOHistoryResponseData();
      raw.unparsedObject = data;
      return raw;
    }

    return res;
  }

  static serialize(data: SLOHistoryResponseData): { [key: string]: any } {
    const attributeTypes = SLOHistoryResponseData.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.from_ts = ObjectSerializer.serialize(data.fromTs, "number", "int64");

    res.group_by = ObjectSerializer.serialize(
      data.groupBy,
      "Array<string>",
      ""
    );

    res.groups = ObjectSerializer.serialize(
      data.groups,
      "Array<SLOHistorySLIData>",
      ""
    );

    res.monitors = ObjectSerializer.serialize(
      data.monitors,
      "Array<SLOHistorySLIData>",
      ""
    );

    res.overall = ObjectSerializer.serialize(
      data.overall,
      "SLOHistorySLIData",
      ""
    );

    res.series = ObjectSerializer.serialize(
      data.series,
      "SLOHistoryMetrics",
      ""
    );

    res.thresholds = ObjectSerializer.serialize(
      data.thresholds,
      "{ [key: string]: SLOThreshold; }",
      ""
    );

    res.to_ts = ObjectSerializer.serialize(data.toTs, "number", "int64");

    if (["metric", "monitor", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    if ([0, 1, undefined].includes(data.typeId)) {
      res.type_id = data.typeId;
    } else {
      throw TypeError(`invalid enum value ${data.typeId} for typeId`);
    }

    return res;
  }

  public constructor() {}
}
