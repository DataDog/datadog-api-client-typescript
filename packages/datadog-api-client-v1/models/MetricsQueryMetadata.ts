/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { MetricsQueryUnit } from './MetricsQueryUnit';
import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* Object containing all metric names returned and their associated metadata.
*/

export class MetricsQueryMetadata {
    /**
    * Aggregation type.
    */
    'aggr'?: string;
    /**
    * Display name of the metric.
    */
    'displayName'?: string;
    /**
    * End of the time window, milliseconds since Unix epoch.
    */
    'end'?: number;
    /**
    * Metric expression.
    */
    'expression'?: string;
    /**
    * Number of seconds between data samples.
    */
    'interval'?: number;
    /**
    * Number of data samples.
    */
    'length'?: number;
    /**
    * Metric name.
    */
    'metric'?: string;
    /**
    * List of points of the time series.
    */
    'pointlist'?: Array<Array<number>>;
    /**
    * Metric scope, comma separated list of tags.
    */
    'scope'?: string;
    /**
    * Start of the time window, milliseconds since Unix epoch.
    */
    'start'?: number;
    /**
    * Detailed information about the metric unit. First element describes the \"primary unit\" (for example, `bytes` in `bytes per second`), second describes the \"per unit\" (for example, `second` in `bytes per second`).
    */
    'unit'?: Array<MetricsQueryUnit>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "aggr": {
            "baseName": "aggr",
            "type": "string",
            "format": ""
        },
        "displayName": {
            "baseName": "display_name",
            "type": "string",
            "format": ""
        },
        "end": {
            "baseName": "end",
            "type": "number",
            "format": "int64"
        },
        "expression": {
            "baseName": "expression",
            "type": "string",
            "format": ""
        },
        "interval": {
            "baseName": "interval",
            "type": "number",
            "format": "int64"
        },
        "length": {
            "baseName": "length",
            "type": "number",
            "format": "int64"
        },
        "metric": {
            "baseName": "metric",
            "type": "string",
            "format": ""
        },
        "pointlist": {
            "baseName": "pointlist",
            "type": "Array<Array<number>>",
            "format": "double"
        },
        "scope": {
            "baseName": "scope",
            "type": "string",
            "format": ""
        },
        "start": {
            "baseName": "start",
            "type": "number",
            "format": "int64"
        },
        "unit": {
            "baseName": "unit",
            "type": "Array<MetricsQueryUnit>",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return MetricsQueryMetadata.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): MetricsQueryMetadata {
      let res = new MetricsQueryMetadata();

      res.aggr = ObjectSerializer.deserialize(data.aggr, "string", "")

      res.displayName = ObjectSerializer.deserialize(data.display_name, "string", "")

      res.end = ObjectSerializer.deserialize(data.end, "number", "int64")

      res.expression = ObjectSerializer.deserialize(data.expression, "string", "")

      res.interval = ObjectSerializer.deserialize(data.interval, "number", "int64")

      res.length = ObjectSerializer.deserialize(data.length, "number", "int64")

      res.metric = ObjectSerializer.deserialize(data.metric, "string", "")

      res.pointlist = ObjectSerializer.deserialize(data.pointlist, "Array<Array<number>>", "double")

      res.scope = ObjectSerializer.deserialize(data.scope, "string", "")

      res.start = ObjectSerializer.deserialize(data.start, "number", "int64")

      res.unit = ObjectSerializer.deserialize(data.unit, "Array<MetricsQueryUnit>", "")


      return res;
    }

    static serialize(data: MetricsQueryMetadata): {[key: string]: any} {
        let attributeTypes = MetricsQueryMetadata.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.aggr = ObjectSerializer.serialize(data.aggr, "string", "")

        res.display_name = ObjectSerializer.serialize(data.displayName, "string", "")

        res.end = ObjectSerializer.serialize(data.end, "number", "int64")

        res.expression = ObjectSerializer.serialize(data.expression, "string", "")

        res.interval = ObjectSerializer.serialize(data.interval, "number", "int64")

        res.length = ObjectSerializer.serialize(data.length, "number", "int64")

        res.metric = ObjectSerializer.serialize(data.metric, "string", "")

        res.pointlist = ObjectSerializer.serialize(data.pointlist, "Array<Array<number>>", "double")

        res.scope = ObjectSerializer.serialize(data.scope, "string", "")

        res.start = ObjectSerializer.serialize(data.start, "number", "int64")

        res.unit = ObjectSerializer.serialize(data.unit, "Array<MetricsQueryUnit>", "")

        return res
    }
    
    public constructor() {
    }
}



