/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HostMapWidgetDefinitionRequests } from "./HostMapWidgetDefinitionRequests";
import { HostMapWidgetDefinitionStyle } from "./HostMapWidgetDefinitionStyle";
import { HostMapWidgetDefinitionType } from "./HostMapWidgetDefinitionType";
import { WidgetCustomLink } from "./WidgetCustomLink";
import { WidgetNodeType } from "./WidgetNodeType";
import { WidgetTextAlign } from "./WidgetTextAlign";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * The host map widget graphs any metric across your hosts using the same visualization available from the main Host Map page.
 */

export class HostMapWidgetDefinition {
  /**
   * List of custom links.
   */
  "customLinks"?: Array<WidgetCustomLink>;
  /**
   * List of tag prefixes to group by.
   */
  "group"?: Array<string>;
  /**
   * Whether to show the hosts that donâ€™t fit in a group.
   */
  "noGroupHosts"?: boolean;
  /**
   * Whether to show the hosts with no metrics.
   */
  "noMetricHosts"?: boolean;
  "nodeType"?: WidgetNodeType;
  /**
   * Notes on the title.
   */
  "notes"?: string;
  "requests": HostMapWidgetDefinitionRequests;
  /**
   * List of tags used to filter the map.
   */
  "scope"?: Array<string>;
  "style"?: HostMapWidgetDefinitionStyle;
  /**
   * Title of the widget.
   */
  "title"?: string;
  "titleAlign"?: WidgetTextAlign;
  /**
   * Size of the title.
   */
  "titleSize"?: string;
  "type": HostMapWidgetDefinitionType;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    customLinks: {
      baseName: "custom_links",
      type: "Array<WidgetCustomLink>",
      format: "",
    },
    group: {
      baseName: "group",
      type: "Array<string>",
      format: "",
    },
    noGroupHosts: {
      baseName: "no_group_hosts",
      type: "boolean",
      format: "",
    },
    noMetricHosts: {
      baseName: "no_metric_hosts",
      type: "boolean",
      format: "",
    },
    nodeType: {
      baseName: "node_type",
      type: "WidgetNodeType",
      format: "",
    },
    notes: {
      baseName: "notes",
      type: "string",
      format: "",
    },
    requests: {
      baseName: "requests",
      type: "HostMapWidgetDefinitionRequests",
      format: "",
    },
    scope: {
      baseName: "scope",
      type: "Array<string>",
      format: "",
    },
    style: {
      baseName: "style",
      type: "HostMapWidgetDefinitionStyle",
      format: "",
    },
    title: {
      baseName: "title",
      type: "string",
      format: "",
    },
    titleAlign: {
      baseName: "title_align",
      type: "WidgetTextAlign",
      format: "",
    },
    titleSize: {
      baseName: "title_size",
      type: "string",
      format: "",
    },
    type: {
      baseName: "type",
      type: "HostMapWidgetDefinitionType",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return HostMapWidgetDefinition.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): HostMapWidgetDefinition {
    const res = new HostMapWidgetDefinition();

    res.customLinks = ObjectSerializer.deserialize(
      data.custom_links,
      "Array<WidgetCustomLink>",
      ""
    );

    res.group = ObjectSerializer.deserialize(data.group, "Array<string>", "");

    res.noGroupHosts = ObjectSerializer.deserialize(
      data.no_group_hosts,
      "boolean",
      ""
    );

    res.noMetricHosts = ObjectSerializer.deserialize(
      data.no_metric_hosts,
      "boolean",
      ""
    );

    if (["host", "container", undefined].includes(data.node_type)) {
      res.nodeType = data.node_type;
    } else {
      throw TypeError(`invalid enum value ${data.node_type} for node_type`);
    }

    res.notes = ObjectSerializer.deserialize(data.notes, "string", "");

    if (data.requests === undefined) {
      throw new TypeError(
        "missing required attribute 'requests' on 'HostMapWidgetDefinition' object"
      );
    }
    res.requests = ObjectSerializer.deserialize(
      data.requests,
      "HostMapWidgetDefinitionRequests",
      ""
    );

    res.scope = ObjectSerializer.deserialize(data.scope, "Array<string>", "");

    res.style = ObjectSerializer.deserialize(
      data.style,
      "HostMapWidgetDefinitionStyle",
      ""
    );

    res.title = ObjectSerializer.deserialize(data.title, "string", "");

    if (["center", "left", "right", undefined].includes(data.title_align)) {
      res.titleAlign = data.title_align;
    } else {
      throw TypeError(`invalid enum value ${data.title_align} for title_align`);
    }

    res.titleSize = ObjectSerializer.deserialize(data.title_size, "string", "");

    if (data.type === undefined) {
      throw new TypeError(
        "missing required attribute 'type' on 'HostMapWidgetDefinition' object"
      );
    }
    if (["hostmap", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  static serialize(data: HostMapWidgetDefinition): { [key: string]: any } {
    const attributeTypes = HostMapWidgetDefinition.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.custom_links = ObjectSerializer.serialize(
      data.customLinks,
      "Array<WidgetCustomLink>",
      ""
    );

    res.group = ObjectSerializer.serialize(data.group, "Array<string>", "");

    res.no_group_hosts = ObjectSerializer.serialize(
      data.noGroupHosts,
      "boolean",
      ""
    );

    res.no_metric_hosts = ObjectSerializer.serialize(
      data.noMetricHosts,
      "boolean",
      ""
    );

    if (["host", "container", undefined].includes(data.nodeType)) {
      res.node_type = data.nodeType;
    } else {
      throw TypeError(`invalid enum value ${data.nodeType} for nodeType`);
    }

    res.notes = ObjectSerializer.serialize(data.notes, "string", "");

    if (data.requests === undefined) {
      throw new TypeError(
        "missing required attribute 'requests' on 'HostMapWidgetDefinition' object"
      );
    }
    res.requests = ObjectSerializer.serialize(
      data.requests,
      "HostMapWidgetDefinitionRequests",
      ""
    );

    res.scope = ObjectSerializer.serialize(data.scope, "Array<string>", "");

    res.style = ObjectSerializer.serialize(
      data.style,
      "HostMapWidgetDefinitionStyle",
      ""
    );

    res.title = ObjectSerializer.serialize(data.title, "string", "");

    if (["center", "left", "right", undefined].includes(data.titleAlign)) {
      res.title_align = data.titleAlign;
    } else {
      throw TypeError(`invalid enum value ${data.titleAlign} for titleAlign`);
    }

    res.title_size = ObjectSerializer.serialize(data.titleSize, "string", "");

    if (data.type === undefined) {
      throw new TypeError(
        "missing required attribute 'type' on 'HostMapWidgetDefinition' object"
      );
    }
    if (["hostmap", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  public constructor() {}
}
