/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SyntheticsAPITestConfig } from './SyntheticsAPITestConfig';
import { SyntheticsAPITestType } from './SyntheticsAPITestType';
import { SyntheticsTestDetailsSubType } from './SyntheticsTestDetailsSubType';
import { SyntheticsTestOptions } from './SyntheticsTestOptions';
import { SyntheticsTestPauseStatus } from './SyntheticsTestPauseStatus';
import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* Object containing details about a Synthetic API test.
*/

export class SyntheticsAPITest {
    'config'?: SyntheticsAPITestConfig;
    /**
    * Array of locations used to run the test.
    */
    'locations'?: Array<string>;
    /**
    * Notification message associated with the test.
    */
    'message'?: string;
    /**
    * The associated monitor ID.
    */
    'monitorId'?: number;
    /**
    * Name of the test.
    */
    'name'?: string;
    'options'?: SyntheticsTestOptions;
    /**
    * The public ID for the test.
    */
    'publicId'?: string;
    'status'?: SyntheticsTestPauseStatus;
    'subtype'?: SyntheticsTestDetailsSubType;
    /**
    * Array of tags attached to the test.
    */
    'tags'?: Array<string>;
    'type'?: SyntheticsAPITestType;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "config": {
            "baseName": "config",
            "type": "SyntheticsAPITestConfig",
            "format": ""
        },
        "locations": {
            "baseName": "locations",
            "type": "Array<string>",
            "format": ""
        },
        "message": {
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        "monitorId": {
            "baseName": "monitor_id",
            "type": "number",
            "format": "int64"
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "options": {
            "baseName": "options",
            "type": "SyntheticsTestOptions",
            "format": ""
        },
        "publicId": {
            "baseName": "public_id",
            "type": "string",
            "format": ""
        },
        "status": {
            "baseName": "status",
            "type": "SyntheticsTestPauseStatus",
            "format": ""
        },
        "subtype": {
            "baseName": "subtype",
            "type": "SyntheticsTestDetailsSubType",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "SyntheticsAPITestType",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return SyntheticsAPITest.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): SyntheticsAPITest {
      let res = new SyntheticsAPITest();

      res.config = ObjectSerializer.deserialize(data.config, "SyntheticsAPITestConfig", "")

      res.locations = ObjectSerializer.deserialize(data.locations, "Array<string>", "")

      res.message = ObjectSerializer.deserialize(data.message, "string", "")

      res.monitorId = ObjectSerializer.deserialize(data.monitor_id, "number", "int64")

      res.name = ObjectSerializer.deserialize(data.name, "string", "")

      res.options = ObjectSerializer.deserialize(data.options, "SyntheticsTestOptions", "")

      res.publicId = ObjectSerializer.deserialize(data.public_id, "string", "")

      if (['live', 'paused', undefined].includes(data.status)) {
          res.status = data.status;
      } else {
          throw TypeError(`invalid enum value ${ data.status } for status`);
      }

      if (['http', 'ssl', 'tcp', 'dns', 'multi', undefined].includes(data.subtype)) {
          res.subtype = data.subtype;
      } else {
          throw TypeError(`invalid enum value ${ data.subtype } for subtype`);
      }

      res.tags = ObjectSerializer.deserialize(data.tags, "Array<string>", "")

      if (['api', undefined].includes(data.type)) {
          res.type = data.type;
      } else {
          throw TypeError(`invalid enum value ${ data.type } for type`);
      }


      return res;
    }

    static serialize(data: SyntheticsAPITest): {[key: string]: any} {
        let attributeTypes = SyntheticsAPITest.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.config = ObjectSerializer.serialize(data.config, "SyntheticsAPITestConfig", "")

        res.locations = ObjectSerializer.serialize(data.locations, "Array<string>", "")

        res.message = ObjectSerializer.serialize(data.message, "string", "")

        res.monitor_id = ObjectSerializer.serialize(data.monitorId, "number", "int64")

        res.name = ObjectSerializer.serialize(data.name, "string", "")

        res.options = ObjectSerializer.serialize(data.options, "SyntheticsTestOptions", "")

        res.public_id = ObjectSerializer.serialize(data.publicId, "string", "")

        if (['live', 'paused', undefined].includes(data.status)) {
            res.status = data.status;
        } else {
            throw TypeError(`invalid enum value ${ data.status } for status`);
        }

        if (['http', 'ssl', 'tcp', 'dns', 'multi', undefined].includes(data.subtype)) {
            res.subtype = data.subtype;
        } else {
            throw TypeError(`invalid enum value ${ data.subtype } for subtype`);
        }

        res.tags = ObjectSerializer.serialize(data.tags, "Array<string>", "")

        if (['api', undefined].includes(data.type)) {
            res.type = data.type;
        } else {
            throw TypeError(`invalid enum value ${ data.type } for type`);
        }

        return res
    }
    
    public constructor() {
    }
}



