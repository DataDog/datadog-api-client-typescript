/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* The counts of monitors per different criteria.
*/

export class MonitorSearchResponseCounts {
    /**
    * Search facets.
    */
    'muted'?: Array<any>;
    /**
    * Search facets.
    */
    'status'?: Array<any>;
    /**
    * Search facets.
    */
    'tag'?: Array<any>;
    /**
    * Search facets.
    */
    'type'?: Array<any>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "muted": {
            "baseName": "muted",
            "type": "Array<any>",
            "format": ""
        },
        "status": {
            "baseName": "status",
            "type": "Array<any>",
            "format": ""
        },
        "tag": {
            "baseName": "tag",
            "type": "Array<any>",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "Array<any>",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return MonitorSearchResponseCounts.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): MonitorSearchResponseCounts {
      let res = new MonitorSearchResponseCounts();

      res.muted = ObjectSerializer.deserialize(data.muted, "Array<any>", "")

      res.status = ObjectSerializer.deserialize(data.status, "Array<any>", "")

      res.tag = ObjectSerializer.deserialize(data.tag, "Array<any>", "")

      res.type = ObjectSerializer.deserialize(data.type, "Array<any>", "")


      return res;
    }

    static serialize(data: MonitorSearchResponseCounts): {[key: string]: any} {
        let attributeTypes = MonitorSearchResponseCounts.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.muted = ObjectSerializer.serialize(data.muted, "Array<any>", "")

        res.status = ObjectSerializer.serialize(data.status, "Array<any>", "")

        res.tag = ObjectSerializer.serialize(data.tag, "Array<any>", "")

        res.type = ObjectSerializer.serialize(data.type, "Array<any>", "")

        return res
    }
    
    public constructor() {
    }
}



