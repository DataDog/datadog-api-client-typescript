/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* The style to apply to the widget.
*/

export class HostMapWidgetDefinitionStyle {
    /**
    * Max value to use to color the map.
    */
    'fillMax'?: string;
    /**
    * Min value to use to color the map.
    */
    'fillMin'?: string;
    /**
    * Color palette to apply to the widget.
    */
    'palette'?: string;
    /**
    * Whether to flip the palette tones.
    */
    'paletteFlip'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "fillMax": {
            "baseName": "fill_max",
            "type": "string",
            "format": ""
        },
        "fillMin": {
            "baseName": "fill_min",
            "type": "string",
            "format": ""
        },
        "palette": {
            "baseName": "palette",
            "type": "string",
            "format": ""
        },
        "paletteFlip": {
            "baseName": "palette_flip",
            "type": "boolean",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return HostMapWidgetDefinitionStyle.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): HostMapWidgetDefinitionStyle {
      let res = new HostMapWidgetDefinitionStyle();

      res.fillMax = ObjectSerializer.deserialize(data.fill_max, "string", "")

      res.fillMin = ObjectSerializer.deserialize(data.fill_min, "string", "")

      res.palette = ObjectSerializer.deserialize(data.palette, "string", "")

      res.paletteFlip = ObjectSerializer.deserialize(data.palette_flip, "boolean", "")


      return res;
    }

    static serialize(data: HostMapWidgetDefinitionStyle): {[key: string]: any} {
        let attributeTypes = HostMapWidgetDefinitionStyle.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.fill_max = ObjectSerializer.serialize(data.fillMax, "string", "")

        res.fill_min = ObjectSerializer.serialize(data.fillMin, "string", "")

        res.palette = ObjectSerializer.serialize(data.palette, "string", "")

        res.palette_flip = ObjectSerializer.serialize(data.paletteFlip, "boolean", "")

        return res
    }
    
    public constructor() {
    }
}



