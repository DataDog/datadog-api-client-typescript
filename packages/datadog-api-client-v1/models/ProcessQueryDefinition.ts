/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ObjectSerializer } from "./ObjectSerializer";

/**
 * The process query to use in the widget.
 */

export class ProcessQueryDefinition {
  /**
   * List of processes.
   */
  "filterBy"?: Array<string>;
  /**
   * Max number of items in the filter list.
   */
  "limit"?: number;
  /**
   * Your chosen metric.
   */
  "metric": string;
  /**
   * Your chosen search term.
   */
  "searchBy"?: string;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    filterBy: {
      baseName: "filter_by",
      type: "Array<string>",
      format: "",
    },
    limit: {
      baseName: "limit",
      type: "number",
      format: "int64",
    },
    metric: {
      baseName: "metric",
      type: "string",
      format: "",
    },
    searchBy: {
      baseName: "search_by",
      type: "string",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return ProcessQueryDefinition.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): ProcessQueryDefinition {
    const res = new ProcessQueryDefinition();

    res.filterBy = ObjectSerializer.deserialize(
      data.filter_by,
      "Array<string>",
      ""
    );

    res.limit = ObjectSerializer.deserialize(data.limit, "number", "int64");

    if (data.metric === undefined) {
      throw new TypeError(
        "missing required attribute 'metric' on 'ProcessQueryDefinition' object"
      );
    }
    res.metric = ObjectSerializer.deserialize(data.metric, "string", "");

    res.searchBy = ObjectSerializer.deserialize(data.search_by, "string", "");

    return res;
  }

  static serialize(data: ProcessQueryDefinition): { [key: string]: any } {
    const attributeTypes = ProcessQueryDefinition.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.filter_by = ObjectSerializer.serialize(
      data.filterBy,
      "Array<string>",
      ""
    );

    res.limit = ObjectSerializer.serialize(data.limit, "number", "int64");

    if (data.metric === undefined) {
      throw new TypeError(
        "missing required attribute 'metric' on 'ProcessQueryDefinition' object"
      );
    }
    res.metric = ObjectSerializer.serialize(data.metric, "string", "");

    res.search_by = ObjectSerializer.serialize(data.searchBy, "string", "");

    return res;
  }

  public constructor() {}
}
