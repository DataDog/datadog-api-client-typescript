/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* Core Web Vitals attached to a browser test step.
*/

export class SyntheticsCoreWebVitals {
    /**
    * Cumulative Layout Shift.
    */
    'cls'?: number;
    /**
    * Largest Contentful Paint in milliseconds.
    */
    'lcp'?: number;
    /**
    * URL attached to the metrics.
    */
    'url'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "cls": {
            "baseName": "cls",
            "type": "number",
            "format": "int64"
        },
        "lcp": {
            "baseName": "lcp",
            "type": "number",
            "format": "int64"
        },
        "url": {
            "baseName": "url",
            "type": "string",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return SyntheticsCoreWebVitals.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): SyntheticsCoreWebVitals {
      let res = new SyntheticsCoreWebVitals();

      res.cls = ObjectSerializer.deserialize(data.cls, "number", "int64")

      res.lcp = ObjectSerializer.deserialize(data.lcp, "number", "int64")

      res.url = ObjectSerializer.deserialize(data.url, "string", "")


      return res;
    }

    static serialize(data: SyntheticsCoreWebVitals): {[key: string]: any} {
        let attributeTypes = SyntheticsCoreWebVitals.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.cls = ObjectSerializer.serialize(data.cls, "number", "int64")

        res.lcp = ObjectSerializer.serialize(data.lcp, "number", "int64")

        res.url = ObjectSerializer.serialize(data.url, "string", "")

        return res
    }
    
    public constructor() {
    }
}



