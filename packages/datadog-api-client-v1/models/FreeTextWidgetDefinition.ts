/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { FreeTextWidgetDefinitionType } from "./FreeTextWidgetDefinitionType";
import { WidgetTextAlign } from "./WidgetTextAlign";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Free text is a widget that allows you to add headings to your screenboard. Commonly used to state the overall purpose of the dashboard. Only available on FREE layout dashboards.
 */

export class FreeTextWidgetDefinition {
  /**
   * Color of the text.
   */
  "color"?: string;
  /**
   * Size of the text.
   */
  "fontSize"?: string;
  /**
   * Text to display.
   */
  "text": string;
  "textAlign"?: WidgetTextAlign;
  "type": FreeTextWidgetDefinitionType;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    color: {
      baseName: "color",
      type: "string",
      format: "",
    },
    fontSize: {
      baseName: "font_size",
      type: "string",
      format: "",
    },
    text: {
      baseName: "text",
      type: "string",
      format: "",
    },
    textAlign: {
      baseName: "text_align",
      type: "WidgetTextAlign",
      format: "",
    },
    type: {
      baseName: "type",
      type: "FreeTextWidgetDefinitionType",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return FreeTextWidgetDefinition.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): FreeTextWidgetDefinition {
    const res = new FreeTextWidgetDefinition();

    res.color = ObjectSerializer.deserialize(data.color, "string", "");

    res.fontSize = ObjectSerializer.deserialize(data.font_size, "string", "");

    if (data.text === undefined) {
      throw new TypeError(
        "missing required attribute 'text' on 'FreeTextWidgetDefinition' object"
      );
    }
    res.text = ObjectSerializer.deserialize(data.text, "string", "");

    if (["center", "left", "right", undefined].includes(data.text_align)) {
      res.textAlign = data.text_align;
    } else {
      throw TypeError(`invalid enum value ${data.text_align} for text_align`);
    }

    if (data.type === undefined) {
      throw new TypeError(
        "missing required attribute 'type' on 'FreeTextWidgetDefinition' object"
      );
    }
    if (["free_text", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  static serialize(data: FreeTextWidgetDefinition): { [key: string]: any } {
    const attributeTypes = FreeTextWidgetDefinition.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.color = ObjectSerializer.serialize(data.color, "string", "");

    res.font_size = ObjectSerializer.serialize(data.fontSize, "string", "");

    if (data.text === undefined) {
      throw new TypeError(
        "missing required attribute 'text' on 'FreeTextWidgetDefinition' object"
      );
    }
    res.text = ObjectSerializer.serialize(data.text, "string", "");

    if (["center", "left", "right", undefined].includes(data.textAlign)) {
      res.text_align = data.textAlign;
    } else {
      throw TypeError(`invalid enum value ${data.textAlign} for textAlign`);
    }

    if (data.type === undefined) {
      throw new TypeError(
        "missing required attribute 'type' on 'FreeTextWidgetDefinition' object"
      );
    }
    if (["free_text", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  public constructor() {}
}
