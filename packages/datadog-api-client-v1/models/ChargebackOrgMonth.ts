/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ChargebackSummaryCharge } from "./ChargebackSummaryCharge";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Cost per product for a sub-org for a given month.
 */

export class ChargebackOrgMonth {
  /**
   * Charges by product and charge type.
   */
  "charges"?: Array<ChargebackSummaryCharge>;
  /**
   * The month for the usage.
   */
  "date"?: Date;
  /**
   * ID of the sub-org.
   */
  "orgId"?: number;
  /**
   * Total cost for all products for the sub-org within the month.
   */
  "totalCost"?: number;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    charges: {
      baseName: "charges",
      type: "Array<ChargebackSummaryCharge>",
      format: "",
    },
    date: {
      baseName: "date",
      type: "Date",
      format: "date-time",
    },
    orgId: {
      baseName: "org_id",
      type: "number",
      format: "int64",
    },
    totalCost: {
      baseName: "total_cost",
      type: "number",
      format: "double",
    },
  };

  static getAttributeTypeMap() {
    return ChargebackOrgMonth.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): ChargebackOrgMonth {
    const res = new ChargebackOrgMonth();

    res.charges = ObjectSerializer.deserialize(
      data.charges,
      "Array<ChargebackSummaryCharge>",
      ""
    );

    res.date = ObjectSerializer.deserialize(data.date, "Date", "date-time");

    res.orgId = ObjectSerializer.deserialize(data.org_id, "number", "int64");

    res.totalCost = ObjectSerializer.deserialize(
      data.total_cost,
      "number",
      "double"
    );

    return res;
  }

  static serialize(data: ChargebackOrgMonth): { [key: string]: any } {
    const attributeTypes = ChargebackOrgMonth.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.charges = ObjectSerializer.serialize(
      data.charges,
      "Array<ChargebackSummaryCharge>",
      ""
    );

    res.date = ObjectSerializer.serialize(data.date, "Date", "date-time");

    res.org_id = ObjectSerializer.serialize(data.orgId, "number", "int64");

    res.total_cost = ObjectSerializer.serialize(
      data.totalCost,
      "number",
      "double"
    );

    return res;
  }

  public constructor() {}
}
