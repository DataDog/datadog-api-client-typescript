/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SyntheticsDeviceID } from "./SyntheticsDeviceID";
import { SyntheticsStatus } from "./SyntheticsStatus";
import { SyntheticsTestDetailsType } from "./SyntheticsTestDetailsType";
import { SyntheticsTestExecutionRule } from "./SyntheticsTestExecutionRule";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Object with the results of a Synthetics batch.
 */

export class SyntheticsBatchResult {
  "device"?: SyntheticsDeviceID;
  /**
   * Total duration in millisecond of the test.
   */
  "duration"?: number;
  "executionRule"?: SyntheticsTestExecutionRule;
  /**
   * Name of the location.
   */
  "location"?: string;
  /**
   * The ID of the result to get.
   */
  "resultId"?: string;
  /**
   * Total duration in millisecond of the test.
   */
  "retries"?: number;
  "status"?: SyntheticsStatus;
  /**
   * Name of the test.
   */
  "testName"?: string;
  /**
   * The public ID of the Synthetic test.
   */
  "testPublicId"?: string;
  "testType"?: SyntheticsTestDetailsType;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    device: {
      baseName: "device",
      type: "SyntheticsDeviceID",
      format: "",
    },
    duration: {
      baseName: "duration",
      type: "number",
      format: "double",
    },
    executionRule: {
      baseName: "execution_rule",
      type: "SyntheticsTestExecutionRule",
      format: "",
    },
    location: {
      baseName: "location",
      type: "string",
      format: "",
    },
    resultId: {
      baseName: "result_id",
      type: "string",
      format: "",
    },
    retries: {
      baseName: "retries",
      type: "number",
      format: "double",
    },
    status: {
      baseName: "status",
      type: "SyntheticsStatus",
      format: "",
    },
    testName: {
      baseName: "test_name",
      type: "string",
      format: "",
    },
    testPublicId: {
      baseName: "test_public_id",
      type: "string",
      format: "",
    },
    testType: {
      baseName: "test_type",
      type: "SyntheticsTestDetailsType",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return SyntheticsBatchResult.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): SyntheticsBatchResult {
    const res = new SyntheticsBatchResult();

    if (
      [
        "laptop_large",
        "tablet",
        "mobile_small",
        "chrome.laptop_large",
        "chrome.tablet",
        "chrome.mobile_small",
        "firefox.laptop_large",
        "firefox.tablet",
        "firefox.mobile_small",
        "edge.laptop_large",
        "edge.tablet",
        "edge.mobile_small",
        undefined,
      ].includes(data.device)
    ) {
      res.device = data.device;
    } else {
      const raw = new SyntheticsBatchResult();
      raw.unparsedObject = data;
      return raw;
    }

    res.duration = ObjectSerializer.deserialize(
      data.duration,
      "number",
      "double"
    );

    if (
      ["blocking", "non_blocking", "skipped", undefined].includes(
        data.execution_rule
      )
    ) {
      res.executionRule = data.execution_rule;
    } else {
      const raw = new SyntheticsBatchResult();
      raw.unparsedObject = data;
      return raw;
    }

    res.location = ObjectSerializer.deserialize(data.location, "string", "");

    res.resultId = ObjectSerializer.deserialize(data.result_id, "string", "");

    res.retries = ObjectSerializer.deserialize(
      data.retries,
      "number",
      "double"
    );

    if (["passed", "skipped", "failed", undefined].includes(data.status)) {
      res.status = data.status;
    } else {
      const raw = new SyntheticsBatchResult();
      raw.unparsedObject = data;
      return raw;
    }

    res.testName = ObjectSerializer.deserialize(data.test_name, "string", "");

    res.testPublicId = ObjectSerializer.deserialize(
      data.test_public_id,
      "string",
      ""
    );

    if (["api", "browser", undefined].includes(data.test_type)) {
      res.testType = data.test_type;
    } else {
      const raw = new SyntheticsBatchResult();
      raw.unparsedObject = data;
      return raw;
    }

    return res;
  }

  static serialize(data: SyntheticsBatchResult): { [key: string]: any } {
    const attributeTypes = SyntheticsBatchResult.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    if (
      [
        "laptop_large",
        "tablet",
        "mobile_small",
        "chrome.laptop_large",
        "chrome.tablet",
        "chrome.mobile_small",
        "firefox.laptop_large",
        "firefox.tablet",
        "firefox.mobile_small",
        "edge.laptop_large",
        "edge.tablet",
        "edge.mobile_small",
        undefined,
      ].includes(data.device)
    ) {
      res.device = data.device;
    } else {
      throw TypeError(`invalid enum value ${data.device} for device`);
    }

    res.duration = ObjectSerializer.serialize(
      data.duration,
      "number",
      "double"
    );

    if (
      ["blocking", "non_blocking", "skipped", undefined].includes(
        data.executionRule
      )
    ) {
      res.execution_rule = data.executionRule;
    } else {
      throw TypeError(
        `invalid enum value ${data.executionRule} for executionRule`
      );
    }

    res.location = ObjectSerializer.serialize(data.location, "string", "");

    res.result_id = ObjectSerializer.serialize(data.resultId, "string", "");

    res.retries = ObjectSerializer.serialize(data.retries, "number", "double");

    if (["passed", "skipped", "failed", undefined].includes(data.status)) {
      res.status = data.status;
    } else {
      throw TypeError(`invalid enum value ${data.status} for status`);
    }

    res.test_name = ObjectSerializer.serialize(data.testName, "string", "");

    res.test_public_id = ObjectSerializer.serialize(
      data.testPublicId,
      "string",
      ""
    );

    if (["api", "browser", undefined].includes(data.testType)) {
      res.test_type = data.testType;
    } else {
      throw TypeError(`invalid enum value ${data.testType} for testType`);
    }

    return res;
  }

  public constructor() {}
}
