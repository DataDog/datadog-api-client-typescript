/**
 * Datadog API V1 Collection
 * Collection of all Datadog Public endpoints.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@datadoghq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AlertGraphWidgetDefinition } from './AlertGraphWidgetDefinition';
import { AlertValueWidgetDefinition } from './AlertValueWidgetDefinition';
import { ChangeWidgetDefinition } from './ChangeWidgetDefinition';
import { CheckStatusWidgetDefinition } from './CheckStatusWidgetDefinition';
import { DistributionWidgetDefinition } from './DistributionWidgetDefinition';
import { EventStreamWidgetDefinition } from './EventStreamWidgetDefinition';
import { EventTimelineWidgetDefinition } from './EventTimelineWidgetDefinition';
import { FreeTextWidgetDefinition } from './FreeTextWidgetDefinition';
import { GeomapWidgetDefinition } from './GeomapWidgetDefinition';
import { GeomapWidgetDefinitionView } from './GeomapWidgetDefinitionView';
import { GroupWidgetDefinition } from './GroupWidgetDefinition';
import { HeatMapWidgetDefinition } from './HeatMapWidgetDefinition';
import { HostMapWidgetDefinition } from './HostMapWidgetDefinition';
import { HostMapWidgetDefinitionStyle } from './HostMapWidgetDefinitionStyle';
import { IFrameWidgetDefinition } from './IFrameWidgetDefinition';
import { ImageWidgetDefinition } from './ImageWidgetDefinition';
import { LogStreamWidgetDefinition } from './LogStreamWidgetDefinition';
import { MonitorSummaryWidgetDefinition } from './MonitorSummaryWidgetDefinition';
import { NoteWidgetDefinition } from './NoteWidgetDefinition';
import { QueryValueWidgetDefinition } from './QueryValueWidgetDefinition';
import { SLOWidgetDefinition } from './SLOWidgetDefinition';
import { ScatterPlotWidgetDefinition } from './ScatterPlotWidgetDefinition';
import { ServiceMapWidgetDefinition } from './ServiceMapWidgetDefinition';
import { ServiceSummaryWidgetDefinition } from './ServiceSummaryWidgetDefinition';
import { TableWidgetDefinition } from './TableWidgetDefinition';
import { TableWidgetHasSearchBar } from './TableWidgetHasSearchBar';
import { TimeseriesWidgetDefinition } from './TimeseriesWidgetDefinition';
import { ToplistWidgetDefinition } from './ToplistWidgetDefinition';
import { ToplistWidgetDefinitionType } from './ToplistWidgetDefinitionType';
import { ToplistWidgetRequest } from './ToplistWidgetRequest';
import { Widget } from './Widget';
import { WidgetAxis } from './WidgetAxis';
import { WidgetColorPreference } from './WidgetColorPreference';
import { WidgetCustomLink } from './WidgetCustomLink';
import { WidgetEvent } from './WidgetEvent';
import { WidgetEventSize } from './WidgetEventSize';
import { WidgetGrouping } from './WidgetGrouping';
import { WidgetImageSizing } from './WidgetImageSizing';
import { WidgetLayoutType } from './WidgetLayoutType';
import { WidgetMargin } from './WidgetMargin';
import { WidgetMarker } from './WidgetMarker';
import { WidgetMessageDisplay } from './WidgetMessageDisplay';
import { WidgetMonitorSummarySort } from './WidgetMonitorSummarySort';
import { WidgetNodeType } from './WidgetNodeType';
import { WidgetServiceSummaryDisplayFormat } from './WidgetServiceSummaryDisplayFormat';
import { WidgetSizeFormat } from './WidgetSizeFormat';
import { WidgetSummaryType } from './WidgetSummaryType';
import { WidgetTextAlign } from './WidgetTextAlign';
import { WidgetTickEdge } from './WidgetTickEdge';
import { WidgetTime } from './WidgetTime';
import { WidgetTimeWindows } from './WidgetTimeWindows';
import { WidgetViewMode } from './WidgetViewMode';
import { WidgetVizType } from './WidgetVizType';
import { HttpFile } from '../http/http';

/**
* [Definition of the widget](https://docs.datadoghq.com/dashboards/widgets/).
*/
export class WidgetDefinition {
    /**
    * ID of the alert to use in the widget.
    */
    'alertId': string;
    'time'?: WidgetTime;
    /**
    * Title of your widget.
    */
    'title'?: string;
    'titleAlign'?: WidgetTextAlign;
    /**
    * Size of the title.
    */
    'titleSize'?: string;
    'type': ToplistWidgetDefinitionType;
    'vizType': WidgetVizType;
    /**
    * Number of decimals to show. If not defined, the widget uses the raw value.
    */
    'precision'?: number;
    'textAlign'?: WidgetTextAlign;
    /**
    * Unit to display with the value.
    */
    'unit'?: string;
    /**
    * List of custom links.
    */
    'customLinks'?: Array<WidgetCustomLink>;
    /**
    * List of top list widget requests.
    */
    'requests': Array<ToplistWidgetRequest>;
    /**
    * Name of the check to use in the widget.
    */
    'check': string;
    /**
    * List of tag prefixes to group by.
    */
    'group'?: Array<string>;
    /**
    * List of tag prefixes to group by in the case of a cluster check.
    */
    'groupBy'?: Array<string>;
    'grouping': WidgetGrouping;
    /**
    * List of tags used to filter the groups reporting a cluster check.
    */
    'tags'?: Array<string>;
    /**
    * Available legend sizes for a widget. Should be one of \"0\", \"2\", \"4\", \"8\", \"16\", or \"auto\".
    */
    'legendSize'?: string;
    /**
    * (screenboard only) Show the legend for this widget.
    */
    'showLegend'?: boolean;
    'eventSize'?: WidgetEventSize;
    /**
    * Query to filter the monitors with.
    */
    'query': string;
    /**
    * The execution method for multi-value filters. Can be either and or or.
    */
    'tagsExecution'?: string;
    /**
    * Color of the text.
    */
    'color'?: string;
    /**
    * Size of the text.
    */
    'fontSize'?: string;
    /**
    * Text to display.
    */
    'text': string;
    'style': HostMapWidgetDefinitionStyle;
    'view': GeomapWidgetDefinitionView;
    'layoutType': WidgetLayoutType;
    /**
    * List of widget groups.
    */
    'widgets': Array<Widget>;
    /**
    * List of widget events.
    */
    'events'?: Array<WidgetEvent>;
    'yaxis'?: WidgetAxis;
    /**
    * Whether to show the hosts that donâ€™t fit in a group.
    */
    'noGroupHosts'?: boolean;
    /**
    * Whether to show the hosts with no metrics.
    */
    'noMetricHosts'?: boolean;
    'nodeType'?: WidgetNodeType;
    /**
    * Notes on the title.
    */
    'notes'?: string;
    /**
    * List of tags used to filter the map.
    */
    'scope'?: Array<string>;
    /**
    * URL of the image.
    */
    'url': string;
    'margin'?: WidgetMargin;
    'sizing'?: WidgetImageSizing;
    /**
    * Which columns to display on the widget.
    */
    'columns'?: Array<string>;
    /**
    * An array of index names to query in the stream. Use [] to query all indexes at once.
    */
    'indexes'?: Array<string>;
    /**
    * ID of the log set to use.
    */
    'logset'?: string;
    'messageDisplay'?: WidgetMessageDisplay;
    /**
    * Whether to show the date column or not
    */
    'showDateColumn'?: boolean;
    /**
    * Whether to show the message column or not
    */
    'showMessageColumn'?: boolean;
    'sort'?: WidgetMonitorSummarySort;
    'colorPreference'?: WidgetColorPreference;
    /**
    * The number of monitors to display.
    */
    'count'?: number;
    'displayFormat'?: WidgetServiceSummaryDisplayFormat;
    /**
    * Whether to show counts of 0 or not.
    */
    'hideZeroCounts'?: boolean;
    /**
    * Whether to show the time that has elapsed since the monitor/group triggered.
    */
    'showLastTriggered'?: boolean;
    /**
    * The start of the list. Typically 0.
    */
    'start'?: number;
    'summaryType'?: WidgetSummaryType;
    /**
    * Background color of the note.
    */
    'backgroundColor'?: string;
    /**
    * Content of the note.
    */
    'content': string;
    /**
    * Whether to show a tick or not.
    */
    'showTick'?: boolean;
    'tickEdge'?: WidgetTickEdge;
    /**
    * Where to position the tick on an edge.
    */
    'tickPos'?: string;
    /**
    * Whether to use auto-scaling or not.
    */
    'autoscale'?: boolean;
    /**
    * Display a unit of your choice on the widget.
    */
    'customUnit'?: string;
    /**
    * List of groups used for colors.
    */
    'colorByGroups'?: Array<string>;
    'xaxis'?: WidgetAxis;
    /**
    * Defined error budget.
    */
    'showErrorBudget'?: boolean;
    /**
    * ID of the SLO displayed.
    */
    'sloId'?: string;
    /**
    * Times being monitored.
    */
    'timeWindows'?: Array<WidgetTimeWindows>;
    'viewMode'?: WidgetViewMode;
    /**
    * Type of view displayed by the widget.
    */
    'viewType': string;
    /**
    * Your environment and primary tag (or * if enabled for your account).
    */
    'filters': Array<string>;
    /**
    * APM service.
    */
    'service': string;
    /**
    * APM environment.
    */
    'env': string;
    /**
    * Whether to show the latency breakdown or not.
    */
    'showBreakdown'?: boolean;
    /**
    * Whether to show the latency distribution or not.
    */
    'showDistribution'?: boolean;
    /**
    * Whether to show the error metrics or not.
    */
    'showErrors'?: boolean;
    /**
    * Whether to show the hits metrics or not.
    */
    'showHits'?: boolean;
    /**
    * Whether to show the latency metrics or not.
    */
    'showLatency'?: boolean;
    /**
    * Whether to show the resource list or not.
    */
    'showResourceList'?: boolean;
    'sizeFormat'?: WidgetSizeFormat;
    /**
    * APM span name.
    */
    'spanName': string;
    'hasSearchBar'?: TableWidgetHasSearchBar;
    /**
    * List of markers.
    */
    'markers'?: Array<WidgetMarker>;
    'rightYaxis'?: WidgetAxis;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "alertId",
            "baseName": "alert_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "time",
            "baseName": "time",
            "type": "WidgetTime",
            "format": ""
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        {
            "name": "titleAlign",
            "baseName": "title_align",
            "type": "WidgetTextAlign",
            "format": ""
        },
        {
            "name": "titleSize",
            "baseName": "title_size",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "ToplistWidgetDefinitionType",
            "format": ""
        },
        {
            "name": "vizType",
            "baseName": "viz_type",
            "type": "WidgetVizType",
            "format": ""
        },
        {
            "name": "precision",
            "baseName": "precision",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "textAlign",
            "baseName": "text_align",
            "type": "WidgetTextAlign",
            "format": ""
        },
        {
            "name": "unit",
            "baseName": "unit",
            "type": "string",
            "format": ""
        },
        {
            "name": "customLinks",
            "baseName": "custom_links",
            "type": "Array<WidgetCustomLink>",
            "format": ""
        },
        {
            "name": "requests",
            "baseName": "requests",
            "type": "Array<ToplistWidgetRequest>",
            "format": ""
        },
        {
            "name": "check",
            "baseName": "check",
            "type": "string",
            "format": ""
        },
        {
            "name": "group",
            "baseName": "group",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "groupBy",
            "baseName": "group_by",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "grouping",
            "baseName": "grouping",
            "type": "WidgetGrouping",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "legendSize",
            "baseName": "legend_size",
            "type": "string",
            "format": ""
        },
        {
            "name": "showLegend",
            "baseName": "show_legend",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "eventSize",
            "baseName": "event_size",
            "type": "WidgetEventSize",
            "format": ""
        },
        {
            "name": "query",
            "baseName": "query",
            "type": "string",
            "format": ""
        },
        {
            "name": "tagsExecution",
            "baseName": "tags_execution",
            "type": "string",
            "format": ""
        },
        {
            "name": "color",
            "baseName": "color",
            "type": "string",
            "format": ""
        },
        {
            "name": "fontSize",
            "baseName": "font_size",
            "type": "string",
            "format": ""
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string",
            "format": ""
        },
        {
            "name": "style",
            "baseName": "style",
            "type": "HostMapWidgetDefinitionStyle",
            "format": ""
        },
        {
            "name": "view",
            "baseName": "view",
            "type": "GeomapWidgetDefinitionView",
            "format": ""
        },
        {
            "name": "layoutType",
            "baseName": "layout_type",
            "type": "WidgetLayoutType",
            "format": ""
        },
        {
            "name": "widgets",
            "baseName": "widgets",
            "type": "Array<Widget>",
            "format": ""
        },
        {
            "name": "events",
            "baseName": "events",
            "type": "Array<WidgetEvent>",
            "format": ""
        },
        {
            "name": "yaxis",
            "baseName": "yaxis",
            "type": "WidgetAxis",
            "format": ""
        },
        {
            "name": "noGroupHosts",
            "baseName": "no_group_hosts",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "noMetricHosts",
            "baseName": "no_metric_hosts",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "nodeType",
            "baseName": "node_type",
            "type": "WidgetNodeType",
            "format": ""
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "string",
            "format": ""
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string",
            "format": ""
        },
        {
            "name": "margin",
            "baseName": "margin",
            "type": "WidgetMargin",
            "format": ""
        },
        {
            "name": "sizing",
            "baseName": "sizing",
            "type": "WidgetImageSizing",
            "format": ""
        },
        {
            "name": "columns",
            "baseName": "columns",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "indexes",
            "baseName": "indexes",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "logset",
            "baseName": "logset",
            "type": "string",
            "format": ""
        },
        {
            "name": "messageDisplay",
            "baseName": "message_display",
            "type": "WidgetMessageDisplay",
            "format": ""
        },
        {
            "name": "showDateColumn",
            "baseName": "show_date_column",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "showMessageColumn",
            "baseName": "show_message_column",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "sort",
            "baseName": "sort",
            "type": "WidgetMonitorSummarySort",
            "format": ""
        },
        {
            "name": "colorPreference",
            "baseName": "color_preference",
            "type": "WidgetColorPreference",
            "format": ""
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "displayFormat",
            "baseName": "display_format",
            "type": "WidgetServiceSummaryDisplayFormat",
            "format": ""
        },
        {
            "name": "hideZeroCounts",
            "baseName": "hide_zero_counts",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "showLastTriggered",
            "baseName": "show_last_triggered",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "start",
            "baseName": "start",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "summaryType",
            "baseName": "summary_type",
            "type": "WidgetSummaryType",
            "format": ""
        },
        {
            "name": "backgroundColor",
            "baseName": "background_color",
            "type": "string",
            "format": ""
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string",
            "format": ""
        },
        {
            "name": "showTick",
            "baseName": "show_tick",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "tickEdge",
            "baseName": "tick_edge",
            "type": "WidgetTickEdge",
            "format": ""
        },
        {
            "name": "tickPos",
            "baseName": "tick_pos",
            "type": "string",
            "format": ""
        },
        {
            "name": "autoscale",
            "baseName": "autoscale",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "customUnit",
            "baseName": "custom_unit",
            "type": "string",
            "format": ""
        },
        {
            "name": "colorByGroups",
            "baseName": "color_by_groups",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "xaxis",
            "baseName": "xaxis",
            "type": "WidgetAxis",
            "format": ""
        },
        {
            "name": "showErrorBudget",
            "baseName": "show_error_budget",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "sloId",
            "baseName": "slo_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "timeWindows",
            "baseName": "time_windows",
            "type": "Array<WidgetTimeWindows>",
            "format": ""
        },
        {
            "name": "viewMode",
            "baseName": "view_mode",
            "type": "WidgetViewMode",
            "format": ""
        },
        {
            "name": "viewType",
            "baseName": "view_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "filters",
            "baseName": "filters",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "service",
            "baseName": "service",
            "type": "string",
            "format": ""
        },
        {
            "name": "env",
            "baseName": "env",
            "type": "string",
            "format": ""
        },
        {
            "name": "showBreakdown",
            "baseName": "show_breakdown",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "showDistribution",
            "baseName": "show_distribution",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "showErrors",
            "baseName": "show_errors",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "showHits",
            "baseName": "show_hits",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "showLatency",
            "baseName": "show_latency",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "showResourceList",
            "baseName": "show_resource_list",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "sizeFormat",
            "baseName": "size_format",
            "type": "WidgetSizeFormat",
            "format": ""
        },
        {
            "name": "spanName",
            "baseName": "span_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "hasSearchBar",
            "baseName": "has_search_bar",
            "type": "TableWidgetHasSearchBar",
            "format": ""
        },
        {
            "name": "markers",
            "baseName": "markers",
            "type": "Array<WidgetMarker>",
            "format": ""
        },
        {
            "name": "rightYaxis",
            "baseName": "right_yaxis",
            "type": "WidgetAxis",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return WidgetDefinition.attributeTypeMap;
    }
    
    public constructor() {
    }
}

