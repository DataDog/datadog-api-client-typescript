/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* Metadata about the response.
*/

export class MonitorSearchResponseMetadata {
    /**
    * The page to start paginating from.
    */
    'page'?: number;
    /**
    * The number of pages.
    */
    'pageCount'?: number;
    /**
    * The number of monitors to return per page.
    */
    'perPage'?: number;
    /**
    * The total number of monitors.
    */
    'totalCount'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "page": {
            "baseName": "page",
            "type": "number",
            "format": "int64"
        },
        "pageCount": {
            "baseName": "page_count",
            "type": "number",
            "format": "int64"
        },
        "perPage": {
            "baseName": "per_page",
            "type": "number",
            "format": "int64"
        },
        "totalCount": {
            "baseName": "total_count",
            "type": "number",
            "format": "int64"
        }    };

    static getAttributeTypeMap() {
        return MonitorSearchResponseMetadata.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): MonitorSearchResponseMetadata {
      let res = new MonitorSearchResponseMetadata();

      res.page = ObjectSerializer.deserialize(data.page, "number", "int64")

      res.pageCount = ObjectSerializer.deserialize(data.page_count, "number", "int64")

      res.perPage = ObjectSerializer.deserialize(data.per_page, "number", "int64")

      res.totalCount = ObjectSerializer.deserialize(data.total_count, "number", "int64")


      return res;
    }

    static serialize(data: MonitorSearchResponseMetadata): {[key: string]: any} {
        let attributeTypes = MonitorSearchResponseMetadata.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.page = ObjectSerializer.serialize(data.page, "number", "int64")

        res.page_count = ObjectSerializer.serialize(data.pageCount, "number", "int64")

        res.per_page = ObjectSerializer.serialize(data.perPage, "number", "int64")

        res.total_count = ObjectSerializer.serialize(data.totalCount, "number", "int64")

        return res
    }
    
    public constructor() {
    }
}



