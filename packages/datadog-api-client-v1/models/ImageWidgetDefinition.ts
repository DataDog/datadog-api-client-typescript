/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ImageWidgetDefinitionType } from './ImageWidgetDefinitionType';
import { WidgetHorizontalAlign } from './WidgetHorizontalAlign';
import { WidgetImageSizing } from './WidgetImageSizing';
import { WidgetMargin } from './WidgetMargin';
import { WidgetVerticalAlign } from './WidgetVerticalAlign';
import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* The image widget allows you to embed an image on your dashboard. An image can be a PNG, JPG, or animated GIF. Only available on FREE layout dashboards.
*/

export class ImageWidgetDefinition {
    /**
    * Whether to display a background or not.
    */
    'hasBackground'?: boolean;
    /**
    * Whether to display a border or not.
    */
    'hasBorder'?: boolean;
    'horizontalAlign'?: WidgetHorizontalAlign;
    'margin'?: WidgetMargin;
    'sizing'?: WidgetImageSizing;
    'type': ImageWidgetDefinitionType;
    /**
    * URL of the image.
    */
    'url': string;
    /**
    * URL of the image in dark mode.
    */
    'urlDarkTheme'?: string;
    'verticalAlign'?: WidgetVerticalAlign;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "hasBackground": {
            "baseName": "has_background",
            "type": "boolean",
            "format": ""
        },
        "hasBorder": {
            "baseName": "has_border",
            "type": "boolean",
            "format": ""
        },
        "horizontalAlign": {
            "baseName": "horizontal_align",
            "type": "WidgetHorizontalAlign",
            "format": ""
        },
        "margin": {
            "baseName": "margin",
            "type": "WidgetMargin",
            "format": ""
        },
        "sizing": {
            "baseName": "sizing",
            "type": "WidgetImageSizing",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "ImageWidgetDefinitionType",
            "format": ""
        },
        "url": {
            "baseName": "url",
            "type": "string",
            "format": ""
        },
        "urlDarkTheme": {
            "baseName": "url_dark_theme",
            "type": "string",
            "format": ""
        },
        "verticalAlign": {
            "baseName": "vertical_align",
            "type": "WidgetVerticalAlign",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return ImageWidgetDefinition.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): ImageWidgetDefinition {
      let res = new ImageWidgetDefinition();

      res.hasBackground = ObjectSerializer.deserialize(data.has_background, "boolean", "")

      res.hasBorder = ObjectSerializer.deserialize(data.has_border, "boolean", "")

      if (['center', 'left', 'right', undefined].includes(data.horizontal_align)) {
          res.horizontalAlign = data.horizontal_align;
      } else {
          throw TypeError(`invalid enum value ${ data.horizontal_align } for horizontal_align`);
      }

      if (['sm', 'md', 'lg', 'small', 'large', undefined].includes(data.margin)) {
          res.margin = data.margin;
      } else {
          throw TypeError(`invalid enum value ${ data.margin } for margin`);
      }

      if (['fill', 'contain', 'cover', 'none', 'scale-down', 'zoom', 'fit', 'center', undefined].includes(data.sizing)) {
          res.sizing = data.sizing;
      } else {
          throw TypeError(`invalid enum value ${ data.sizing } for sizing`);
      }

      if (data.type === undefined) {
          throw new TypeError("missing required attribute 'type' on 'ImageWidgetDefinition' object");
      }
      if (['image', undefined].includes(data.type)) {
          res.type = data.type;
      } else {
          throw TypeError(`invalid enum value ${ data.type } for type`);
      }

      if (data.url === undefined) {
          throw new TypeError("missing required attribute 'url' on 'ImageWidgetDefinition' object");
      }
      res.url = ObjectSerializer.deserialize(data.url, "string", "")

      res.urlDarkTheme = ObjectSerializer.deserialize(data.url_dark_theme, "string", "")

      if (['center', 'top', 'bottom', undefined].includes(data.vertical_align)) {
          res.verticalAlign = data.vertical_align;
      } else {
          throw TypeError(`invalid enum value ${ data.vertical_align } for vertical_align`);
      }


      return res;
    }

    static serialize(data: ImageWidgetDefinition): {[key: string]: any} {
        let attributeTypes = ImageWidgetDefinition.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.has_background = ObjectSerializer.serialize(data.hasBackground, "boolean", "")

        res.has_border = ObjectSerializer.serialize(data.hasBorder, "boolean", "")

        if (['center', 'left', 'right', undefined].includes(data.horizontalAlign)) {
            res.horizontal_align = data.horizontalAlign;
        } else {
            throw TypeError(`invalid enum value ${ data.horizontalAlign } for horizontalAlign`);
        }

        if (['sm', 'md', 'lg', 'small', 'large', undefined].includes(data.margin)) {
            res.margin = data.margin;
        } else {
            throw TypeError(`invalid enum value ${ data.margin } for margin`);
        }

        if (['fill', 'contain', 'cover', 'none', 'scale-down', 'zoom', 'fit', 'center', undefined].includes(data.sizing)) {
            res.sizing = data.sizing;
        } else {
            throw TypeError(`invalid enum value ${ data.sizing } for sizing`);
        }

        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'ImageWidgetDefinition' object");
        }
        if (['image', undefined].includes(data.type)) {
            res.type = data.type;
        } else {
            throw TypeError(`invalid enum value ${ data.type } for type`);
        }

        if (data.url === undefined) {
            throw new TypeError("missing required attribute 'url' on 'ImageWidgetDefinition' object");
        }
        res.url = ObjectSerializer.serialize(data.url, "string", "")

        res.url_dark_theme = ObjectSerializer.serialize(data.urlDarkTheme, "string", "")

        if (['center', 'top', 'bottom', undefined].includes(data.verticalAlign)) {
            res.vertical_align = data.verticalAlign;
        } else {
            throw TypeError(`invalid enum value ${ data.verticalAlign } for verticalAlign`);
        }

        return res
    }
    
    public constructor() {
    }
}



