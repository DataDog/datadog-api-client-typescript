/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ScatterPlotWidgetDefinitionRequests } from "./ScatterPlotWidgetDefinitionRequests";
import { ScatterPlotWidgetDefinitionType } from "./ScatterPlotWidgetDefinitionType";
import { WidgetAxis } from "./WidgetAxis";
import { WidgetCustomLink } from "./WidgetCustomLink";
import { WidgetTextAlign } from "./WidgetTextAlign";
import { WidgetTime } from "./WidgetTime";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * The scatter plot visualization allows you to graph a chosen scope over two different metrics with their respective aggregation.
 */

export class ScatterPlotWidgetDefinition {
  /**
   * List of groups used for colors.
   */
  "colorByGroups"?: Array<string>;
  /**
   * List of custom links.
   */
  "customLinks"?: Array<WidgetCustomLink>;
  "requests": ScatterPlotWidgetDefinitionRequests;
  "time"?: WidgetTime;
  /**
   * Title of your widget.
   */
  "title"?: string;
  "titleAlign"?: WidgetTextAlign;
  /**
   * Size of the title.
   */
  "titleSize"?: string;
  "type": ScatterPlotWidgetDefinitionType;
  "xaxis"?: WidgetAxis;
  "yaxis"?: WidgetAxis;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    colorByGroups: {
      baseName: "color_by_groups",
      type: "Array<string>",
      format: "",
    },
    customLinks: {
      baseName: "custom_links",
      type: "Array<WidgetCustomLink>",
      format: "",
    },
    requests: {
      baseName: "requests",
      type: "ScatterPlotWidgetDefinitionRequests",
      format: "",
    },
    time: {
      baseName: "time",
      type: "WidgetTime",
      format: "",
    },
    title: {
      baseName: "title",
      type: "string",
      format: "",
    },
    titleAlign: {
      baseName: "title_align",
      type: "WidgetTextAlign",
      format: "",
    },
    titleSize: {
      baseName: "title_size",
      type: "string",
      format: "",
    },
    type: {
      baseName: "type",
      type: "ScatterPlotWidgetDefinitionType",
      format: "",
    },
    xaxis: {
      baseName: "xaxis",
      type: "WidgetAxis",
      format: "",
    },
    yaxis: {
      baseName: "yaxis",
      type: "WidgetAxis",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return ScatterPlotWidgetDefinition.attributeTypeMap;
  }

  static deserialize(data: {
    [key: string]: any;
  }): ScatterPlotWidgetDefinition {
    const res = new ScatterPlotWidgetDefinition();

    res.colorByGroups = ObjectSerializer.deserialize(
      data.color_by_groups,
      "Array<string>",
      ""
    );

    res.customLinks = ObjectSerializer.deserialize(
      data.custom_links,
      "Array<WidgetCustomLink>",
      ""
    );

    if (data.requests === undefined) {
      throw new TypeError(
        "missing required attribute 'requests' on 'ScatterPlotWidgetDefinition' object"
      );
    }
    res.requests = ObjectSerializer.deserialize(
      data.requests,
      "ScatterPlotWidgetDefinitionRequests",
      ""
    );

    res.time = ObjectSerializer.deserialize(data.time, "WidgetTime", "");

    res.title = ObjectSerializer.deserialize(data.title, "string", "");

    if (["center", "left", "right", undefined].includes(data.title_align)) {
      res.titleAlign = data.title_align;
    } else {
      const raw = new ScatterPlotWidgetDefinition();
      raw.unparsedObject = data;
      return raw;
    }

    res.titleSize = ObjectSerializer.deserialize(data.title_size, "string", "");

    if (data.type === undefined) {
      throw new TypeError(
        "missing required attribute 'type' on 'ScatterPlotWidgetDefinition' object"
      );
    }
    if (["scatterplot", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      const raw = new ScatterPlotWidgetDefinition();
      raw.unparsedObject = data;
      return raw;
    }

    res.xaxis = ObjectSerializer.deserialize(data.xaxis, "WidgetAxis", "");

    res.yaxis = ObjectSerializer.deserialize(data.yaxis, "WidgetAxis", "");

    return res;
  }

  static serialize(data: ScatterPlotWidgetDefinition): { [key: string]: any } {
    const attributeTypes = ScatterPlotWidgetDefinition.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.color_by_groups = ObjectSerializer.serialize(
      data.colorByGroups,
      "Array<string>",
      ""
    );

    res.custom_links = ObjectSerializer.serialize(
      data.customLinks,
      "Array<WidgetCustomLink>",
      ""
    );

    if (data.requests === undefined) {
      throw new TypeError(
        "missing required attribute 'requests' on 'ScatterPlotWidgetDefinition' object"
      );
    }
    res.requests = ObjectSerializer.serialize(
      data.requests,
      "ScatterPlotWidgetDefinitionRequests",
      ""
    );

    res.time = ObjectSerializer.serialize(data.time, "WidgetTime", "");

    res.title = ObjectSerializer.serialize(data.title, "string", "");

    if (["center", "left", "right", undefined].includes(data.titleAlign)) {
      res.title_align = data.titleAlign;
    } else {
      throw TypeError(`invalid enum value ${data.titleAlign} for titleAlign`);
    }

    res.title_size = ObjectSerializer.serialize(data.titleSize, "string", "");

    if (data.type === undefined) {
      throw new TypeError(
        "missing required attribute 'type' on 'ScatterPlotWidgetDefinition' object"
      );
    }
    if (["scatterplot", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    res.xaxis = ObjectSerializer.serialize(data.xaxis, "WidgetAxis", "");

    res.yaxis = ObjectSerializer.serialize(data.yaxis, "WidgetAxis", "");

    return res;
  }

  public constructor() {}
}
