/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { TableWidgetCellDisplayMode } from "./TableWidgetCellDisplayMode";
import { WidgetConditionalFormat } from "./WidgetConditionalFormat";
import { WidgetFormulaLimit } from "./WidgetFormulaLimit";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Formula to be used in a widget query.
 */

export class WidgetFormula {
  /**
   * Expression alias.
   */
  "alias"?: string;
  "cellDisplayMode"?: TableWidgetCellDisplayMode;
  /**
   * List of conditional formats.
   */
  "conditionalFormats"?: Array<WidgetConditionalFormat>;
  /**
   * String expression built from queries, formulas, and functions.
   */
  "formula": string;
  "limit"?: WidgetFormulaLimit;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    alias: {
      baseName: "alias",
      type: "string",
      format: "",
    },
    cellDisplayMode: {
      baseName: "cell_display_mode",
      type: "TableWidgetCellDisplayMode",
      format: "",
    },
    conditionalFormats: {
      baseName: "conditional_formats",
      type: "Array<WidgetConditionalFormat>",
      format: "",
    },
    formula: {
      baseName: "formula",
      type: "string",
      format: "",
    },
    limit: {
      baseName: "limit",
      type: "WidgetFormulaLimit",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return WidgetFormula.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): WidgetFormula {
    const res = new WidgetFormula();

    res.alias = ObjectSerializer.deserialize(data.alias, "string", "");

    if (["number", "bar", undefined].includes(data.cell_display_mode)) {
      res.cellDisplayMode = data.cell_display_mode;
    } else {
      const raw = new WidgetFormula();
      raw.unparsedObject = data;
      return raw;
    }

    res.conditionalFormats = ObjectSerializer.deserialize(
      data.conditional_formats,
      "Array<WidgetConditionalFormat>",
      ""
    );

    if (data.formula === undefined) {
      throw new TypeError(
        "missing required attribute 'formula' on 'WidgetFormula' object"
      );
    }
    res.formula = ObjectSerializer.deserialize(data.formula, "string", "");

    res.limit = ObjectSerializer.deserialize(
      data.limit,
      "WidgetFormulaLimit",
      ""
    );

    return res;
  }

  static serialize(data: WidgetFormula): { [key: string]: any } {
    const attributeTypes = WidgetFormula.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.alias = ObjectSerializer.serialize(data.alias, "string", "");

    if (["number", "bar", undefined].includes(data.cellDisplayMode)) {
      res.cell_display_mode = data.cellDisplayMode;
    } else {
      throw TypeError(
        `invalid enum value ${data.cellDisplayMode} for cellDisplayMode`
      );
    }

    res.conditional_formats = ObjectSerializer.serialize(
      data.conditionalFormats,
      "Array<WidgetConditionalFormat>",
      ""
    );

    if (data.formula === undefined) {
      throw new TypeError(
        "missing required attribute 'formula' on 'WidgetFormula' object"
      );
    }
    res.formula = ObjectSerializer.serialize(data.formula, "string", "");

    res.limit = ObjectSerializer.serialize(
      data.limit,
      "WidgetFormulaLimit",
      ""
    );

    return res;
  }

  public constructor() {}
}
