/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* Custom links help you connect a data value to a URL, like a Datadog page or your AWS console.
*/

export class WidgetCustomLink {
    /**
    * The label for the custom link URL. Keep the label short and descriptive. Use metrics and tags as variables.
    */
    'label': string;
    /**
    * The URL of the custom link. URL must include `http` or `https`. A relative URL must start with `/`.
    */
    'link': string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "label": {
            "baseName": "label",
            "type": "string",
            "format": ""
        },
        "link": {
            "baseName": "link",
            "type": "string",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return WidgetCustomLink.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): WidgetCustomLink {
      let res = new WidgetCustomLink();

      if (data.label === undefined) {
          throw new TypeError("missing required attribute 'label' on 'WidgetCustomLink' object");
      }
      res.label = ObjectSerializer.deserialize(data.label, "string", "")

      if (data.link === undefined) {
          throw new TypeError("missing required attribute 'link' on 'WidgetCustomLink' object");
      }
      res.link = ObjectSerializer.deserialize(data.link, "string", "")


      return res;
    }

    static serialize(data: WidgetCustomLink): {[key: string]: any} {
        let attributeTypes = WidgetCustomLink.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        if (data.label === undefined) {
            throw new TypeError("missing required attribute 'label' on 'WidgetCustomLink' object");
        }
        res.label = ObjectSerializer.serialize(data.label, "string", "")

        if (data.link === undefined) {
            throw new TypeError("missing required attribute 'link' on 'WidgetCustomLink' object");
        }
        res.link = ObjectSerializer.serialize(data.link, "string", "")

        return res
    }
    
    public constructor() {
    }
}



