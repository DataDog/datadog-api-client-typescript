/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ObjectSerializer } from "./ObjectSerializer";

/**
 * List of AWS accounts to delete.
 */

export class AWSAccountDeleteRequest {
  /**
   * Your AWS access key ID. Only required if your AWS account is a GovCloud or China account.
   */
  "accessKeyId"?: string;
  /**
   * Your AWS Account ID without dashes.
   */
  "accountId"?: string;
  /**
   * Your Datadog role delegation name.
   */
  "roleName"?: string;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    accessKeyId: {
      baseName: "access_key_id",
      type: "string",
      format: "",
    },
    accountId: {
      baseName: "account_id",
      type: "string",
      format: "",
    },
    roleName: {
      baseName: "role_name",
      type: "string",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return AWSAccountDeleteRequest.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): AWSAccountDeleteRequest {
    const res = new AWSAccountDeleteRequest();

    res.accessKeyId = ObjectSerializer.deserialize(
      data.access_key_id,
      "string",
      ""
    );

    res.accountId = ObjectSerializer.deserialize(data.account_id, "string", "");

    res.roleName = ObjectSerializer.deserialize(data.role_name, "string", "");

    return res;
  }

  static serialize(data: AWSAccountDeleteRequest): { [key: string]: any } {
    const attributeTypes = AWSAccountDeleteRequest.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.access_key_id = ObjectSerializer.serialize(
      data.accessKeyId,
      "string",
      ""
    );

    res.account_id = ObjectSerializer.serialize(data.accountId, "string", "");

    res.role_name = ObjectSerializer.serialize(data.roleName, "string", "");

    return res;
  }

  public constructor() {}
}
