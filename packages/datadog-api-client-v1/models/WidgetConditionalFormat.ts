/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { WidgetComparator } from "./WidgetComparator";
import { WidgetPalette } from "./WidgetPalette";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Define a conditional format for the widget.
 */

export class WidgetConditionalFormat {
  "comparator": WidgetComparator;
  /**
   * Color palette to apply to the background, same values available as palette.
   */
  "customBgColor"?: string;
  /**
   * Color palette to apply to the foreground, same values available as palette.
   */
  "customFgColor"?: string;
  /**
   * True hides values.
   */
  "hideValue"?: boolean;
  /**
   * Displays an image as the background.
   */
  "imageUrl"?: string;
  /**
   * Metric from the request to correlate this conditional format with.
   */
  "metric"?: string;
  "palette": WidgetPalette;
  /**
   * Defines the displayed timeframe.
   */
  "timeframe"?: string;
  /**
   * Value for the comparator.
   */
  "value": number;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    comparator: {
      baseName: "comparator",
      type: "WidgetComparator",
      format: "",
    },
    customBgColor: {
      baseName: "custom_bg_color",
      type: "string",
      format: "",
    },
    customFgColor: {
      baseName: "custom_fg_color",
      type: "string",
      format: "",
    },
    hideValue: {
      baseName: "hide_value",
      type: "boolean",
      format: "",
    },
    imageUrl: {
      baseName: "image_url",
      type: "string",
      format: "",
    },
    metric: {
      baseName: "metric",
      type: "string",
      format: "",
    },
    palette: {
      baseName: "palette",
      type: "WidgetPalette",
      format: "",
    },
    timeframe: {
      baseName: "timeframe",
      type: "string",
      format: "",
    },
    value: {
      baseName: "value",
      type: "number",
      format: "double",
    },
  };

  static getAttributeTypeMap() {
    return WidgetConditionalFormat.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): WidgetConditionalFormat {
    const res = new WidgetConditionalFormat();

    if (data.comparator === undefined) {
      throw new TypeError(
        "missing required attribute 'comparator' on 'WidgetConditionalFormat' object"
      );
    }
    if ([">", ">=", "<", "<=", undefined].includes(data.comparator)) {
      res.comparator = data.comparator;
    } else {
      const raw = new WidgetConditionalFormat();
      raw.unparsedObject = data;
      return raw;
    }

    res.customBgColor = ObjectSerializer.deserialize(
      data.custom_bg_color,
      "string",
      ""
    );

    res.customFgColor = ObjectSerializer.deserialize(
      data.custom_fg_color,
      "string",
      ""
    );

    res.hideValue = ObjectSerializer.deserialize(
      data.hide_value,
      "boolean",
      ""
    );

    res.imageUrl = ObjectSerializer.deserialize(data.image_url, "string", "");

    res.metric = ObjectSerializer.deserialize(data.metric, "string", "");

    if (data.palette === undefined) {
      throw new TypeError(
        "missing required attribute 'palette' on 'WidgetConditionalFormat' object"
      );
    }
    if (
      [
        "blue",
        "custom_bg",
        "custom_image",
        "custom_text",
        "gray_on_white",
        "grey",
        "green",
        "orange",
        "red",
        "red_on_white",
        "white_on_gray",
        "white_on_green",
        "green_on_white",
        "white_on_red",
        "white_on_yellow",
        "yellow_on_white",
        "black_on_light_yellow",
        "black_on_light_green",
        "black_on_light_red",
        undefined,
      ].includes(data.palette)
    ) {
      res.palette = data.palette;
    } else {
      const raw = new WidgetConditionalFormat();
      raw.unparsedObject = data;
      return raw;
    }

    res.timeframe = ObjectSerializer.deserialize(data.timeframe, "string", "");

    if (data.value === undefined) {
      throw new TypeError(
        "missing required attribute 'value' on 'WidgetConditionalFormat' object"
      );
    }
    res.value = ObjectSerializer.deserialize(data.value, "number", "double");

    return res;
  }

  static serialize(data: WidgetConditionalFormat): { [key: string]: any } {
    const attributeTypes = WidgetConditionalFormat.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    if (data.comparator === undefined) {
      throw new TypeError(
        "missing required attribute 'comparator' on 'WidgetConditionalFormat' object"
      );
    }
    if ([">", ">=", "<", "<=", undefined].includes(data.comparator)) {
      res.comparator = data.comparator;
    } else {
      throw TypeError(`invalid enum value ${data.comparator} for comparator`);
    }

    res.custom_bg_color = ObjectSerializer.serialize(
      data.customBgColor,
      "string",
      ""
    );

    res.custom_fg_color = ObjectSerializer.serialize(
      data.customFgColor,
      "string",
      ""
    );

    res.hide_value = ObjectSerializer.serialize(data.hideValue, "boolean", "");

    res.image_url = ObjectSerializer.serialize(data.imageUrl, "string", "");

    res.metric = ObjectSerializer.serialize(data.metric, "string", "");

    if (data.palette === undefined) {
      throw new TypeError(
        "missing required attribute 'palette' on 'WidgetConditionalFormat' object"
      );
    }
    if (
      [
        "blue",
        "custom_bg",
        "custom_image",
        "custom_text",
        "gray_on_white",
        "grey",
        "green",
        "orange",
        "red",
        "red_on_white",
        "white_on_gray",
        "white_on_green",
        "green_on_white",
        "white_on_red",
        "white_on_yellow",
        "yellow_on_white",
        "black_on_light_yellow",
        "black_on_light_green",
        "black_on_light_red",
        undefined,
      ].includes(data.palette)
    ) {
      res.palette = data.palette;
    } else {
      throw TypeError(`invalid enum value ${data.palette} for palette`);
    }

    res.timeframe = ObjectSerializer.serialize(data.timeframe, "string", "");

    if (data.value === undefined) {
      throw new TypeError(
        "missing required attribute 'value' on 'WidgetConditionalFormat' object"
      );
    }
    res.value = ObjectSerializer.serialize(data.value, "number", "double");

    return res;
  }

  public constructor() {}
}
