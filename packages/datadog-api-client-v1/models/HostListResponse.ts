/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Host } from "./Host";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Response with Host information from Datadog.
 */

export class HostListResponse {
  /**
   * Array of hosts.
   */
  "hostList"?: Array<Host>;
  /**
   * Number of host matching the query.
   */
  "totalMatching"?: number;
  /**
   * Number of host returned.
   */
  "totalReturned"?: number;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    hostList: {
      baseName: "host_list",
      type: "Array<Host>",
      format: "",
    },
    totalMatching: {
      baseName: "total_matching",
      type: "number",
      format: "int64",
    },
    totalReturned: {
      baseName: "total_returned",
      type: "number",
      format: "int64",
    },
  };

  static getAttributeTypeMap() {
    return HostListResponse.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): HostListResponse {
    const res = new HostListResponse();

    res.hostList = ObjectSerializer.deserialize(
      data.host_list,
      "Array<Host>",
      ""
    );

    res.totalMatching = ObjectSerializer.deserialize(
      data.total_matching,
      "number",
      "int64"
    );

    res.totalReturned = ObjectSerializer.deserialize(
      data.total_returned,
      "number",
      "int64"
    );

    return res;
  }

  static serialize(data: HostListResponse): { [key: string]: any } {
    const attributeTypes = HostListResponse.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.host_list = ObjectSerializer.serialize(
      data.hostList,
      "Array<Host>",
      ""
    );

    res.total_matching = ObjectSerializer.serialize(
      data.totalMatching,
      "number",
      "int64"
    );

    res.total_returned = ObjectSerializer.serialize(
      data.totalReturned,
      "number",
      "int64"
    );

    return res;
  }

  public constructor() {}
}
