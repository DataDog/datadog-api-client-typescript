/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Creator } from "./Creator";
import { MonitorOverallStates } from "./MonitorOverallStates";
import { MonitorSearchResultNotification } from "./MonitorSearchResultNotification";
import { MonitorType } from "./MonitorType";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Holds search results.
 */

export class MonitorSearchResult {
  /**
   * Classification of the monitor.
   */
  "classification"?: string;
  "creator"?: Creator;
  /**
   * ID of the monitor.
   */
  "id"?: number;
  /**
   * Latest timestamp the monitor triggered.
   */
  "lastTriggeredTs"?: number;
  /**
   * Metrics used by the monitor.
   */
  "metrics"?: Array<string>;
  /**
   * The monitor name.
   */
  "name"?: string;
  /**
   * The notification triggered by the monitor.
   */
  "notifications"?: Array<MonitorSearchResultNotification>;
  /**
   * The ID of the organization.
   */
  "orgId"?: number;
  /**
   * The scope(s) to which the downtime applies, e.g. `host:app2`. Provide multiple scopes as a comma-separated list, e.g. `env:dev,env:prod`. The resulting downtime applies to sources that matches ALL provided scopes (i.e. `env:dev AND env:prod`), NOT any of them.
   */
  "scopes"?: Array<string>;
  "status"?: MonitorOverallStates;
  /**
   * Tags associated with the monitor.
   */
  "tags"?: Array<string>;
  "type"?: MonitorType;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    classification: {
      baseName: "classification",
      type: "string",
      format: "",
    },
    creator: {
      baseName: "creator",
      type: "Creator",
      format: "",
    },
    id: {
      baseName: "id",
      type: "number",
      format: "int64",
    },
    lastTriggeredTs: {
      baseName: "last_triggered_ts",
      type: "number",
      format: "int64",
    },
    metrics: {
      baseName: "metrics",
      type: "Array<string>",
      format: "",
    },
    name: {
      baseName: "name",
      type: "string",
      format: "",
    },
    notifications: {
      baseName: "notifications",
      type: "Array<MonitorSearchResultNotification>",
      format: "",
    },
    orgId: {
      baseName: "org_id",
      type: "number",
      format: "int64",
    },
    scopes: {
      baseName: "scopes",
      type: "Array<string>",
      format: "",
    },
    status: {
      baseName: "status",
      type: "MonitorOverallStates",
      format: "",
    },
    tags: {
      baseName: "tags",
      type: "Array<string>",
      format: "",
    },
    type: {
      baseName: "type",
      type: "MonitorType",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return MonitorSearchResult.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): MonitorSearchResult {
    const res = new MonitorSearchResult();

    res.classification = ObjectSerializer.deserialize(
      data.classification,
      "string",
      ""
    );

    res.creator = ObjectSerializer.deserialize(data.creator, "Creator", "");

    res.id = ObjectSerializer.deserialize(data.id, "number", "int64");

    res.lastTriggeredTs = ObjectSerializer.deserialize(
      data.last_triggered_ts,
      "number",
      "int64"
    );

    res.metrics = ObjectSerializer.deserialize(
      data.metrics,
      "Array<string>",
      ""
    );

    res.name = ObjectSerializer.deserialize(data.name, "string", "");

    res.notifications = ObjectSerializer.deserialize(
      data.notifications,
      "Array<MonitorSearchResultNotification>",
      ""
    );

    res.orgId = ObjectSerializer.deserialize(data.org_id, "number", "int64");

    res.scopes = ObjectSerializer.deserialize(data.scopes, "Array<string>", "");

    if (
      [
        "Alert",
        "Ignored",
        "No Data",
        "OK",
        "Skipped",
        "Unknown",
        "Warn",
        undefined,
      ].includes(data.status)
    ) {
      res.status = data.status;
    } else {
      throw TypeError(`invalid enum value ${data.status} for status`);
    }

    res.tags = ObjectSerializer.deserialize(data.tags, "Array<string>", "");

    if (
      [
        "composite",
        "event alert",
        "log alert",
        "metric alert",
        "process alert",
        "query alert",
        "rum alert",
        "service check",
        "synthetics alert",
        "trace-analytics alert",
        "slo alert",
        "event-v2 alert",
        undefined,
      ].includes(data.type)
    ) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  static serialize(data: MonitorSearchResult): { [key: string]: any } {
    const attributeTypes = MonitorSearchResult.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.classification = ObjectSerializer.serialize(
      data.classification,
      "string",
      ""
    );

    res.creator = ObjectSerializer.serialize(data.creator, "Creator", "");

    res.id = ObjectSerializer.serialize(data.id, "number", "int64");

    res.last_triggered_ts = ObjectSerializer.serialize(
      data.lastTriggeredTs,
      "number",
      "int64"
    );

    res.metrics = ObjectSerializer.serialize(data.metrics, "Array<string>", "");

    res.name = ObjectSerializer.serialize(data.name, "string", "");

    res.notifications = ObjectSerializer.serialize(
      data.notifications,
      "Array<MonitorSearchResultNotification>",
      ""
    );

    res.org_id = ObjectSerializer.serialize(data.orgId, "number", "int64");

    res.scopes = ObjectSerializer.serialize(data.scopes, "Array<string>", "");

    if (
      [
        "Alert",
        "Ignored",
        "No Data",
        "OK",
        "Skipped",
        "Unknown",
        "Warn",
        undefined,
      ].includes(data.status)
    ) {
      res.status = data.status;
    } else {
      throw TypeError(`invalid enum value ${data.status} for status`);
    }

    res.tags = ObjectSerializer.serialize(data.tags, "Array<string>", "");

    if (
      [
        "composite",
        "event alert",
        "log alert",
        "metric alert",
        "process alert",
        "query alert",
        "rum alert",
        "service check",
        "synthetics alert",
        "trace-analytics alert",
        "slo alert",
        "event-v2 alert",
        undefined,
      ].includes(data.type)
    ) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  public constructor() {}
}
