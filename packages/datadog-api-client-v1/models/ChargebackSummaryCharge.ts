/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Cost breakdown for a product and charge type for a sub-org.
 */

export class ChargebackSummaryCharge {
  /**
   * The subscription type for the usage (`committed`, `on_demand`, or `committed_remaining`).
   */
  "chargeType"?: string;
  /**
   * Cost of usage for product attributable to sub-org.
   */
  "cost"?: number;
  /**
   * Price in dollars per unit of usage.
   */
  "pricePerUnit"?: number;
  /**
   * Name of product.
   */
  "productName"?: string;
  /**
   * Number of billed units attributable to sub-org.
   */
  "units"?: number;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    chargeType: {
      baseName: "charge_type",
      type: "string",
      format: "",
    },
    cost: {
      baseName: "cost",
      type: "number",
      format: "double",
    },
    pricePerUnit: {
      baseName: "price_per_unit",
      type: "number",
      format: "double",
    },
    productName: {
      baseName: "product_name",
      type: "string",
      format: "",
    },
    units: {
      baseName: "units",
      type: "number",
      format: "double",
    },
  };

  static getAttributeTypeMap() {
    return ChargebackSummaryCharge.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): ChargebackSummaryCharge {
    const res = new ChargebackSummaryCharge();

    res.chargeType = ObjectSerializer.deserialize(
      data.charge_type,
      "string",
      ""
    );

    res.cost = ObjectSerializer.deserialize(data.cost, "number", "double");

    res.pricePerUnit = ObjectSerializer.deserialize(
      data.price_per_unit,
      "number",
      "double"
    );

    res.productName = ObjectSerializer.deserialize(
      data.product_name,
      "string",
      ""
    );

    res.units = ObjectSerializer.deserialize(data.units, "number", "double");

    return res;
  }

  static serialize(data: ChargebackSummaryCharge): { [key: string]: any } {
    const attributeTypes = ChargebackSummaryCharge.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.charge_type = ObjectSerializer.serialize(data.chargeType, "string", "");

    res.cost = ObjectSerializer.serialize(data.cost, "number", "double");

    res.price_per_unit = ObjectSerializer.serialize(
      data.pricePerUnit,
      "number",
      "double"
    );

    res.product_name = ObjectSerializer.serialize(
      data.productName,
      "string",
      ""
    );

    res.units = ObjectSerializer.serialize(data.units, "number", "double");

    return res;
  }

  public constructor() {}
}
