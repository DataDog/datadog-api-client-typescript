/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SyntheticsAPIStepSubtype } from './SyntheticsAPIStepSubtype';
import { SyntheticsAssertion } from './SyntheticsAssertion';
import { SyntheticsParsingOptions } from './SyntheticsParsingOptions';
import { SyntheticsTestRequest } from './SyntheticsTestRequest';
import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* The steps used in a Synthetics multistep API test.
*/

export class SyntheticsAPIStep {
    /**
    * Determines whether or not to continue with test if this step fails.
    */
    'allowFailure'?: boolean;
    /**
    * Array of assertions used for the test.
    */
    'assertions'?: Array<SyntheticsAssertion>;
    /**
    * Array of values to parse and save as variables from the response.
    */
    'extractedValues'?: Array<SyntheticsParsingOptions>;
    /**
    * Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allowFailure` is `true`.
    */
    'isCritical'?: boolean;
    /**
    * The name of the step.
    */
    'name'?: string;
    'request'?: SyntheticsTestRequest;
    'subtype'?: SyntheticsAPIStepSubtype;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "allowFailure": {
            "baseName": "allowFailure",
            "type": "boolean",
            "format": ""
        },
        "assertions": {
            "baseName": "assertions",
            "type": "Array<SyntheticsAssertion>",
            "format": ""
        },
        "extractedValues": {
            "baseName": "extractedValues",
            "type": "Array<SyntheticsParsingOptions>",
            "format": ""
        },
        "isCritical": {
            "baseName": "isCritical",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "request": {
            "baseName": "request",
            "type": "SyntheticsTestRequest",
            "format": ""
        },
        "subtype": {
            "baseName": "subtype",
            "type": "SyntheticsAPIStepSubtype",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return SyntheticsAPIStep.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): SyntheticsAPIStep {
      let res = new SyntheticsAPIStep();

      res.allowFailure = ObjectSerializer.deserialize(data.allowFailure, "boolean", "")

      res.assertions = ObjectSerializer.deserialize(data.assertions, "Array<SyntheticsAssertion>", "")

      res.extractedValues = ObjectSerializer.deserialize(data.extractedValues, "Array<SyntheticsParsingOptions>", "")

      res.isCritical = ObjectSerializer.deserialize(data.isCritical, "boolean", "")

      res.name = ObjectSerializer.deserialize(data.name, "string", "")

      res.request = ObjectSerializer.deserialize(data.request, "SyntheticsTestRequest", "")

      if (['http', undefined].includes(data.subtype)) {
          res.subtype = data.subtype;
      } else {
          throw TypeError(`invalid enum value ${ data.subtype } for subtype`);
      }


      return res;
    }

    static serialize(data: SyntheticsAPIStep): {[key: string]: any} {
        let attributeTypes = SyntheticsAPIStep.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.allowFailure = ObjectSerializer.serialize(data.allowFailure, "boolean", "")

        res.assertions = ObjectSerializer.serialize(data.assertions, "Array<SyntheticsAssertion>", "")

        res.extractedValues = ObjectSerializer.serialize(data.extractedValues, "Array<SyntheticsParsingOptions>", "")

        res.isCritical = ObjectSerializer.serialize(data.isCritical, "boolean", "")

        res.name = ObjectSerializer.serialize(data.name, "string", "")

        res.request = ObjectSerializer.serialize(data.request, "SyntheticsTestRequest", "")

        if (['http', undefined].includes(data.subtype)) {
            res.subtype = data.subtype;
        } else {
            throw TypeError(`invalid enum value ${ data.subtype } for subtype`);
        }

        return res
    }
    
    public constructor() {
    }
}



