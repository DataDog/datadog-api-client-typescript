/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { LogsFilter } from './LogsFilter';
import { LogsProcessor } from './LogsProcessor';
import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* Pipelines and processors operate on incoming logs, parsing and transforming them into structured attributes for easier querying.  **Note**: These endpoints are only available for admin users. Make sure to use an application key created by an admin.
*/

export class LogsPipeline {
    'filter'?: LogsFilter;
    /**
    * ID of the pipeline.
    */
    'id'?: string;
    /**
    * Whether or not the pipeline is enabled.
    */
    'isEnabled'?: boolean;
    /**
    * Whether or not the pipeline can be edited.
    */
    'isReadOnly'?: boolean;
    /**
    * Name of the pipeline.
    */
    'name': string;
    /**
    * Ordered list of processors in this pipeline.
    */
    'processors'?: Array<LogsProcessor>;
    /**
    * Type of pipeline.
    */
    'type'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "filter": {
            "baseName": "filter",
            "type": "LogsFilter",
            "format": ""
        },
        "id": {
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        "isEnabled": {
            "baseName": "is_enabled",
            "type": "boolean",
            "format": ""
        },
        "isReadOnly": {
            "baseName": "is_read_only",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "processors": {
            "baseName": "processors",
            "type": "Array<LogsProcessor>",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "string",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return LogsPipeline.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): LogsPipeline {
      let res = new LogsPipeline();

      res.filter = ObjectSerializer.deserialize(data.filter, "LogsFilter", "")

      res.id = ObjectSerializer.deserialize(data.id, "string", "")

      res.isEnabled = ObjectSerializer.deserialize(data.is_enabled, "boolean", "")

      res.isReadOnly = ObjectSerializer.deserialize(data.is_read_only, "boolean", "")

      if (data.name === undefined) {
          throw new TypeError("missing required attribute 'name' on 'LogsPipeline' object");
      }
      res.name = ObjectSerializer.deserialize(data.name, "string", "")

      res.processors = ObjectSerializer.deserialize(data.processors, "Array<LogsProcessor>", "")

      res.type = ObjectSerializer.deserialize(data.type, "string", "")


      return res;
    }

    static serialize(data: LogsPipeline): {[key: string]: any} {
        let attributeTypes = LogsPipeline.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.filter = ObjectSerializer.serialize(data.filter, "LogsFilter", "")

        res.id = ObjectSerializer.serialize(data.id, "string", "")

        res.is_enabled = ObjectSerializer.serialize(data.isEnabled, "boolean", "")

        res.is_read_only = ObjectSerializer.serialize(data.isReadOnly, "boolean", "")

        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'LogsPipeline' object");
        }
        res.name = ObjectSerializer.serialize(data.name, "string", "")

        res.processors = ObjectSerializer.serialize(data.processors, "Array<LogsProcessor>", "")

        res.type = ObjectSerializer.serialize(data.type, "string", "")

        return res
    }
    
    public constructor() {
    }
}



