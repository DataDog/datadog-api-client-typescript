/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SyntheticsStep } from "./SyntheticsStep";
import { SyntheticsTestConfig } from "./SyntheticsTestConfig";
import { SyntheticsTestDetailsSubType } from "./SyntheticsTestDetailsSubType";
import { SyntheticsTestDetailsType } from "./SyntheticsTestDetailsType";
import { SyntheticsTestOptions } from "./SyntheticsTestOptions";
import { SyntheticsTestPauseStatus } from "./SyntheticsTestPauseStatus";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Object containing details about your Synthetic test.
 */

export class SyntheticsTestDetails {
  "config"?: SyntheticsTestConfig;
  /**
   * Array of locations used to run the test.
   */
  "locations"?: Array<string>;
  /**
   * Notification message associated with the test.
   */
  "message"?: string;
  /**
   * The associated monitor ID.
   */
  "monitorId"?: number;
  /**
   * Name of the test.
   */
  "name"?: string;
  "options"?: SyntheticsTestOptions;
  /**
   * The test public ID.
   */
  "publicId"?: string;
  "status"?: SyntheticsTestPauseStatus;
  /**
   * For browser test, the steps of the test.
   */
  "steps"?: Array<SyntheticsStep>;
  "subtype"?: SyntheticsTestDetailsSubType;
  /**
   * Array of tags attached to the test.
   */
  "tags"?: Array<string>;
  "type"?: SyntheticsTestDetailsType;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    config: {
      baseName: "config",
      type: "SyntheticsTestConfig",
      format: "",
    },
    locations: {
      baseName: "locations",
      type: "Array<string>",
      format: "",
    },
    message: {
      baseName: "message",
      type: "string",
      format: "",
    },
    monitorId: {
      baseName: "monitor_id",
      type: "number",
      format: "int64",
    },
    name: {
      baseName: "name",
      type: "string",
      format: "",
    },
    options: {
      baseName: "options",
      type: "SyntheticsTestOptions",
      format: "",
    },
    publicId: {
      baseName: "public_id",
      type: "string",
      format: "",
    },
    status: {
      baseName: "status",
      type: "SyntheticsTestPauseStatus",
      format: "",
    },
    steps: {
      baseName: "steps",
      type: "Array<SyntheticsStep>",
      format: "",
    },
    subtype: {
      baseName: "subtype",
      type: "SyntheticsTestDetailsSubType",
      format: "",
    },
    tags: {
      baseName: "tags",
      type: "Array<string>",
      format: "",
    },
    type: {
      baseName: "type",
      type: "SyntheticsTestDetailsType",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return SyntheticsTestDetails.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): SyntheticsTestDetails {
    const res = new SyntheticsTestDetails();

    res.config = ObjectSerializer.deserialize(
      data.config,
      "SyntheticsTestConfig",
      ""
    );

    res.locations = ObjectSerializer.deserialize(
      data.locations,
      "Array<string>",
      ""
    );

    res.message = ObjectSerializer.deserialize(data.message, "string", "");

    res.monitorId = ObjectSerializer.deserialize(
      data.monitor_id,
      "number",
      "int64"
    );

    res.name = ObjectSerializer.deserialize(data.name, "string", "");

    res.options = ObjectSerializer.deserialize(
      data.options,
      "SyntheticsTestOptions",
      ""
    );

    res.publicId = ObjectSerializer.deserialize(data.public_id, "string", "");

    if (["live", "paused", undefined].includes(data.status)) {
      res.status = data.status;
    } else {
      const raw = new SyntheticsTestDetails();
      raw.unparsedObject = data;
      return raw;
    }

    res.steps = ObjectSerializer.deserialize(
      data.steps,
      "Array<SyntheticsStep>",
      ""
    );

    if (
      ["http", "ssl", "tcp", "dns", "multi", "icmp", undefined].includes(
        data.subtype
      )
    ) {
      res.subtype = data.subtype;
    } else {
      const raw = new SyntheticsTestDetails();
      raw.unparsedObject = data;
      return raw;
    }

    res.tags = ObjectSerializer.deserialize(data.tags, "Array<string>", "");

    if (["api", "browser", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      const raw = new SyntheticsTestDetails();
      raw.unparsedObject = data;
      return raw;
    }

    return res;
  }

  static serialize(data: SyntheticsTestDetails): { [key: string]: any } {
    const attributeTypes = SyntheticsTestDetails.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.config = ObjectSerializer.serialize(
      data.config,
      "SyntheticsTestConfig",
      ""
    );

    res.locations = ObjectSerializer.serialize(
      data.locations,
      "Array<string>",
      ""
    );

    res.message = ObjectSerializer.serialize(data.message, "string", "");

    res.monitor_id = ObjectSerializer.serialize(
      data.monitorId,
      "number",
      "int64"
    );

    res.name = ObjectSerializer.serialize(data.name, "string", "");

    res.options = ObjectSerializer.serialize(
      data.options,
      "SyntheticsTestOptions",
      ""
    );

    res.public_id = ObjectSerializer.serialize(data.publicId, "string", "");

    if (["live", "paused", undefined].includes(data.status)) {
      res.status = data.status;
    } else {
      throw TypeError(`invalid enum value ${data.status} for status`);
    }

    res.steps = ObjectSerializer.serialize(
      data.steps,
      "Array<SyntheticsStep>",
      ""
    );

    if (
      ["http", "ssl", "tcp", "dns", "multi", "icmp", undefined].includes(
        data.subtype
      )
    ) {
      res.subtype = data.subtype;
    } else {
      throw TypeError(`invalid enum value ${data.subtype} for subtype`);
    }

    res.tags = ObjectSerializer.serialize(data.tags, "Array<string>", "");

    if (["api", "browser", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  public constructor() {}
}
