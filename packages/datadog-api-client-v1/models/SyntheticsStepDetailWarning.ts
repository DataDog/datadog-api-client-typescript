/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SyntheticsWarningType } from "./SyntheticsWarningType";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Object collecting warnings for a given step.
 */

export class SyntheticsStepDetailWarning {
  /**
   * Message for the warning.
   */
  "message": string;
  "type": SyntheticsWarningType;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    message: {
      baseName: "message",
      type: "string",
      format: "",
    },
    type: {
      baseName: "type",
      type: "SyntheticsWarningType",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return SyntheticsStepDetailWarning.attributeTypeMap;
  }

  static deserialize(data: {
    [key: string]: any;
  }): SyntheticsStepDetailWarning {
    const res = new SyntheticsStepDetailWarning();

    if (data.message === undefined) {
      throw new TypeError(
        "missing required attribute 'message' on 'SyntheticsStepDetailWarning' object"
      );
    }
    res.message = ObjectSerializer.deserialize(data.message, "string", "");

    if (data.type === undefined) {
      throw new TypeError(
        "missing required attribute 'type' on 'SyntheticsStepDetailWarning' object"
      );
    }
    if (["user_locator", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  static serialize(data: SyntheticsStepDetailWarning): { [key: string]: any } {
    const attributeTypes = SyntheticsStepDetailWarning.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data.message === undefined) {
      throw new TypeError(
        "missing required attribute 'message' on 'SyntheticsStepDetailWarning' object"
      );
    }
    res.message = ObjectSerializer.serialize(data.message, "string", "");

    if (data.type === undefined) {
      throw new TypeError(
        "missing required attribute 'type' on 'SyntheticsStepDetailWarning' object"
      );
    }
    if (["user_locator", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  public constructor() {}
}
