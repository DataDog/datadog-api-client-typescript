/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ToplistWidgetDefinitionType } from './ToplistWidgetDefinitionType';
import { ToplistWidgetRequest } from './ToplistWidgetRequest';
import { WidgetCustomLink } from './WidgetCustomLink';
import { WidgetTextAlign } from './WidgetTextAlign';
import { WidgetTime } from './WidgetTime';
import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* The top list visualization enables you to display a list of Tag value like hostname or service with the most or least of any metric value, such as highest consumers of CPU, hosts with the least disk space, etc.
*/

export class ToplistWidgetDefinition {
    /**
    * List of custom links.
    */
    'customLinks'?: Array<WidgetCustomLink>;
    /**
    * List of top list widget requests.
    */
    'requests': Array<ToplistWidgetRequest>;
    'time'?: WidgetTime;
    /**
    * Title of your widget.
    */
    'title'?: string;
    'titleAlign'?: WidgetTextAlign;
    /**
    * Size of the title.
    */
    'titleSize'?: string;
    'type': ToplistWidgetDefinitionType;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "customLinks": {
            "baseName": "custom_links",
            "type": "Array<WidgetCustomLink>",
            "format": ""
        },
        "requests": {
            "baseName": "requests",
            "type": "Array<ToplistWidgetRequest>",
            "format": ""
        },
        "time": {
            "baseName": "time",
            "type": "WidgetTime",
            "format": ""
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        "titleAlign": {
            "baseName": "title_align",
            "type": "WidgetTextAlign",
            "format": ""
        },
        "titleSize": {
            "baseName": "title_size",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "ToplistWidgetDefinitionType",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return ToplistWidgetDefinition.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): ToplistWidgetDefinition {
      let res = new ToplistWidgetDefinition();

      res.customLinks = ObjectSerializer.deserialize(data.custom_links, "Array<WidgetCustomLink>", "")

      if (data.requests === undefined) {
          throw new TypeError("missing required attribute 'requests' on 'ToplistWidgetDefinition' object");
      }
      res.requests = ObjectSerializer.deserialize(data.requests, "Array<ToplistWidgetRequest>", "")

      res.time = ObjectSerializer.deserialize(data.time, "WidgetTime", "")

      res.title = ObjectSerializer.deserialize(data.title, "string", "")

      if (['center', 'left', 'right', undefined].includes(data.title_align)) {
          res.titleAlign = data.title_align;
      } else {
          throw TypeError(`invalid enum value ${ data.title_align } for title_align`);
      }

      res.titleSize = ObjectSerializer.deserialize(data.title_size, "string", "")

      if (data.type === undefined) {
          throw new TypeError("missing required attribute 'type' on 'ToplistWidgetDefinition' object");
      }
      if (['toplist', undefined].includes(data.type)) {
          res.type = data.type;
      } else {
          throw TypeError(`invalid enum value ${ data.type } for type`);
      }


      return res;
    }

    static serialize(data: ToplistWidgetDefinition): {[key: string]: any} {
        let attributeTypes = ToplistWidgetDefinition.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.custom_links = ObjectSerializer.serialize(data.customLinks, "Array<WidgetCustomLink>", "")

        if (data.requests === undefined) {
            throw new TypeError("missing required attribute 'requests' on 'ToplistWidgetDefinition' object");
        }
        res.requests = ObjectSerializer.serialize(data.requests, "Array<ToplistWidgetRequest>", "")

        res.time = ObjectSerializer.serialize(data.time, "WidgetTime", "")

        res.title = ObjectSerializer.serialize(data.title, "string", "")

        if (['center', 'left', 'right', undefined].includes(data.titleAlign)) {
            res.title_align = data.titleAlign;
        } else {
            throw TypeError(`invalid enum value ${ data.titleAlign } for titleAlign`);
        }

        res.title_size = ObjectSerializer.serialize(data.titleSize, "string", "")

        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'ToplistWidgetDefinition' object");
        }
        if (['toplist', undefined].includes(data.type)) {
            res.type = data.type;
        } else {
            throw TypeError(`invalid enum value ${ data.type } for type`);
        }

        return res
    }
    
    public constructor() {
    }
}



