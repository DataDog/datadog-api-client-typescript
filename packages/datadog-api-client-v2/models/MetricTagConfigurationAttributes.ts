/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { MetricTagConfigurationMetricTypes } from './MetricTagConfigurationMetricTypes';
import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* Object containing the definition of a metric tag configuration attributes.
*/

export class MetricTagConfigurationAttributes {
    /**
    * Timestamp when the tag configuration was created.
    */
    'createdAt'?: Date;
    /**
    * Toggle to turn on/off percentile aggregations for distribution metrics. Only present when the `metric_type` is `distribution`.
    */
    'includePercentiles'?: boolean;
    'metricType'?: MetricTagConfigurationMetricTypes;
    /**
    * Timestamp when the tag configuration was last modified.
    */
    'modifiedAt'?: Date;
    /**
    * List of tag keys on which to group.
    */
    'tags'?: Array<string>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "createdAt": {
            "baseName": "created_at",
            "type": "Date",
            "format": "date-time"
        },
        "includePercentiles": {
            "baseName": "include_percentiles",
            "type": "boolean",
            "format": ""
        },
        "metricType": {
            "baseName": "metric_type",
            "type": "MetricTagConfigurationMetricTypes",
            "format": ""
        },
        "modifiedAt": {
            "baseName": "modified_at",
            "type": "Date",
            "format": "date-time"
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return MetricTagConfigurationAttributes.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): MetricTagConfigurationAttributes {
      let res = new MetricTagConfigurationAttributes();

      res.createdAt = ObjectSerializer.deserialize(data.created_at, "Date", "date-time")

      res.includePercentiles = ObjectSerializer.deserialize(data.include_percentiles, "boolean", "")

      if (['gauge', 'count', 'distribution', undefined].includes(data.metric_type)) {
          res.metricType = data.metric_type;
      } else {
          throw TypeError(`invalid enum value ${ data.metric_type } for metric_type`);
      }

      res.modifiedAt = ObjectSerializer.deserialize(data.modified_at, "Date", "date-time")

      res.tags = ObjectSerializer.deserialize(data.tags, "Array<string>", "")


      return res;
    }

    static serialize(data: MetricTagConfigurationAttributes): {[key: string]: any} {
        let attributeTypes = MetricTagConfigurationAttributes.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.created_at = ObjectSerializer.serialize(data.createdAt, "Date", "date-time")

        res.include_percentiles = ObjectSerializer.serialize(data.includePercentiles, "boolean", "")

        if (['gauge', 'count', 'distribution', undefined].includes(data.metricType)) {
            res.metric_type = data.metricType;
        } else {
            throw TypeError(`invalid enum value ${ data.metricType } for metricType`);
        }

        res.modified_at = ObjectSerializer.serialize(data.modifiedAt, "Date", "date-time")

        res.tags = ObjectSerializer.serialize(data.tags, "Array<string>", "")

        return res
    }
    
    public constructor() {
    }
}



