/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ObjectSerializer } from "./ObjectSerializer";

/**
 * API error response.
 */

export class APIErrorResponse {
  /**
   * A list of errors.
   */
  "errors": Array<string>;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    errors: {
      baseName: "errors",
      type: "Array<string>",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return APIErrorResponse.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): APIErrorResponse {
    const res = new APIErrorResponse();

    if (data.errors === undefined) {
      throw new TypeError(
        "missing required attribute 'errors' on 'APIErrorResponse' object"
      );
    }
    res.errors = ObjectSerializer.deserialize(data.errors, "Array<string>", "");

    return res;
  }

  static serialize(data: APIErrorResponse): { [key: string]: any } {
    const attributeTypes = APIErrorResponse.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    if (data.errors === undefined) {
      throw new TypeError(
        "missing required attribute 'errors' on 'APIErrorResponse' object"
      );
    }
    res.errors = ObjectSerializer.serialize(data.errors, "Array<string>", "");

    return res;
  }

  public constructor() {}
}
