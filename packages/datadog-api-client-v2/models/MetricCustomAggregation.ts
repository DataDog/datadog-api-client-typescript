/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { MetricCustomSpaceAggregation } from "./MetricCustomSpaceAggregation";
import { MetricCustomTimeAggregation } from "./MetricCustomTimeAggregation";

export class MetricCustomAggregation {
  "space": MetricCustomSpaceAggregation;
  "time": MetricCustomTimeAggregation;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    space: {
      baseName: "space",
      type: "MetricCustomSpaceAggregation",
      format: "",
    },
    time: {
      baseName: "time",
      type: "MetricCustomTimeAggregation",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return MetricCustomAggregation.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): MetricCustomAggregation {
    const res = new MetricCustomAggregation();

    if (data.space === undefined) {
      throw new TypeError(
        "missing required attribute 'space' on 'MetricCustomAggregation' object"
      );
    }
    if (["avg", "max", "min", "sum", undefined].includes(data.space)) {
      res.space = data.space;
    } else {
      const raw = new MetricCustomAggregation();
      raw.unparsedObject = data;
      return raw;
    }

    if (data.time === undefined) {
      throw new TypeError(
        "missing required attribute 'time' on 'MetricCustomAggregation' object"
      );
    }
    if (["avg", "count", "max", "min", "sum", undefined].includes(data.time)) {
      res.time = data.time;
    } else {
      const raw = new MetricCustomAggregation();
      raw.unparsedObject = data;
      return raw;
    }

    return res;
  }

  static serialize(data: MetricCustomAggregation): { [key: string]: any } {
    const attributeTypes = MetricCustomAggregation.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    if (data.space === undefined) {
      throw new TypeError(
        "missing required attribute 'space' on 'MetricCustomAggregation' object"
      );
    }
    if (["avg", "max", "min", "sum", undefined].includes(data.space)) {
      res.space = data.space;
    } else {
      throw TypeError(`invalid enum value ${data.space} for space`);
    }

    if (data.time === undefined) {
      throw new TypeError(
        "missing required attribute 'time' on 'MetricCustomAggregation' object"
      );
    }
    if (["avg", "count", "max", "min", "sum", undefined].includes(data.time)) {
      res.time = data.time;
    } else {
      throw TypeError(`invalid enum value ${data.time} for time`);
    }

    return res;
  }

  public constructor() {}
}
