/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* A warning message indicating something that went wrong with the query
*/

export class LogsWarning {
    /**
    * A unique code for this type of warning
    */
    'code'?: string;
    /**
    * A detailed explanation of this specific warning
    */
    'detail'?: string;
    /**
    * A short human-readable summary of the warning
    */
    'title'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "code": {
            "baseName": "code",
            "type": "string",
            "format": ""
        },
        "detail": {
            "baseName": "detail",
            "type": "string",
            "format": ""
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return LogsWarning.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): LogsWarning {
      let res = new LogsWarning();

      res.code = ObjectSerializer.deserialize(data.code, "string", "")

      res.detail = ObjectSerializer.deserialize(data.detail, "string", "")

      res.title = ObjectSerializer.deserialize(data.title, "string", "")


      return res;
    }

    static serialize(data: LogsWarning): {[key: string]: any} {
        let attributeTypes = LogsWarning.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.code = ObjectSerializer.serialize(data.code, "string", "")

        res.detail = ObjectSerializer.serialize(data.detail, "string", "")

        res.title = ObjectSerializer.serialize(data.title, "string", "")

        return res
    }
    
    public constructor() {
    }
}



