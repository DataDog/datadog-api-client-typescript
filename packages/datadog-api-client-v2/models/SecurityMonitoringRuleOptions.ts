/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SecurityMonitoringRuleDetectionMethod } from "./SecurityMonitoringRuleDetectionMethod";
import { SecurityMonitoringRuleEvaluationWindow } from "./SecurityMonitoringRuleEvaluationWindow";
import { SecurityMonitoringRuleKeepAlive } from "./SecurityMonitoringRuleKeepAlive";
import { SecurityMonitoringRuleMaxSignalDuration } from "./SecurityMonitoringRuleMaxSignalDuration";
import { SecurityMonitoringRuleNewValueOptions } from "./SecurityMonitoringRuleNewValueOptions";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Options on rules.
 */

export class SecurityMonitoringRuleOptions {
  "detectionMethod"?: SecurityMonitoringRuleDetectionMethod;
  "evaluationWindow"?: SecurityMonitoringRuleEvaluationWindow;
  "keepAlive"?: SecurityMonitoringRuleKeepAlive;
  "maxSignalDuration"?: SecurityMonitoringRuleMaxSignalDuration;
  "newValueOptions"?: SecurityMonitoringRuleNewValueOptions;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    detectionMethod: {
      baseName: "detectionMethod",
      type: "SecurityMonitoringRuleDetectionMethod",
      format: "",
    },
    evaluationWindow: {
      baseName: "evaluationWindow",
      type: "SecurityMonitoringRuleEvaluationWindow",
      format: "",
    },
    keepAlive: {
      baseName: "keepAlive",
      type: "SecurityMonitoringRuleKeepAlive",
      format: "",
    },
    maxSignalDuration: {
      baseName: "maxSignalDuration",
      type: "SecurityMonitoringRuleMaxSignalDuration",
      format: "",
    },
    newValueOptions: {
      baseName: "newValueOptions",
      type: "SecurityMonitoringRuleNewValueOptions",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return SecurityMonitoringRuleOptions.attributeTypeMap;
  }

  static deserialize(data: {
    [key: string]: any;
  }): SecurityMonitoringRuleOptions {
    const res = new SecurityMonitoringRuleOptions();

    if (
      ["threshold", "new_value", "anomaly_detection", undefined].includes(
        data.detectionMethod
      )
    ) {
      res.detectionMethod = data.detectionMethod;
    } else {
      const raw = new SecurityMonitoringRuleOptions();
      raw.unparsedObject = data;
      return raw;
    }

    if (
      [0, 60, 300, 600, 900, 1800, 3600, 7200, undefined].includes(
        data.evaluationWindow
      )
    ) {
      res.evaluationWindow = data.evaluationWindow;
    } else {
      const raw = new SecurityMonitoringRuleOptions();
      raw.unparsedObject = data;
      return raw;
    }

    if (
      [
        0,
        60,
        300,
        600,
        900,
        1800,
        3600,
        7200,
        10800,
        21600,
        undefined,
      ].includes(data.keepAlive)
    ) {
      res.keepAlive = data.keepAlive;
    } else {
      const raw = new SecurityMonitoringRuleOptions();
      raw.unparsedObject = data;
      return raw;
    }

    if (
      [
        0,
        60,
        300,
        600,
        900,
        1800,
        3600,
        7200,
        10800,
        21600,
        43200,
        86400,
        undefined,
      ].includes(data.maxSignalDuration)
    ) {
      res.maxSignalDuration = data.maxSignalDuration;
    } else {
      const raw = new SecurityMonitoringRuleOptions();
      raw.unparsedObject = data;
      return raw;
    }

    res.newValueOptions = ObjectSerializer.deserialize(
      data.newValueOptions,
      "SecurityMonitoringRuleNewValueOptions",
      ""
    );

    return res;
  }

  static serialize(
    data: SecurityMonitoringRuleOptions
  ): { [key: string]: any } {
    const attributeTypes = SecurityMonitoringRuleOptions.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    if (
      ["threshold", "new_value", "anomaly_detection", undefined].includes(
        data.detectionMethod
      )
    ) {
      res.detectionMethod = data.detectionMethod;
    } else {
      throw TypeError(
        `invalid enum value ${data.detectionMethod} for detectionMethod`
      );
    }

    if (
      [0, 60, 300, 600, 900, 1800, 3600, 7200, undefined].includes(
        data.evaluationWindow
      )
    ) {
      res.evaluationWindow = data.evaluationWindow;
    } else {
      throw TypeError(
        `invalid enum value ${data.evaluationWindow} for evaluationWindow`
      );
    }

    if (
      [
        0,
        60,
        300,
        600,
        900,
        1800,
        3600,
        7200,
        10800,
        21600,
        undefined,
      ].includes(data.keepAlive)
    ) {
      res.keepAlive = data.keepAlive;
    } else {
      throw TypeError(`invalid enum value ${data.keepAlive} for keepAlive`);
    }

    if (
      [
        0,
        60,
        300,
        600,
        900,
        1800,
        3600,
        7200,
        10800,
        21600,
        43200,
        86400,
        undefined,
      ].includes(data.maxSignalDuration)
    ) {
      res.maxSignalDuration = data.maxSignalDuration;
    } else {
      throw TypeError(
        `invalid enum value ${data.maxSignalDuration} for maxSignalDuration`
      );
    }

    res.newValueOptions = ObjectSerializer.serialize(
      data.newValueOptions,
      "SecurityMonitoringRuleNewValueOptions",
      ""
    );

    return res;
  }

  public constructor() {}
}
