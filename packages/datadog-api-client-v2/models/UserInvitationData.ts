/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { UserInvitationRelationships } from "./UserInvitationRelationships";
import { UserInvitationsType } from "./UserInvitationsType";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Object to create a user invitation.
 */

export class UserInvitationData {
  "relationships": UserInvitationRelationships;
  "type": UserInvitationsType;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    relationships: {
      baseName: "relationships",
      type: "UserInvitationRelationships",
      format: "",
    },
    type: {
      baseName: "type",
      type: "UserInvitationsType",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return UserInvitationData.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): UserInvitationData {
    const res = new UserInvitationData();

    if (data.relationships === undefined) {
      throw new TypeError(
        "missing required attribute 'relationships' on 'UserInvitationData' object"
      );
    }
    res.relationships = ObjectSerializer.deserialize(
      data.relationships,
      "UserInvitationRelationships",
      ""
    );

    if (data.type === undefined) {
      throw new TypeError(
        "missing required attribute 'type' on 'UserInvitationData' object"
      );
    }
    if (["user_invitations", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  static serialize(data: UserInvitationData): { [key: string]: any } {
    const attributeTypes = UserInvitationData.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data.relationships === undefined) {
      throw new TypeError(
        "missing required attribute 'relationships' on 'UserInvitationData' object"
      );
    }
    res.relationships = ObjectSerializer.serialize(
      data.relationships,
      "UserInvitationRelationships",
      ""
    );

    if (data.type === undefined) {
      throw new TypeError(
        "missing required attribute 'type' on 'UserInvitationData' object"
      );
    }
    if (["user_invitations", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  public constructor() {}
}
