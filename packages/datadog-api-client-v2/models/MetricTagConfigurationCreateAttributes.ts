/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { MetricCustomAggregation } from "./MetricCustomAggregation";
import { MetricTagConfigurationMetricTypes } from "./MetricTagConfigurationMetricTypes";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Object containing the definition of a metric tag configuration to be created.
 */

export class MetricTagConfigurationCreateAttributes {
  /**
   * A list of queryable aggregation combinations for a count, rate, or gauge metric. By default, count and rate metrics require the (time: sum, space: sum) aggregation and Gauge metrics require the (time: avg, space: avg) aggregation. Additional time & space combinations are also available:  - time: avg, space: avg - time: avg, space: max - time: avg, space: min - time: avg, space: sum - time: count, space: sum - time: max, space: max - time: min, space: min - time: sum, space: avg - time: sum, space: sum  Can only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.
   */
  "aggregations"?: Array<MetricCustomAggregation>;
  /**
   * Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have a `metric_type` of `distribution`.
   */
  "includePercentiles"?: boolean;
  "metricType": MetricTagConfigurationMetricTypes;
  /**
   * A list of tag keys that will be queryable for your metric.
   */
  "tags": Array<string>;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    aggregations: {
      baseName: "aggregations",
      type: "Array<MetricCustomAggregation>",
      format: "",
    },
    includePercentiles: {
      baseName: "include_percentiles",
      type: "boolean",
      format: "",
    },
    metricType: {
      baseName: "metric_type",
      type: "MetricTagConfigurationMetricTypes",
      format: "",
    },
    tags: {
      baseName: "tags",
      type: "Array<string>",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return MetricTagConfigurationCreateAttributes.attributeTypeMap;
  }

  static deserialize(data: {
    [key: string]: any;
  }): MetricTagConfigurationCreateAttributes {
    const res = new MetricTagConfigurationCreateAttributes();

    res.aggregations = ObjectSerializer.deserialize(
      data.aggregations,
      "Array<MetricCustomAggregation>",
      ""
    );

    res.includePercentiles = ObjectSerializer.deserialize(
      data.include_percentiles,
      "boolean",
      ""
    );

    if (data.metric_type === undefined) {
      throw new TypeError(
        "missing required attribute 'metric_type' on 'MetricTagConfigurationCreateAttributes' object"
      );
    }
    if (
      ["gauge", "count", "rate", "distribution", undefined].includes(
        data.metric_type
      )
    ) {
      res.metricType = data.metric_type;
    } else {
      const raw = new MetricTagConfigurationCreateAttributes();
      raw.unparsedObject = data;
      return raw;
    }

    if (data.tags === undefined) {
      throw new TypeError(
        "missing required attribute 'tags' on 'MetricTagConfigurationCreateAttributes' object"
      );
    }
    res.tags = ObjectSerializer.deserialize(data.tags, "Array<string>", "");

    return res;
  }

  static serialize(data: MetricTagConfigurationCreateAttributes): {
    [key: string]: any;
  } {
    const attributeTypes =
      MetricTagConfigurationCreateAttributes.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.aggregations = ObjectSerializer.serialize(
      data.aggregations,
      "Array<MetricCustomAggregation>",
      ""
    );

    res.include_percentiles = ObjectSerializer.serialize(
      data.includePercentiles,
      "boolean",
      ""
    );

    if (data.metricType === undefined) {
      throw new TypeError(
        "missing required attribute 'metric_type' on 'MetricTagConfigurationCreateAttributes' object"
      );
    }
    if (
      ["gauge", "count", "rate", "distribution", undefined].includes(
        data.metricType
      )
    ) {
      res.metric_type = data.metricType;
    } else {
      throw TypeError(`invalid enum value ${data.metricType} for metricType`);
    }

    if (data.tags === undefined) {
      throw new TypeError(
        "missing required attribute 'tags' on 'MetricTagConfigurationCreateAttributes' object"
      );
    }
    res.tags = ObjectSerializer.serialize(data.tags, "Array<string>", "");

    return res;
  }

  public constructor() {}
}
