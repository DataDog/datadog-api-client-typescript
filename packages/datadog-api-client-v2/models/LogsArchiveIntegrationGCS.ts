/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ObjectSerializer } from "./ObjectSerializer";

/**
 * The GCS archive's integration destination.
 */

export class LogsArchiveIntegrationGCS {
  /**
   * A client email.
   */
  "clientEmail": string;
  /**
   * A project ID.
   */
  "projectId": string;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    clientEmail: {
      baseName: "client_email",
      type: "string",
      format: "",
    },
    projectId: {
      baseName: "project_id",
      type: "string",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return LogsArchiveIntegrationGCS.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): LogsArchiveIntegrationGCS {
    const res = new LogsArchiveIntegrationGCS();

    if (data.client_email === undefined) {
      throw new TypeError(
        "missing required attribute 'client_email' on 'LogsArchiveIntegrationGCS' object"
      );
    }
    res.clientEmail = ObjectSerializer.deserialize(
      data.client_email,
      "string",
      ""
    );

    if (data.project_id === undefined) {
      throw new TypeError(
        "missing required attribute 'project_id' on 'LogsArchiveIntegrationGCS' object"
      );
    }
    res.projectId = ObjectSerializer.deserialize(data.project_id, "string", "");

    return res;
  }

  static serialize(data: LogsArchiveIntegrationGCS): { [key: string]: any } {
    const attributeTypes = LogsArchiveIntegrationGCS.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data.clientEmail === undefined) {
      throw new TypeError(
        "missing required attribute 'client_email' on 'LogsArchiveIntegrationGCS' object"
      );
    }
    res.client_email = ObjectSerializer.serialize(
      data.clientEmail,
      "string",
      ""
    );

    if (data.projectId === undefined) {
      throw new TypeError(
        "missing required attribute 'project_id' on 'LogsArchiveIntegrationGCS' object"
      );
    }
    res.project_id = ObjectSerializer.serialize(data.projectId, "string", "");

    return res;
  }

  public constructor() {}
}
