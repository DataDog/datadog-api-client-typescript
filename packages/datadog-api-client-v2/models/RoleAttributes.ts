/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* Attributes of the role.
*/

export class RoleAttributes {
    /**
    * Creation time of the role.
    */
    'createdAt'?: Date;
    /**
    * Time of last role modification.
    */
    'modifiedAt'?: Date;
    /**
    * Name of the role.
    */
    'name'?: string;
    /**
    * Number of users with that role.
    */
    'userCount'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "createdAt": {
            "baseName": "created_at",
            "type": "Date",
            "format": "date-time"
        },
        "modifiedAt": {
            "baseName": "modified_at",
            "type": "Date",
            "format": "date-time"
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "userCount": {
            "baseName": "user_count",
            "type": "number",
            "format": "int64"
        }    };

    static getAttributeTypeMap() {
        return RoleAttributes.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): RoleAttributes {
      let res = new RoleAttributes();

      res.createdAt = ObjectSerializer.deserialize(data.created_at, "Date", "date-time")

      res.modifiedAt = ObjectSerializer.deserialize(data.modified_at, "Date", "date-time")

      res.name = ObjectSerializer.deserialize(data.name, "string", "")

      res.userCount = ObjectSerializer.deserialize(data.user_count, "number", "int64")


      return res;
    }

    static serialize(data: RoleAttributes): {[key: string]: any} {
        let attributeTypes = RoleAttributes.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.created_at = ObjectSerializer.serialize(data.createdAt, "Date", "date-time")

        res.modified_at = ObjectSerializer.serialize(data.modifiedAt, "Date", "date-time")

        res.name = ObjectSerializer.serialize(data.name, "string", "")

        res.user_count = ObjectSerializer.serialize(data.userCount, "number", "int64")

        return res
    }
    
    public constructor() {
    }
}



