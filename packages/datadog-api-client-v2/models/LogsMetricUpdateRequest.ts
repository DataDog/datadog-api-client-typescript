/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { LogsMetricUpdateData } from "./LogsMetricUpdateData";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * The new log-based metric body.
 */

export class LogsMetricUpdateRequest {
  "data": LogsMetricUpdateData;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    data: {
      baseName: "data",
      type: "LogsMetricUpdateData",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return LogsMetricUpdateRequest.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): LogsMetricUpdateRequest {
    const res = new LogsMetricUpdateRequest();

    if (data.data === undefined) {
      throw new TypeError(
        "missing required attribute 'data' on 'LogsMetricUpdateRequest' object"
      );
    }
    res.data = ObjectSerializer.deserialize(
      data.data,
      "LogsMetricUpdateData",
      ""
    );

    return res;
  }

  static serialize(data: LogsMetricUpdateRequest): { [key: string]: any } {
    const attributeTypes = LogsMetricUpdateRequest.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data.data === undefined) {
      throw new TypeError(
        "missing required attribute 'data' on 'LogsMetricUpdateRequest' object"
      );
    }
    res.data = ObjectSerializer.serialize(
      data.data,
      "LogsMetricUpdateData",
      ""
    );

    return res;
  }

  public constructor() {}
}
