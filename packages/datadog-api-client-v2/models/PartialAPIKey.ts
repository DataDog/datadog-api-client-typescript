/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { APIKeyRelationships } from "./APIKeyRelationships";
import { APIKeysType } from "./APIKeysType";
import { PartialAPIKeyAttributes } from "./PartialAPIKeyAttributes";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Partial Datadog API key.
 */

export class PartialAPIKey {
  "attributes"?: PartialAPIKeyAttributes;
  /**
   * ID of the API key.
   */
  "id"?: string;
  "relationships"?: APIKeyRelationships;
  "type"?: APIKeysType;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    attributes: {
      baseName: "attributes",
      type: "PartialAPIKeyAttributes",
      format: "",
    },
    id: {
      baseName: "id",
      type: "string",
      format: "",
    },
    relationships: {
      baseName: "relationships",
      type: "APIKeyRelationships",
      format: "",
    },
    type: {
      baseName: "type",
      type: "APIKeysType",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return PartialAPIKey.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): PartialAPIKey {
    const res = new PartialAPIKey();

    res.attributes = ObjectSerializer.deserialize(
      data.attributes,
      "PartialAPIKeyAttributes",
      ""
    );

    res.id = ObjectSerializer.deserialize(data.id, "string", "");

    res.relationships = ObjectSerializer.deserialize(
      data.relationships,
      "APIKeyRelationships",
      ""
    );

    if (["api_keys", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      const raw = new PartialAPIKey();
      raw.unparsedObject = data;
      return raw;
    }

    return res;
  }

  static serialize(data: PartialAPIKey): { [key: string]: any } {
    const attributeTypes = PartialAPIKey.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.attributes = ObjectSerializer.serialize(
      data.attributes,
      "PartialAPIKeyAttributes",
      ""
    );

    res.id = ObjectSerializer.serialize(data.id, "string", "");

    res.relationships = ObjectSerializer.serialize(
      data.relationships,
      "APIKeyRelationships",
      ""
    );

    if (["api_keys", undefined].includes(data.type)) {
      res.type = data.type;
    } else {
      throw TypeError(`invalid enum value ${data.type} for type`);
    }

    return res;
  }

  public constructor() {}
}
