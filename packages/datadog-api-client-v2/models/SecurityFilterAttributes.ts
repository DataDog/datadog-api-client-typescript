/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SecurityFilterExclusionFilterResponse } from "./SecurityFilterExclusionFilterResponse";
import { SecurityFilterFilteredDataType } from "./SecurityFilterFilteredDataType";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * The object describing a security filter.
 */

export class SecurityFilterAttributes {
  /**
   * The list of exclusion filters applied in this security filter.
   */
  "exclusionFilters"?: Array<SecurityFilterExclusionFilterResponse>;
  "filteredDataType"?: SecurityFilterFilteredDataType;
  /**
   * Whether the security filter is the built-in filter.
   */
  "isBuiltin"?: boolean;
  /**
   * Whether the security filter is enabled.
   */
  "isEnabled"?: boolean;
  /**
   * The security filter name.
   */
  "name"?: string;
  /**
   * The security filter query. Logs accepted by this query will be accepted by this filter.
   */
  "query"?: string;
  /**
   * The version of the security filter.
   */
  "version"?: number;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    exclusionFilters: {
      baseName: "exclusion_filters",
      type: "Array<SecurityFilterExclusionFilterResponse>",
      format: "",
    },
    filteredDataType: {
      baseName: "filtered_data_type",
      type: "SecurityFilterFilteredDataType",
      format: "",
    },
    isBuiltin: {
      baseName: "is_builtin",
      type: "boolean",
      format: "",
    },
    isEnabled: {
      baseName: "is_enabled",
      type: "boolean",
      format: "",
    },
    name: {
      baseName: "name",
      type: "string",
      format: "",
    },
    query: {
      baseName: "query",
      type: "string",
      format: "",
    },
    version: {
      baseName: "version",
      type: "number",
      format: "int32",
    },
  };

  static getAttributeTypeMap() {
    return SecurityFilterAttributes.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): SecurityFilterAttributes {
    const res = new SecurityFilterAttributes();

    res.exclusionFilters = ObjectSerializer.deserialize(
      data.exclusion_filters,
      "Array<SecurityFilterExclusionFilterResponse>",
      ""
    );

    if (["logs", undefined].includes(data.filtered_data_type)) {
      res.filteredDataType = data.filtered_data_type;
    } else {
      const raw = new SecurityFilterAttributes();
      raw.unparsedObject = data;
      return raw;
    }

    res.isBuiltin = ObjectSerializer.deserialize(
      data.is_builtin,
      "boolean",
      ""
    );

    res.isEnabled = ObjectSerializer.deserialize(
      data.is_enabled,
      "boolean",
      ""
    );

    res.name = ObjectSerializer.deserialize(data.name, "string", "");

    res.query = ObjectSerializer.deserialize(data.query, "string", "");

    res.version = ObjectSerializer.deserialize(data.version, "number", "int32");

    return res;
  }

  static serialize(data: SecurityFilterAttributes): { [key: string]: any } {
    const attributeTypes = SecurityFilterAttributes.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.exclusion_filters = ObjectSerializer.serialize(
      data.exclusionFilters,
      "Array<SecurityFilterExclusionFilterResponse>",
      ""
    );

    if (["logs", undefined].includes(data.filteredDataType)) {
      res.filtered_data_type = data.filteredDataType;
    } else {
      throw TypeError(
        `invalid enum value ${data.filteredDataType} for filteredDataType`
      );
    }

    res.is_builtin = ObjectSerializer.serialize(data.isBuiltin, "boolean", "");

    res.is_enabled = ObjectSerializer.serialize(data.isEnabled, "boolean", "");

    res.name = ObjectSerializer.serialize(data.name, "string", "");

    res.query = ObjectSerializer.serialize(data.query, "string", "");

    res.version = ObjectSerializer.serialize(data.version, "number", "int32");

    return res;
  }

  public constructor() {}
}
