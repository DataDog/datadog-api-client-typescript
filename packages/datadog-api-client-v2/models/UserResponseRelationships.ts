/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RelationshipToOrganization } from "./RelationshipToOrganization";
import { RelationshipToOrganizations } from "./RelationshipToOrganizations";
import { RelationshipToRoles } from "./RelationshipToRoles";
import { RelationshipToUsers } from "./RelationshipToUsers";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Relationships of the user object returned by the API.
 */

export class UserResponseRelationships {
  "org"?: RelationshipToOrganization;
  "otherOrgs"?: RelationshipToOrganizations;
  "otherUsers"?: RelationshipToUsers;
  "roles"?: RelationshipToRoles;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    org: {
      baseName: "org",
      type: "RelationshipToOrganization",
      format: "",
    },
    otherOrgs: {
      baseName: "other_orgs",
      type: "RelationshipToOrganizations",
      format: "",
    },
    otherUsers: {
      baseName: "other_users",
      type: "RelationshipToUsers",
      format: "",
    },
    roles: {
      baseName: "roles",
      type: "RelationshipToRoles",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return UserResponseRelationships.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): UserResponseRelationships {
    const res = new UserResponseRelationships();

    res.org = ObjectSerializer.deserialize(
      data.org,
      "RelationshipToOrganization",
      ""
    );

    res.otherOrgs = ObjectSerializer.deserialize(
      data.other_orgs,
      "RelationshipToOrganizations",
      ""
    );

    res.otherUsers = ObjectSerializer.deserialize(
      data.other_users,
      "RelationshipToUsers",
      ""
    );

    res.roles = ObjectSerializer.deserialize(
      data.roles,
      "RelationshipToRoles",
      ""
    );

    return res;
  }

  static serialize(data: UserResponseRelationships): { [key: string]: any } {
    const attributeTypes = UserResponseRelationships.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.org = ObjectSerializer.serialize(
      data.org,
      "RelationshipToOrganization",
      ""
    );

    res.other_orgs = ObjectSerializer.serialize(
      data.otherOrgs,
      "RelationshipToOrganizations",
      ""
    );

    res.other_users = ObjectSerializer.serialize(
      data.otherUsers,
      "RelationshipToUsers",
      ""
    );

    res.roles = ObjectSerializer.serialize(
      data.roles,
      "RelationshipToRoles",
      ""
    );

    return res;
  }

  public constructor() {}
}
