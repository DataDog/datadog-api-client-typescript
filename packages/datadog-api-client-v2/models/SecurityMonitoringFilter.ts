/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SecurityMonitoringFilterAction } from "./SecurityMonitoringFilterAction";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * The rule's suppression filter.
 */

export class SecurityMonitoringFilter {
  "action"?: SecurityMonitoringFilterAction;
  /**
   * Query for selecting logs to apply the filtering action.
   */
  "query"?: string;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    action: {
      baseName: "action",
      type: "SecurityMonitoringFilterAction",
      format: "",
    },
    query: {
      baseName: "query",
      type: "string",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return SecurityMonitoringFilter.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): SecurityMonitoringFilter {
    const res = new SecurityMonitoringFilter();

    if (["require", "suppress", undefined].includes(data.action)) {
      res.action = data.action;
    } else {
      throw TypeError(`invalid enum value ${data.action} for action`);
    }

    res.query = ObjectSerializer.deserialize(data.query, "string", "");

    return res;
  }

  static serialize(data: SecurityMonitoringFilter): { [key: string]: any } {
    const attributeTypes = SecurityMonitoringFilter.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (["require", "suppress", undefined].includes(data.action)) {
      res.action = data.action;
    } else {
      throw TypeError(`invalid enum value ${data.action} for action`);
    }

    res.query = ObjectSerializer.serialize(data.query, "string", "");

    return res;
  }

  public constructor() {}
}
