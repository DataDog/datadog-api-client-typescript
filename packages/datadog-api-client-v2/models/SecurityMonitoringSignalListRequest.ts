/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SecurityMonitoringSignalListRequestFilter } from "./SecurityMonitoringSignalListRequestFilter";
import { SecurityMonitoringSignalListRequestPage } from "./SecurityMonitoringSignalListRequestPage";
import { SecurityMonitoringSignalsSort } from "./SecurityMonitoringSignalsSort";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * The request for a security signal list.
 */

export class SecurityMonitoringSignalListRequest {
  "filter"?: SecurityMonitoringSignalListRequestFilter;
  "page"?: SecurityMonitoringSignalListRequestPage;
  "sort"?: SecurityMonitoringSignalsSort;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    filter: {
      baseName: "filter",
      type: "SecurityMonitoringSignalListRequestFilter",
      format: "",
    },
    page: {
      baseName: "page",
      type: "SecurityMonitoringSignalListRequestPage",
      format: "",
    },
    sort: {
      baseName: "sort",
      type: "SecurityMonitoringSignalsSort",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return SecurityMonitoringSignalListRequest.attributeTypeMap;
  }

  static deserialize(data: {
    [key: string]: any;
  }): SecurityMonitoringSignalListRequest {
    const res = new SecurityMonitoringSignalListRequest();

    res.filter = ObjectSerializer.deserialize(
      data.filter,
      "SecurityMonitoringSignalListRequestFilter",
      ""
    );

    res.page = ObjectSerializer.deserialize(
      data.page,
      "SecurityMonitoringSignalListRequestPage",
      ""
    );

    if (["timestamp", "-timestamp", undefined].includes(data.sort)) {
      res.sort = data.sort;
    } else {
      const raw = new SecurityMonitoringSignalListRequest();
      raw.unparsedObject = data;
      return raw;
    }

    return res;
  }

  static serialize(data: SecurityMonitoringSignalListRequest): {
    [key: string]: any;
  } {
    const attributeTypes =
      SecurityMonitoringSignalListRequest.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.filter = ObjectSerializer.serialize(
      data.filter,
      "SecurityMonitoringSignalListRequestFilter",
      ""
    );

    res.page = ObjectSerializer.serialize(
      data.page,
      "SecurityMonitoringSignalListRequestPage",
      ""
    );

    if (["timestamp", "-timestamp", undefined].includes(data.sort)) {
      res.sort = data.sort;
    } else {
      throw TypeError(`invalid enum value ${data.sort} for sort`);
    }

    return res;
  }

  public constructor() {}
}
