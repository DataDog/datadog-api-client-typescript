/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SecurityMonitoringRuleSeverity } from "./SecurityMonitoringRuleSeverity";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Case when signal is generated.
 */

export class SecurityMonitoringRuleCaseCreate {
  /**
   * A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated based on the event counts in the previously defined queries.
   */
  "condition"?: string;
  /**
   * Name of the case.
   */
  "name"?: string;
  /**
   * Notification targets for each rule case.
   */
  "notifications"?: Array<string>;
  "status": SecurityMonitoringRuleSeverity;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    condition: {
      baseName: "condition",
      type: "string",
      format: "",
    },
    name: {
      baseName: "name",
      type: "string",
      format: "",
    },
    notifications: {
      baseName: "notifications",
      type: "Array<string>",
      format: "",
    },
    status: {
      baseName: "status",
      type: "SecurityMonitoringRuleSeverity",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return SecurityMonitoringRuleCaseCreate.attributeTypeMap;
  }

  static deserialize(data: {
    [key: string]: any;
  }): SecurityMonitoringRuleCaseCreate {
    const res = new SecurityMonitoringRuleCaseCreate();

    res.condition = ObjectSerializer.deserialize(data.condition, "string", "");

    res.name = ObjectSerializer.deserialize(data.name, "string", "");

    res.notifications = ObjectSerializer.deserialize(
      data.notifications,
      "Array<string>",
      ""
    );

    if (data.status === undefined) {
      throw new TypeError(
        "missing required attribute 'status' on 'SecurityMonitoringRuleCaseCreate' object"
      );
    }
    if (
      ["info", "low", "medium", "high", "critical", undefined].includes(
        data.status
      )
    ) {
      res.status = data.status;
    } else {
      const raw = new SecurityMonitoringRuleCaseCreate();
      raw.unparsedObject = data;
      return raw;
    }

    return res;
  }

  static serialize(
    data: SecurityMonitoringRuleCaseCreate
  ): { [key: string]: any } {
    const attributeTypes = SecurityMonitoringRuleCaseCreate.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.condition = ObjectSerializer.serialize(data.condition, "string", "");

    res.name = ObjectSerializer.serialize(data.name, "string", "");

    res.notifications = ObjectSerializer.serialize(
      data.notifications,
      "Array<string>",
      ""
    );

    if (data.status === undefined) {
      throw new TypeError(
        "missing required attribute 'status' on 'SecurityMonitoringRuleCaseCreate' object"
      );
    }
    if (
      ["info", "low", "medium", "high", "critical", undefined].includes(
        data.status
      )
    ) {
      res.status = data.status;
    } else {
      throw TypeError(`invalid enum value ${data.status} for status`);
    }

    return res;
  }

  public constructor() {}
}
