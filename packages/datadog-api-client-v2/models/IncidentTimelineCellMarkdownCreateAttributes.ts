/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { IncidentTimelineCellMarkdownContentType } from "./IncidentTimelineCellMarkdownContentType";
import { IncidentTimelineCellMarkdownCreateAttributesContent } from "./IncidentTimelineCellMarkdownCreateAttributesContent";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Timeline cell data for Markdown timeline cells for a create request.
 */

export class IncidentTimelineCellMarkdownCreateAttributes {
  "cellType": IncidentTimelineCellMarkdownContentType;
  "content": IncidentTimelineCellMarkdownCreateAttributesContent;
  /**
   * A flag indicating whether the timeline cell is important and should be highlighted.
   */
  "important"?: boolean;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    cellType: {
      baseName: "cell_type",
      type: "IncidentTimelineCellMarkdownContentType",
      format: "",
    },
    content: {
      baseName: "content",
      type: "IncidentTimelineCellMarkdownCreateAttributesContent",
      format: "",
    },
    important: {
      baseName: "important",
      type: "boolean",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return IncidentTimelineCellMarkdownCreateAttributes.attributeTypeMap;
  }

  static deserialize(data: {
    [key: string]: any;
  }): IncidentTimelineCellMarkdownCreateAttributes {
    const res = new IncidentTimelineCellMarkdownCreateAttributes();

    if (data.cell_type === undefined) {
      throw new TypeError(
        "missing required attribute 'cell_type' on 'IncidentTimelineCellMarkdownCreateAttributes' object"
      );
    }
    if (["markdown", undefined].includes(data.cell_type)) {
      res.cellType = data.cell_type;
    } else {
      const raw = new IncidentTimelineCellMarkdownCreateAttributes();
      raw.unparsedObject = data;
      return raw;
    }

    if (data.content === undefined) {
      throw new TypeError(
        "missing required attribute 'content' on 'IncidentTimelineCellMarkdownCreateAttributes' object"
      );
    }
    res.content = ObjectSerializer.deserialize(
      data.content,
      "IncidentTimelineCellMarkdownCreateAttributesContent",
      ""
    );

    res.important = ObjectSerializer.deserialize(data.important, "boolean", "");

    return res;
  }

  static serialize(
    data: IncidentTimelineCellMarkdownCreateAttributes
  ): { [key: string]: any } {
    const attributeTypes = IncidentTimelineCellMarkdownCreateAttributes.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    if (data.cellType === undefined) {
      throw new TypeError(
        "missing required attribute 'cell_type' on 'IncidentTimelineCellMarkdownCreateAttributes' object"
      );
    }
    if (["markdown", undefined].includes(data.cellType)) {
      res.cell_type = data.cellType;
    } else {
      throw TypeError(`invalid enum value ${data.cellType} for cellType`);
    }

    if (data.content === undefined) {
      throw new TypeError(
        "missing required attribute 'content' on 'IncidentTimelineCellMarkdownCreateAttributes' object"
      );
    }
    res.content = ObjectSerializer.serialize(
      data.content,
      "IncidentTimelineCellMarkdownCreateAttributesContent",
      ""
    );

    res.important = ObjectSerializer.serialize(data.important, "boolean", "");

    return res;
  }

  public constructor() {}
}
