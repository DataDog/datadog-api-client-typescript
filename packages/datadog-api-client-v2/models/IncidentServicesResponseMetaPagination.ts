/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Pagination properties.
 */

export class IncidentServicesResponseMetaPagination {
  /**
   * The index of the first element in the next page of results. Equal to page size added to the current offset.
   */
  "nextOffset"?: number;
  /**
   * The index of the first element in the results.
   */
  "offset"?: number;
  /**
   * Maximum size of pages to return.
   */
  "size"?: number;

  "unparsedObject"?: any;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    nextOffset: {
      baseName: "next_offset",
      type: "number",
      format: "int64",
    },
    offset: {
      baseName: "offset",
      type: "number",
      format: "int64",
    },
    size: {
      baseName: "size",
      type: "number",
      format: "int64",
    },
  };

  static getAttributeTypeMap() {
    return IncidentServicesResponseMetaPagination.attributeTypeMap;
  }

  static deserialize(data: {
    [key: string]: any;
  }): IncidentServicesResponseMetaPagination {
    const res = new IncidentServicesResponseMetaPagination();

    res.nextOffset = ObjectSerializer.deserialize(
      data.next_offset,
      "number",
      "int64"
    );

    res.offset = ObjectSerializer.deserialize(data.offset, "number", "int64");

    res.size = ObjectSerializer.deserialize(data.size, "number", "int64");

    return res;
  }

  static serialize(data: IncidentServicesResponseMetaPagination): {
    [key: string]: any;
  } {
    const attributeTypes =
      IncidentServicesResponseMetaPagination.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data?.unparsedObject !== undefined) {
      return data.unparsedObject;
    }
    res.next_offset = ObjectSerializer.serialize(
      data.nextOffset,
      "number",
      "int64"
    );

    res.offset = ObjectSerializer.serialize(data.offset, "number", "int64");

    res.size = ObjectSerializer.serialize(data.size, "number", "int64");

    return res;
  }

  public constructor() {}
}
