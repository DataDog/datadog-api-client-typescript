/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SecurityMonitoringFilter } from './SecurityMonitoringFilter';
import { SecurityMonitoringRuleCase } from './SecurityMonitoringRuleCase';
import { SecurityMonitoringRuleOptions } from './SecurityMonitoringRuleOptions';
import { SecurityMonitoringRuleQuery } from './SecurityMonitoringRuleQuery';
import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* Rule.
*/

export class SecurityMonitoringRuleResponse {
    /**
    * Cases for generating signals.
    */
    'cases'?: Array<SecurityMonitoringRuleCase>;
    /**
    * When the rule was created, timestamp in milliseconds.
    */
    'createdAt'?: number;
    /**
    * User ID of the user who created the rule.
    */
    'creationAuthorId'?: number;
    /**
    * Additional queries to filter matched events before they are processed.
    */
    'filters'?: Array<SecurityMonitoringFilter>;
    /**
    * Whether the notifications include the triggering group-by values in their title.
    */
    'hasExtendedTitle'?: boolean;
    /**
    * The ID of the rule.
    */
    'id'?: string;
    /**
    * Whether the rule is included by default.
    */
    'isDefault'?: boolean;
    /**
    * Whether the rule has been deleted.
    */
    'isDeleted'?: boolean;
    /**
    * Whether the rule is enabled.
    */
    'isEnabled'?: boolean;
    /**
    * Message for generated signals.
    */
    'message'?: string;
    /**
    * The name of the rule.
    */
    'name'?: string;
    'options'?: SecurityMonitoringRuleOptions;
    /**
    * Queries for selecting logs which are part of the rule.
    */
    'queries'?: Array<SecurityMonitoringRuleQuery>;
    /**
    * Tags for generated signals.
    */
    'tags'?: Array<string>;
    /**
    * User ID of the user who updated the rule.
    */
    'updateAuthorId'?: number;
    /**
    * The version of the rule.
    */
    'version'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "cases": {
            "baseName": "cases",
            "type": "Array<SecurityMonitoringRuleCase>",
            "format": ""
        },
        "createdAt": {
            "baseName": "createdAt",
            "type": "number",
            "format": "int64"
        },
        "creationAuthorId": {
            "baseName": "creationAuthorId",
            "type": "number",
            "format": "int64"
        },
        "filters": {
            "baseName": "filters",
            "type": "Array<SecurityMonitoringFilter>",
            "format": ""
        },
        "hasExtendedTitle": {
            "baseName": "hasExtendedTitle",
            "type": "boolean",
            "format": ""
        },
        "id": {
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        "isDefault": {
            "baseName": "isDefault",
            "type": "boolean",
            "format": ""
        },
        "isDeleted": {
            "baseName": "isDeleted",
            "type": "boolean",
            "format": ""
        },
        "isEnabled": {
            "baseName": "isEnabled",
            "type": "boolean",
            "format": ""
        },
        "message": {
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "options": {
            "baseName": "options",
            "type": "SecurityMonitoringRuleOptions",
            "format": ""
        },
        "queries": {
            "baseName": "queries",
            "type": "Array<SecurityMonitoringRuleQuery>",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "updateAuthorId": {
            "baseName": "updateAuthorId",
            "type": "number",
            "format": "int64"
        },
        "version": {
            "baseName": "version",
            "type": "number",
            "format": "int64"
        }    };

    static getAttributeTypeMap() {
        return SecurityMonitoringRuleResponse.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): SecurityMonitoringRuleResponse {
      let res = new SecurityMonitoringRuleResponse();

      res.cases = ObjectSerializer.deserialize(data.cases, "Array<SecurityMonitoringRuleCase>", "")

      res.createdAt = ObjectSerializer.deserialize(data.createdAt, "number", "int64")

      res.creationAuthorId = ObjectSerializer.deserialize(data.creationAuthorId, "number", "int64")

      res.filters = ObjectSerializer.deserialize(data.filters, "Array<SecurityMonitoringFilter>", "")

      res.hasExtendedTitle = ObjectSerializer.deserialize(data.hasExtendedTitle, "boolean", "")

      res.id = ObjectSerializer.deserialize(data.id, "string", "")

      res.isDefault = ObjectSerializer.deserialize(data.isDefault, "boolean", "")

      res.isDeleted = ObjectSerializer.deserialize(data.isDeleted, "boolean", "")

      res.isEnabled = ObjectSerializer.deserialize(data.isEnabled, "boolean", "")

      res.message = ObjectSerializer.deserialize(data.message, "string", "")

      res.name = ObjectSerializer.deserialize(data.name, "string", "")

      res.options = ObjectSerializer.deserialize(data.options, "SecurityMonitoringRuleOptions", "")

      res.queries = ObjectSerializer.deserialize(data.queries, "Array<SecurityMonitoringRuleQuery>", "")

      res.tags = ObjectSerializer.deserialize(data.tags, "Array<string>", "")

      res.updateAuthorId = ObjectSerializer.deserialize(data.updateAuthorId, "number", "int64")

      res.version = ObjectSerializer.deserialize(data.version, "number", "int64")


      return res;
    }

    static serialize(data: SecurityMonitoringRuleResponse): {[key: string]: any} {
        let attributeTypes = SecurityMonitoringRuleResponse.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.cases = ObjectSerializer.serialize(data.cases, "Array<SecurityMonitoringRuleCase>", "")

        res.createdAt = ObjectSerializer.serialize(data.createdAt, "number", "int64")

        res.creationAuthorId = ObjectSerializer.serialize(data.creationAuthorId, "number", "int64")

        res.filters = ObjectSerializer.serialize(data.filters, "Array<SecurityMonitoringFilter>", "")

        res.hasExtendedTitle = ObjectSerializer.serialize(data.hasExtendedTitle, "boolean", "")

        res.id = ObjectSerializer.serialize(data.id, "string", "")

        res.isDefault = ObjectSerializer.serialize(data.isDefault, "boolean", "")

        res.isDeleted = ObjectSerializer.serialize(data.isDeleted, "boolean", "")

        res.isEnabled = ObjectSerializer.serialize(data.isEnabled, "boolean", "")

        res.message = ObjectSerializer.serialize(data.message, "string", "")

        res.name = ObjectSerializer.serialize(data.name, "string", "")

        res.options = ObjectSerializer.serialize(data.options, "SecurityMonitoringRuleOptions", "")

        res.queries = ObjectSerializer.serialize(data.queries, "Array<SecurityMonitoringRuleQuery>", "")

        res.tags = ObjectSerializer.serialize(data.tags, "Array<string>", "")

        res.updateAuthorId = ObjectSerializer.serialize(data.updateAuthorId, "number", "int64")

        res.version = ObjectSerializer.serialize(data.version, "number", "int64")

        return res
    }
    
    public constructor() {
    }
}



