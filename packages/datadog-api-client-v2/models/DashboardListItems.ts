/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { DashboardListItem } from "./DashboardListItem";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * Dashboards within a list.
 */

export class DashboardListItems {
  /**
   * List of dashboards in the dashboard list.
   */
  "dashboards": Array<DashboardListItem>;
  /**
   * Number of dashboards in the dashboard list.
   */
  "total"?: number;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    dashboards: {
      baseName: "dashboards",
      type: "Array<DashboardListItem>",
      format: "",
    },
    total: {
      baseName: "total",
      type: "number",
      format: "int64",
    },
  };

  static getAttributeTypeMap() {
    return DashboardListItems.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): DashboardListItems {
    const res = new DashboardListItems();

    if (data.dashboards === undefined) {
      throw new TypeError(
        "missing required attribute 'dashboards' on 'DashboardListItems' object"
      );
    }
    res.dashboards = ObjectSerializer.deserialize(
      data.dashboards,
      "Array<DashboardListItem>",
      ""
    );

    res.total = ObjectSerializer.deserialize(data.total, "number", "int64");

    return res;
  }

  static serialize(data: DashboardListItems): { [key: string]: any } {
    const attributeTypes = DashboardListItems.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    if (data.dashboards === undefined) {
      throw new TypeError(
        "missing required attribute 'dashboards' on 'DashboardListItems' object"
      );
    }
    res.dashboards = ObjectSerializer.serialize(
      data.dashboards,
      "Array<DashboardListItem>",
      ""
    );

    res.total = ObjectSerializer.serialize(data.total, "number", "int64");

    return res;
  }

  public constructor() {}
}
