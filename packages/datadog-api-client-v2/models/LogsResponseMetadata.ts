/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { LogsAggregateResponseStatus } from "./LogsAggregateResponseStatus";
import { LogsResponseMetadataPage } from "./LogsResponseMetadataPage";
import { LogsWarning } from "./LogsWarning";
import { ObjectSerializer } from "./ObjectSerializer";

/**
 * The metadata associated with a request
 */

export class LogsResponseMetadata {
  /**
   * The time elapsed in milliseconds
   */
  "elapsed"?: number;
  "page"?: LogsResponseMetadataPage;
  /**
   * The identifier of the request
   */
  "requestId"?: string;
  "status"?: LogsAggregateResponseStatus;
  /**
   * A list of warnings (non fatal errors) encountered, partial results might be returned if warnings are present in the response.
   */
  "warnings"?: Array<LogsWarning>;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: {
    [key: string]: { baseName: string; type: string; format: string };
  } = {
    elapsed: {
      baseName: "elapsed",
      type: "number",
      format: "int64",
    },
    page: {
      baseName: "page",
      type: "LogsResponseMetadataPage",
      format: "",
    },
    requestId: {
      baseName: "request_id",
      type: "string",
      format: "",
    },
    status: {
      baseName: "status",
      type: "LogsAggregateResponseStatus",
      format: "",
    },
    warnings: {
      baseName: "warnings",
      type: "Array<LogsWarning>",
      format: "",
    },
  };

  static getAttributeTypeMap() {
    return LogsResponseMetadata.attributeTypeMap;
  }

  static deserialize(data: { [key: string]: any }): LogsResponseMetadata {
    const res = new LogsResponseMetadata();

    res.elapsed = ObjectSerializer.deserialize(data.elapsed, "number", "int64");

    res.page = ObjectSerializer.deserialize(
      data.page,
      "LogsResponseMetadataPage",
      ""
    );

    res.requestId = ObjectSerializer.deserialize(data.request_id, "string", "");

    if (["done", "timeout", undefined].includes(data.status)) {
      res.status = data.status;
    } else {
      throw TypeError(`invalid enum value ${data.status} for status`);
    }

    res.warnings = ObjectSerializer.deserialize(
      data.warnings,
      "Array<LogsWarning>",
      ""
    );

    return res;
  }

  static serialize(data: LogsResponseMetadata): { [key: string]: any } {
    const attributeTypes = LogsResponseMetadata.getAttributeTypeMap();
    const res: { [index: string]: any } = {};
    for (const [key, value] of Object.entries(data)) {
      if (!(key in attributeTypes)) {
        throw new TypeError(`${key} attribute not in schema`);
      }
    }
    res.elapsed = ObjectSerializer.serialize(data.elapsed, "number", "int64");

    res.page = ObjectSerializer.serialize(
      data.page,
      "LogsResponseMetadataPage",
      ""
    );

    res.request_id = ObjectSerializer.serialize(data.requestId, "string", "");

    if (["done", "timeout", undefined].includes(data.status)) {
      res.status = data.status;
    } else {
      throw TypeError(`invalid enum value ${data.status} for status`);
    }

    res.warnings = ObjectSerializer.serialize(
      data.warnings,
      "Array<LogsWarning>",
      ""
    );

    return res;
  }

  public constructor() {}
}
