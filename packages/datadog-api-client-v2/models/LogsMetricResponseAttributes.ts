/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { LogsMetricResponseCompute } from './LogsMetricResponseCompute';
import { LogsMetricResponseFilter } from './LogsMetricResponseFilter';
import { LogsMetricResponseGroupBy } from './LogsMetricResponseGroupBy';
import { HttpFile } from '../http/http';
import { ObjectSerializer } from './ObjectSerializer';

/**
* The object describing a Datadog log-based metric.
*/

export class LogsMetricResponseAttributes {
    'compute'?: LogsMetricResponseCompute;
    'filter'?: LogsMetricResponseFilter;
    /**
    * The rules for the group by.
    */
    'groupBy'?: Array<LogsMetricResponseGroupBy>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        "compute": {
            "baseName": "compute",
            "type": "LogsMetricResponseCompute",
            "format": ""
        },
        "filter": {
            "baseName": "filter",
            "type": "LogsMetricResponseFilter",
            "format": ""
        },
        "groupBy": {
            "baseName": "group_by",
            "type": "Array<LogsMetricResponseGroupBy>",
            "format": ""
        }    };

    static getAttributeTypeMap() {
        return LogsMetricResponseAttributes.attributeTypeMap;
    }

    static deserialize(data: {[key: string]: any}): LogsMetricResponseAttributes {
      let res = new LogsMetricResponseAttributes();

      res.compute = ObjectSerializer.deserialize(data.compute, "LogsMetricResponseCompute", "")

      res.filter = ObjectSerializer.deserialize(data.filter, "LogsMetricResponseFilter", "")

      res.groupBy = ObjectSerializer.deserialize(data.group_by, "Array<LogsMetricResponseGroupBy>", "")


      return res;
    }

    static serialize(data: LogsMetricResponseAttributes): {[key: string]: any} {
        let attributeTypes = LogsMetricResponseAttributes.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        res.compute = ObjectSerializer.serialize(data.compute, "LogsMetricResponseCompute", "")

        res.filter = ObjectSerializer.serialize(data.filter, "LogsMetricResponseFilter", "")

        res.group_by = ObjectSerializer.serialize(data.groupBy, "Array<LogsMetricResponseGroupBy>", "")

        return res
    }
    
    public constructor() {
    }
}



