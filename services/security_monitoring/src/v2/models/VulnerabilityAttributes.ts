import { AttributeTypeMap } from "@datadog/datadog-api-client";

import { CodeLocation } from "./CodeLocation";
import { Library } from "./Library";
import { Remediation } from "./Remediation";
import { VulnerabilityCvss } from "./VulnerabilityCvss";
import { VulnerabilityDependencyLocations } from "./VulnerabilityDependencyLocations";
import { VulnerabilityEcosystem } from "./VulnerabilityEcosystem";
import { VulnerabilityRisks } from "./VulnerabilityRisks";
import { VulnerabilityStatus } from "./VulnerabilityStatus";
import { VulnerabilityTool } from "./VulnerabilityTool";
import { VulnerabilityType } from "./VulnerabilityType";

/**
 * The JSON:API attributes of the vulnerability.
 */
export class VulnerabilityAttributes {
  /**
   * Vulnerability advisory ID.
   */
  "advisoryId"?: string;
  /**
   * Code vulnerability location.
   */
  "codeLocation"?: CodeLocation;
  /**
   * Vulnerability CVE list.
   */
  "cveList": Array<string>;
  /**
   * Vulnerability severities.
   */
  "cvss": VulnerabilityCvss;
  /**
   * Static library vulnerability location.
   */
  "dependencyLocations"?: VulnerabilityDependencyLocations;
  /**
   * Vulnerability description.
   */
  "description": string;
  /**
   * The related vulnerability asset ecosystem.
   */
  "ecosystem"?: VulnerabilityEcosystem;
  /**
   * Vulnerability exposure time in seconds.
   */
  "exposureTime": number;
  /**
   * First detection of the vulnerability in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format
   */
  "firstDetection": string;
  /**
   * Whether the vulnerability has a remediation or not.
   */
  "fixAvailable": boolean;
  /**
   * Vulnerability language.
   */
  "language": string;
  /**
   * Last detection of the vulnerability in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format
   */
  "lastDetection": string;
  /**
   * Vulnerability library.
   */
  "library"?: Library;
  /**
   * List of remediations.
   */
  "remediations": Array<Remediation>;
  /**
   * Vulnerability `repo_digest` list (when the vulnerability is related to `Image` asset).
   */
  "repoDigests"?: Array<string>;
  /**
   * Vulnerability risks.
   */
  "risks": VulnerabilityRisks;
  /**
   * The vulnerability status.
   */
  "status": VulnerabilityStatus;
  /**
   * Vulnerability title.
   */
  "title": string;
  /**
   * The vulnerability tool.
   */
  "tool": VulnerabilityTool;
  /**
   * The vulnerability type.
   */
  "type": VulnerabilityType;
  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  "additionalProperties"?: { [key: string]: any };
  /**
   * @ignore
   */
  "_unparsed"?: boolean;

  /**
   * @ignore
   */
  static readonly attributeTypeMap: AttributeTypeMap = {
    advisoryId: {
      baseName: "advisory_id",
      type: "string",
    },
    codeLocation: {
      baseName: "code_location",
      type: "CodeLocation",
    },
    cveList: {
      baseName: "cve_list",
      type: "Array<string>",
      required: true,
    },
    cvss: {
      baseName: "cvss",
      type: "VulnerabilityCvss",
      required: true,
    },
    dependencyLocations: {
      baseName: "dependency_locations",
      type: "VulnerabilityDependencyLocations",
    },
    description: {
      baseName: "description",
      type: "string",
      required: true,
    },
    ecosystem: {
      baseName: "ecosystem",
      type: "VulnerabilityEcosystem",
    },
    exposureTime: {
      baseName: "exposure_time",
      type: "number",
      required: true,
      format: "int64",
    },
    firstDetection: {
      baseName: "first_detection",
      type: "string",
      required: true,
    },
    fixAvailable: {
      baseName: "fix_available",
      type: "boolean",
      required: true,
    },
    language: {
      baseName: "language",
      type: "string",
      required: true,
    },
    lastDetection: {
      baseName: "last_detection",
      type: "string",
      required: true,
    },
    library: {
      baseName: "library",
      type: "Library",
    },
    remediations: {
      baseName: "remediations",
      type: "Array<Remediation>",
      required: true,
    },
    repoDigests: {
      baseName: "repo_digests",
      type: "Array<string>",
    },
    risks: {
      baseName: "risks",
      type: "VulnerabilityRisks",
      required: true,
    },
    status: {
      baseName: "status",
      type: "VulnerabilityStatus",
      required: true,
    },
    title: {
      baseName: "title",
      type: "string",
      required: true,
    },
    tool: {
      baseName: "tool",
      type: "VulnerabilityTool",
      required: true,
    },
    type: {
      baseName: "type",
      type: "VulnerabilityType",
      required: true,
    },
    additionalProperties: {
      baseName: "additionalProperties",
      type: "{ [key: string]: any; }",
    },
  };

  /**
   * @ignore
   */
  static getAttributeTypeMap(): AttributeTypeMap {
    return VulnerabilityAttributes.attributeTypeMap;
  }

  public constructor() {}
}
