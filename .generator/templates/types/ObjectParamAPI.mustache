import { ResponseContext, RequestContext, HttpFile } from '../http/http{{extensionForDeno}}';
import * as models from '../models/all{{extensionForDeno}}';
import { Configuration} from '../configuration{{extensionForDeno}}'
{{#useRxJS}}
import { Observable } from 'rxjs';
{{/useRxJS}}

{{#models}}
{{#model}}
import { {{{ classname }}} } from '../models/{{{ classFilename }}}{{extensionForDeno}}';
{{/model}}
{{/models}}
{{#apiInfo}}
{{#apis}}

{{#operations}}
import { {{classname}}RequestFactory, {{classname}}ResponseProcessor} from "../apis/{{classname}}{{extensionForDeno}}";

{{#operation}}
{{#hasParams}}
export interface {{classname}}{{operationIdCamelCase}}Request {
    {{#allParams}}
    /**
     * {{description}}
     * @type {{dataType}}
     */
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}
    {{/allParams}}
}

{{/hasParams}}
{{/operation}}
export class Object{{classname}} {

    private requestFactory: {{classname}}RequestFactory;
    private responseProcessor: {{classname}}ResponseProcessor;
    private configuration: Configuration;

    public constructor(configuration: Configuration, requestFactory?: {{classname}}RequestFactory, responseProcessor?: {{classname}}ResponseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new {{classname}}RequestFactory(configuration);
        this.responseProcessor = responseProcessor || new {{classname}}ResponseProcessor();
    }

{{#operation}}
    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     * @param param The request object
     */
    public {{nickname}}({{#hasParams}}param: {{classname}}{{operationIdCamelCase}}Request{{^requiredParams}} = {}{{/requiredParams}}, {{/hasParams}}options?: Configuration): {{#useRxJS}}Observable{{/useRxJS}}{{^useRxJS}}Promise{{/useRxJS}}<{{{returnType}}}{{^returnType}}void{{/returnType}}> {
        const requestContextPromise = this.requestFactory.{{nickname}}({{#allParams}}param.{{paramName}}, {{/allParams}}options);
        return requestContextPromise.then(requestContext => {
                return this.configuration.httpApi.send(requestContext).then(responseContext => {
                        return this.responseProcessor.{{nickname}}(responseContext);
                });
        });
    }

{{/operation}}
}
{{/operations}}
{{/apis}}
{{/apiInfo}}
