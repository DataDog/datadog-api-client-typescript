import { HttpLibrary, HttpConfiguration, RequestContext } from "./http/http{{extensionForDeno}}";
import { DebugMiddleWare, Middleware, PromiseMiddleware, PromiseMiddlewareWrapper} from "./middleware{{extensionForDeno}}";
{{#frameworks}}
{{#fetch-api}}
import { IsomorphicFetchHttpLibrary as DefaultHttpLibrary } from "./http/isomorphic-fetch{{extensionForDeno}}";
{{/fetch-api}}
{{#jquery}}
import { JQueryHttpLibrary as DefaultHttpLibrary } from "./http/jquery";
{{/jquery}}
{{/frameworks}}
import { BaseServerConfiguration, server1, servers, operationServers } from "./servers{{extensionForDeno}}";
import { configureAuthMethods, AuthMethods, AuthMethodsConfiguration } from "./auth/auth{{extensionForDeno}}";

export interface Configuration {
    readonly baseServer?: BaseServerConfiguration;
    readonly serverIndex: number;
    readonly operationServerIndices: { [ name: string ]: number };
    readonly httpApi: HttpLibrary;
    readonly middleware: Middleware[];
    readonly authMethods: AuthMethods;
    readonly httpConfig: HttpConfiguration;
    readonly debug: boolean | undefined;
    unstableOperations: { [name: string]: boolean };
}


/**
 * Interface with which a configuration object can be configured.
 */
export interface ConfigurationParameters {
    /**
     * Default server to use (takes preference over serverIndex and operationServerIndices)
     */
    baseServer?: BaseServerConfiguration;
    /**
     * Default index of a server to use from the predefined server list
     */
    serverIndex?: number;
    /**
     * Default index of a server to use for an operation from the predefined server operation map
     */
    operationServerIndices?: { [ name: string ]: number };
    /**
     * HTTP library to use e.g. IsomorphicFetch
     */
    httpApi?: HttpLibrary;
    /**
     * The middlewares which will be applied to requests and responses
     */
    middleware?: Middleware[];
    /**
     * Configures all middlewares using the promise api instead of observables (which Middleware uses)
     */
    promiseMiddleware?: PromiseMiddleware[];
    /**
     * Configuration for the available authentication methods
     */
    authMethods?: AuthMethodsConfiguration;
    /**
     * Configuration for HTTP transport
     */
    httpConfig?: HttpConfiguration
    /**
     * Flag to enable requests tracing
     */
    debug?: boolean
}

/**
 * Configuration factory function
 *
 * If a property is not included in conf, a default is used:
 *    - baseServer: null
 *    - serverIndex: 0
 *    - operationServerIndices: {}
 *    - httpApi: IsomorphicFetchHttpLibrary
 *    - middleware: []
 *    - promiseMiddleware: []
 *    - authMethods: {}
 *    - httpConfig: {}
 *    - debug: false
 *
 * @param conf partial configuration
 */
export function createConfiguration(conf: ConfigurationParameters = {}): Configuration {
    if (process.env.DD_SITE) {
        let serverConf = server1.getConfiguration();
        server1.setVariables({"site": process.env.DD_SITE} as (typeof serverConf));
        for (const op in operationServers) {
            operationServers[op][0].setVariables({ site: process.env.DD_SITE });
        }
    }

    const authMethods = conf.authMethods || {};
    {{#authMethods}}
    {{#isApiKey}}
    {{#isKeyInHeader}}

    if (!("{{name}}" in authMethods) && process.env.{{vendorExtensions.x-env-name}}) {
        authMethods["{{name}}"] = process.env.{{vendorExtensions.x-env-name}};
    }
    {{/isKeyInHeader}}
    {{/isApiKey}}
    {{/authMethods}}

    const configuration: Configuration = {
        baseServer: conf.baseServer,
        serverIndex: conf.serverIndex || 0,
        operationServerIndices: conf.operationServerIndices || {},
        unstableOperations: {
        {{#apiInfo}}
        {{#apis}}
        {{#operations}}
        {{#operation}}
        {{#vendorExtensions.x-unstable}}
            "{{operationId}}": false,
        {{/vendorExtensions.x-unstable}}
        {{/operation}}
        {{/operations}}
        {{/apis}}
        {{/apiInfo}}
        },
        httpApi: conf.httpApi || new DefaultHttpLibrary(),
        middleware: conf.middleware || (conf.debug ? [ new DebugMiddleWare() ] : []),
        authMethods: configureAuthMethods(authMethods),
        httpConfig: conf.httpConfig || {},
        debug: conf.debug
    };
    if (conf.promiseMiddleware) {
        conf.promiseMiddleware.forEach(
            m => configuration.middleware.push(new PromiseMiddlewareWrapper(m))
        );
    }
    return configuration;
}

export function getServer(conf: Configuration, endpoint: string): BaseServerConfiguration {
    if (conf.baseServer !== undefined) {
        return conf.baseServer;
    }
    let index = (endpoint in conf.operationServerIndices) ? conf.operationServerIndices[endpoint] : conf.serverIndex;
    return (endpoint in operationServers) ? operationServers[endpoint][index] : servers[index];
}

/**
 * Sets the server variables.
 *
 * @param serverVariables key/value object representing the server variables (site, name, protocol, ...)
 */
export function setServerVariables(conf: Configuration, serverVariables: { [key: string]: string }): void {
    if (conf.baseServer !== undefined) {
        conf.baseServer.setVariables(serverVariables);
        return ;
    }

    let index = conf.serverIndex;
    servers[index].setVariables(serverVariables);

    for (const op in operationServers) {
        operationServers[op][0].setVariables(serverVariables);
    }
}

/**
 * Apply given security authentication method if avaiable in configuration.
 */
export function applySecurityAuthentication<AuthMethodKey extends keyof AuthMethods> (
  conf: Configuration,
  requestContext: RequestContext,
  authMethods: AuthMethodKey[]
): void {
    for (const authMethodName of authMethods) {
        const authMethod = conf.authMethods[authMethodName];
        if (authMethod) {
            authMethod.applySecurityAuthentication(requestContext);
        }
    }
}
