{{>licenseInfo}}
{{#models}}
{{#model}}
{{#tsImports}}
import { {{classname}} } from './{{filename}}{{extensionForDeno}}';
{{/tsImports}}
import { HttpFile } from '../http/http{{extensionForDeno}}';
import { ObjectSerializer, UnparsedObject } from './ObjectSerializer';

{{#description}}
/**
* {{{description}}}
*/
{{/description}}
{{^isEnum}}{{^oneOf}}
export class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#vars}}
{{#description}}
    /**
    * {{{description}}}
    */
{{/description}}
    '{{name}}'{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}};
{{/vars}}

    'unparsedObject'?:any;

    {{#discriminator}}
    static readonly discriminator: string | undefined = "{{discriminatorName}}";
    {{/discriminator}}
    {{^discriminator}}
    static readonly discriminator: string | undefined = undefined;
    {{/discriminator}}

    {{^isArray}}
    static readonly attributeTypeMap: {[key: string]: {baseName: string, type: string, format: string}} = {
        {{#vars}}
        "{{name}}": {
            "baseName": "{{baseName}}",
            "type": "{{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}",
            "format": "{{dataFormat}}"
        }{{^-last}},
        {{/-last}}
        {{/vars}}
    };

    static getAttributeTypeMap() {
        {{#parent}}
        return super.getAttributeTypeMap().concat({{classname}}.attributeTypeMap);
        {{/parent}}
        {{^parent}}
        return {{classname}}.attributeTypeMap;
        {{/parent}}
    }
    {{/isArray}}

    static deserialize(data: {[key: string]: any}): {{classname}} {
      let res = new {{classname}}();

      {{#vars}}
        {{#required}}
      if (data.{{{baseName}}} === undefined) {
          throw new TypeError("missing required attribute '{{baseName}}' on '{{classname}}' object");
      }
        {{/required}}
        {{#allowableValues}}
      if ([{{#enumVars}}{{{value}}}, {{/enumVars}}undefined].includes(data.{{{baseName}}})) {
          res.{{name}} = data.{{{baseName}}};
      } else {
          let raw = new {{classname}}();
          raw.unparsedObject = data;
          return raw;
      }

        {{/allowableValues}}
        {{^allowableValues}}
      res.{{{name}}} = ObjectSerializer.deserialize(data.{{{baseName}}}, "{{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}", "{{dataFormat}}")
        {{/allowableValues}}

      {{/vars}}

      return res;
    }

    static serialize(data: {{classname}}): {[key: string]: any} {
        let attributeTypes = {{{classname}}}.getAttributeTypeMap();
        let res: {[index: string]: any} = {};
        for (let [key, value] of Object.entries(data)) {
            if (!(key in attributeTypes)) {
                throw new TypeError(`${key} attribute not in schema`);
            }
        }
        if (data?.unparsedObject !== undefined) {
            return data.unparsedObject;
        }
        {{#vars}}
          {{#required}}
        if (data.{{{name}}} === undefined) {
            throw new TypeError("missing required attribute '{{baseName}}' on '{{classname}}' object");
        }
          {{/required}}
          {{#allowableValues}}
        if ([{{#enumVars}}{{{value}}}, {{/enumVars}}undefined].includes(data.{{{name}}})) {
            res.{{baseName}} = data.{{{name}}};
        } else {
            throw TypeError(`invalid enum value ${ data.{{{name}}} } for {{name}}`);
        }
          {{/allowableValues}}
          {{^allowableValues}}
        res.{{{baseName}}} = ObjectSerializer.serialize(data.{{{name}}}, "{{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}", "{{dataFormat}}")
          {{/allowableValues}}

        {{/vars}}
        return res
    }

    public constructor() {
        {{#parent}}
        super();
        {{/parent}}
        {{#allVars}}
        {{#discriminatorValue}}
        this.{{name}} = "{{discriminatorValue}}";
        {{/discriminatorValue}}
        {{/allVars}}
        {{#discriminatorName}}
        this.{{discriminatorName}} = "{{classname}}";
        {{/discriminatorName}}
    }
}

{{#hasEnums}}

{{#vars}}
{{#isEnum}}
export type {{classname}}{{enumName}} ={{#allowableValues}}{{#values}} "{{.}}" {{^-last}}|{{/-last}}{{/values}}{{/allowableValues}};
{{/isEnum}}
{{/vars}}

{{/hasEnums}}
{{/oneOf}}{{/isEnum}}
{{#isEnum}}
export type {{classname}} = {{#allowableValues}}{{#enumVars}}typeof {{#enumClassPrefix}}{{{classname.toUpperCase}}}_{{/enumClassPrefix}}{{name}} {{^-last}}| {{/-last}}{{/enumVars}};
{{#enumVars}}
export const {{#enumClassPrefix}}{{{classname.toUpperCase}}}_{{/enumClassPrefix}}{{name}} = {{{value}}};
{{/enumVars}}{{/allowableValues}}
{{/isEnum}}
{{#oneOf}}{{#-first}}export type {{classname}} = {{/-first}}{{{.}}}{{^-last}} | {{/-last}}{{#-last}} | UnparsedObject;{{/-last}}{{/oneOf}}
{{/model}}
{{/models}}
