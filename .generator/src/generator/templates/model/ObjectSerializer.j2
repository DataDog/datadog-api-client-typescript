{%- if models %}
{%- if model %}
import { {{classname}}{%- if hasEnums %}{%- if vars %}{%- if isEnum %}, {{classname}}{{enumName}} {%- endif %} {%- endif %}{%- endif %} } from './{{ classFilename }}{{extensionForDeno}}';
{%- endif %}
{%- endif %}
import { UnparsedObject } from "../util";
import { logger } from "../../../logger";

const primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number"
];

const ARRAY_PREFIX = "Array<";
const MAP_PREFIX = "{ [key: string]: ";

const supportedMediaTypes: { [mediaType: string]: number } = {
  "application/json": Infinity,
  "text/json": 100,
  "application/octet-stream": 0
}

const enumsMap: {[key: string]: any[]} = {
    {%- if models %}
        {%- if model %}
            {%- if isEnum %}
    "{{classname}}{{enumName}}": [{%- if allowableValues %}{%- if enumVars %}{{ value }}{%- if not loop.last %}}, {%- endif %}}{%- endif %}]{%- endif %},
            {%- endif %}
            {%- if hasEnums %}
                {%- if vars %}
                    {%- if isEnum %}
    "{{classname}}{{enumName}}": [{%- if allowableValues %}{%- if enumVars %}{{ value }}{%- if not loop.last %}}, {%- endif %}}{%- endif %}]{%- endif %},
                    {%- endif %}
                {%- endif %}
            {%- endif %}
        {%- endif %}
    {%- endif %}
};

const typeMap: {[index: string]: any} = {
    {%- if models %}
        {%- if model %}
            {%- if not isEnum %}
            {%- if not oneOf %}
    "{{classname}}": {{classname}},
            {%- endif %}
            {%- endif %}
        {%- endif %}
    {%- endif %}
}

const oneOfMap: {[index: string]: string[]} = {
  {%- if models %}{%- if model %}{%- if oneOf %}{%- if loop.first %}"{{classname}}": [{%- endif %}"{{oneOf}}"{%- if not loop.last %}}, {%- endif %}}{%- if loop.last %}}],
  {%- endif %}}{%- endif %}{%- endif %}{%- endif %}
};

export class ObjectSerializer {
    public static serialize(data: any, type: string, format: string): any {
        if (data == undefined || type == "any") {
            return data;
        } else if (primitives.includes(type.toLowerCase()) && typeof data == type.toLowerCase()) {
            return data;
        } else if (type.startsWith(ARRAY_PREFIX)) {
            // Array<Type> => Type
            const subType: string = type.substring(ARRAY_PREFIX.length, type.length - 1);
            const transformedData: any[] = [];
            for (const element of data) {
                transformedData.push(ObjectSerializer.serialize(element, subType, format));
            }
            return transformedData;
        } else if (type.startsWith(MAP_PREFIX)) {
            // { [key: string]: Type; } => Type
            const subType: string = type.substring(MAP_PREFIX.length, type.length - 3);
            const transformedData: { [key: string]: any } = {};
            for (const key in data) {
                transformedData[key] = ObjectSerializer.serialize(data[key], subType, format);
            }
            return transformedData;
        } else if (type === "Date") {
            if ("string" == typeof data) {
                return data;
            }
            if (format == "date") {
                let month = data.getMonth() + 1
                month = month < 10 ? "0" + month.toString() : month.toString()
                let day = data.getDate();
                day = day < 10 ? "0" + day.toString() : day.toString();

                return data.getFullYear() + "-" + month + "-" + day;
            } else {
                return data.toISOString();
            }
        } else {
            if (enumsMap[type]) {
                if (enumsMap[type].includes(data)) {
                  return data;
                }
                throw new TypeError(`unknown enum value '${data}'`)
            }
            if (oneOfMap[type]) {
                const oneOfs: any[] = [];
                for (const oneOf of oneOfMap[type]) {
                    try {
                        oneOfs.push(ObjectSerializer.serialize(data, oneOf, format));
                    } catch (e) {
                        logger.debug(`could not serialize ${oneOf} (${e})`)
                    }
                }
                if (oneOfs.length > 1) {
                    throw new TypeError(`${data} matches multiple types from ${oneOfMap[type]} ${oneOfs}`);
                }
                if (oneOfs.length == 0) {
                    throw new TypeError(`${data} doesn't match any type from ${oneOfMap[type]} ${oneOfs}`);
                }
                return oneOfs[0];
            }

            if (!typeMap[type]) { // dont know the type
                throw new TypeError(`unknown type '${type}'`);
            }

            // get the map for the correct type.
            const attributesMap = typeMap[type].getAttributeTypeMap();
            const instance: {[index: string]: any} = {};

            for (const attributeName in attributesMap) {
                const attributeObj = attributesMap[attributeName];
                instance[attributeObj.baseName] = ObjectSerializer.serialize(data[attributeName], attributeObj.type, attributeObj.format);

                // check for required properties
                if (attributeObj?.required && instance[attributeObj.baseName] === undefined) {
                    throw new Error(`missing required property '${attributeObj.baseName}'`);
                }

                if (enumsMap[attributeObj.type] && !enumsMap[attributeObj.type].includes(instance[attributeObj.baseName])) {
                    instance.unparsedObject = instance[attributeObj.baseName];
                }
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string, format: string = ""): any {
        if (data == undefined || type == "any") {
            return data;
        } else if (primitives.includes(type.toLowerCase()) && typeof data == type.toLowerCase()) {
            return data;
        } else if (type.startsWith(ARRAY_PREFIX)) {
            // Array<Type> => Type
            const subType: string = type.substring(ARRAY_PREFIX.length, type.length - 1);
            const transformedData: any[] = [];
            for (const element of data) {
                transformedData.push(ObjectSerializer.deserialize(element, subType, format));
            }
            return transformedData;
        } else if (type.startsWith(MAP_PREFIX)) {
            // { [key: string]: Type; } => Type
            const subType: string = type.substring(MAP_PREFIX.length, type.length - 3);
            const transformedData: { [key: string]: any } = {};
            for (const key in data) {
                transformedData[key] = ObjectSerializer.deserialize(data[key], subType, format);
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {
               return data;
            }

            if (oneOfMap[type]) {
                const oneOfs: any[] = [];
                for (const oneOf of oneOfMap[type]) {
                    try {
                        const d = ObjectSerializer.deserialize(data, oneOf, format);
                        if (d?.unparsedObject === undefined) {
                            oneOfs.push(d);
                        }
                    } catch (e) {
                        logger.debug(`could not deserialize ${oneOf} (${e})`)
                    }

                }
                if (oneOfs.length != 1) {
                    return new UnparsedObject(data);
                }
                return oneOfs[0];
            }

            if (!typeMap[type]) { // dont know the type
                throw new TypeError(`unknown type '${type}'`);
            }

            const instance = new typeMap[type]();
            const attributesMap = typeMap[type].getAttributeTypeMap();

            for (const attributeName in attributesMap) {
                const attributeObj = attributesMap[attributeName];
                instance[attributeName] = ObjectSerializer.deserialize(data[attributeObj.baseName], attributeObj.type, attributeObj.format);

                // check for required properties
                if (attributeObj?.required && instance[attributeName] === undefined) {
                    throw new Error(`missing required property '${attributeName}'`);
                }

                // check for enum values
                if (enumsMap[attributeObj.type] && !enumsMap[attributeObj.type].includes(instance[attributeName])) {
                    instance.unparsedObject = instance[attributeName];
                }
            }

            return instance;
        }
    }


    /**
     * Normalize media type
     *
     * We currently do not handle any media types attributes, i.e. anything
     * after a semicolon. All content is assumed to be UTF-8 compatible.
     */
    public static normalizeMediaType(mediaType: string | undefined): string | undefined {
        if (mediaType === undefined) {
            return undefined;
        }
        return mediaType.split(";")[0].trim().toLowerCase();
    }

    /**
     * From a list of possible media types, choose the one we can handle best.
     *
     * The order of the given media types does not have any impact on the choice
     * made.
     */
    public static getPreferredMediaType(mediaTypes: Array<string>): string {
        /** According to OAS 3 we should default to json */
        if (!mediaTypes) {
            return "application/json";
        }

        const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);
        let selectedMediaType: string | undefined = undefined;
        let selectedRank: number = -Infinity;
        for (const mediaType of normalMediaTypes) {
            if (mediaType === undefined) {
                continue;
            }
            let supported = supportedMediaTypes[mediaType];
            if (supported !== undefined && supported > selectedRank) {
                selectedMediaType = mediaType;
                selectedRank = supported;
            }
        }

        if (selectedMediaType === undefined) {
            throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
        }

        return selectedMediaType;
    }

    /**
     * Convert data to a string according the given media type
     */
    public static stringify(data: any, mediaType: string): string {
        if (mediaType === "application/json" || mediaType === "text/json") {
            return JSON.stringify(data);
        }

        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
    }

    /**
     * Parse data from a string according to the given media type
     */
    public static parse(rawData: string, mediaType: string | undefined): any {
        try {
            return JSON.parse(rawData);
        } catch (error) {
            logger.debug(`could not parse ${mediaType}: ${error}`);
            return rawData;
        }
    }
}
