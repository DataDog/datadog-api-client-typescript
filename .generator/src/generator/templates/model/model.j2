{% include "licenseInfo.j2" %}

{%- for classname in get_references_for_model(model, name)|sort %}
{%- if classname != name %}{# TODO: fix this. LogsApiError references itself in param #}
import { {{ classname }} } from "./{{ classname }}";
{%- endif %}
{%- endfor %}

import { HttpFile } from "../../datadog-api-client-common/http/http";

{% if "enum" not in model and "oneOf" not in model -%}
import { AttributeTypeMap } from "../../datadog-api-client-common/util";
{%- endif %}

{% if "enum" in model or "oneOf" in model -%}
import { UnparsedObject } from "../../datadog-api-client-common/util";
{%- endif %}

{% if "description" in model %}
/**
{{ model.description|docstring(indent=1) }}
*/
{% endif %}
{%- if "enum" not in model and "oneOf" not in model -%}
export class {{ name }} {
{%- for attr, schema in model.get("properties", {}).items() %}
{%- set isRequired = attr in model.get("required", []) %}
{%- set isNullable = schema.nullable %}
{%- if schema.description %}
  /**
{{ schema.description|docstring }}
  */
{%- endif %}
  "{{ attr|attribute_name }}"{%- if not isRequired %}?{%- endif %}: {{ type_to_typescript(schema) }}{%- if isRequired and isNullable %}|null{%- endif %};
{%- endfor %}
{%- if model.get("additionalProperties") %}

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  "additionalProperties"?: { [key: string]: {{ type_to_typescript(model["additionalProperties"]) }} };
{%- endif %}

  /**
   * @ignore
   */
  "_unparsed"?: boolean;
  {%- if "items" not in model %}

  /**
   * @ignore
   */
  static readonly attributeTypeMap: AttributeTypeMap = {
    {%- for attr, schema in model.get("properties", {}).items() %}
    {%- set isRequired = attr in model.get("required", []) %}
    {%- set format = get_format_for_schema(schema) %}
    "{{ attr|attribute_name }}": {
      "baseName": "{{ attr }}",
      "type": "{{ type_to_typescript(schema) }}",
      {%- if isRequired %}
      "required": true,
      {%- endif %}
      {%- if format %}
      "format": "{{ format }}",
      {%- endif %}
    }{%- if loop.nextitem or model.get("additionalProperties") %},{%- endif %}
    {%- endfor %}
    {%- if model.get("additionalProperties") %}
    {%- set format = get_format_for_schema(model["additionalProperties"]) %}
    "additionalProperties": {
      "baseName": "additionalProperties",
      "type": "{{ type_to_typescript(model["additionalProperties"]) }}",
      {%- if format %}
      "format": "{{ format }}",
      {%- endif %}
    }
    {%- endif %}
  };

  /**
   * @ignore
   */
  static getAttributeTypeMap(): AttributeTypeMap {
{#      {{#parent}}#}
{#      return super.getAttributeTypeMap().concat({{classname}}.attributeTypeMap);#}
{#      {{/parent}}#}
{#      {{^parent}}#}
    return {{ name }}.attributeTypeMap;
{#      {{/parent}}#}
  }
  {%- endif %}

  public constructor() {
{#      {{#parent}}#}
{#      super();#}
{#      {{/parent}}#}
{#      {{#allVars}}#}
{#      {{#discriminatorValue}}#}
{#      this.{{name}} = "{{discriminatorValue}}";#}
{#      {{/discriminatorValue}}#}
{#      {{/allVars}}#}
{#      {{#discriminatorName}}#}
{#      this.{{discriminatorName}} = "{{classname}}";#}
{#      {{/discriminatorName}}#}
  }
}

{#{{#hasEnums}}#}
{##}
{#{{#vars}}#}
{#{{#isEnum}}#}
{#export type {{classname}}{{enumName}} ={{#allowableValues}}{{#values}} "{{.}}" {{^-last}}|{{/-last}}{{/values}}{{/allowableValues}};#}
{#{{/isEnum}}#}
{#{{/vars}}#}
{##}
{#{{/hasEnums}}#}
{%- endif %}


{%- if "enum" in model %}
export type {{ name }} = {% for index, value in enumerate(model.enum) %}typeof {{ model["x-enum-varnames"][index] or value.upper() }} {%- if not loop.last %}| {% endif %}{%- if loop.last %} | UnparsedObject{%- endif %}{%- endfor %};
{%- for index, value in enumerate(model.enum) %}
export const {{ model["x-enum-varnames"][index] or value.upper() }} = {{ value|format_value }};
{%- endfor %}
{%- endif %}
{%- if "oneOf" in model %}
export type {{ name }} = {% for oneOf in model.oneOf %}{{ type_to_typescript(oneOf) }}{% if not loop.last %} | {% endif %}{%- if loop.last %} | UnparsedObject{%- endif %}{%- endfor %};
{%- endif %}
