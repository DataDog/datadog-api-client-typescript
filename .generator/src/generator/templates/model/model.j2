{% include 'licenseInfo.j2' %}

{% for classname in get_references_for_model(model, name) %}
import { {{classname}} } from './{{classname}}';
{%- endfor %}
import { HttpFile } from '../http/http';
import { AttributeTypeMap, UnparsedObject } from '../util';

{%- set classname = name %}

{% if "description" in model %}
/**
* {{model.description}}
*/
{% endif %}

{% if "enum" not in model and "oneOf" not in model -%}
export class {{classname}} {% if "parent_id" in model %} extends {{model.parent_id}} {% endif %} {

{% if "properties" in model %}
    {%- for varname, var in model.properties.items() -%}
        {%- if "description" in var -%}
    /**
    * {{var.description}}
    */
        {%- endif -%}
    '{{varname|camel_case|untitle_case}}'{% if not var.required %}?{% endif %}:{{type_to_typescript(var)}}
        {%- if "nullable" in var %} | null {%-endif %}
    {%- endfor -%}

    /**
     * @ignore
     */
    'unparsedObject'?:any

    {% if model.type != "array" %}
    /**
     * @ignore
     */
    static readonly attributeTypeMap: AttributeTypeMap = {
    {% for varname, var in model.get("properties", {}).items() %}
        {%- set baseName = varname | attribute_name %}
        "{{varname|camel_case|untitle_case}}": {
            "baseName": "{{baseName}}",
            "type": "{{type_to_typescript(var)}}",
            {%- if "required" in var %}
            "required": {{var.required}},
            {%- endif %}
            {%- if "format" in var %}
            "format": "{{var.format}}",
            {%- endif %}
        }{% if not loop.last %},{% endif %}
    {% endfor %}
    };

      /**
     * @ignore
     */
    static getAttributeTypeMap(): AttributeTypeMap {
        {% if model.parent is defined %}
        return super.getAttributeTypeMap().concat({{model.parent.classname}}.attributeTypeMap);
        {% else %}
        return {{classname}}.attributeTypeMap;
        {% endif %}
    }
    {% endif %}

     public constructor() {
        {% if model.parent is defined %}
        super();
        {% endif %}
        {%- for attr, definition in model.get("properties", {}).items() %}
        this.{{attr}} = "{{definition}}";
        {%- endfor %}
        {%- if model.discriminator is defined -%}
        this.{{model.discriminator.propertyName}} = "{{classname}}";
        {%- endif -%}
    }

{% endif %}

}
{%- endif %}
