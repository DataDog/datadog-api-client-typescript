import { BaseAPIRequestFactory, RequiredError } from './baseapi';
import { Configuration, getServer, applySecurityAuthentication} from '../configuration';
import { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';
{%- if platforms and node %}
import FormData from "form-data";
{%- endif %}
import { ObjectSerializer } from '../models/ObjectSerializer';
import { ApiException } from './exception';
import { isCodeInRange } from '../util';

{%- for model in get_api_models(operations)|sort %}
import { {{ model }} } from '../models/{{ model }}';
{%- endfor %}

{%- set classname = name.replace(" ", "") + "Api" %}

export class {{classname}}RequestFactory extends BaseAPIRequestFactory {
    {%- for path, method, operation in operations|sort(attribute="2.operationId") %}
    {%- set httpMethod = method.upper() %}
    {%- set returnType = operation|return_type %}
    public async {{operation.operationId|untitle_case}}({%- for name, parameter in operation|parameters %}{{name}}{%- if not parameter.required %}?{%- endif %}: {{ get_type_for_parameter(parameter) }}, {%- endfor %}_options?: Configuration): Promise<RequestContext> {
        const _config = _options || this.configuration;
        if (!_config.unstableOperations['{{operationId}}']) {
            throw new Error("Unstable operation '{{operationId}}' is disabled");
        }
        {%- for name, parameter in operation|parameters %}
        {%- set baseName = name|snake_case %}
        {%- set paramName = name %}
        {%- set formParams = operation|form_parameter %}
        {%- set isCollectionFormatMulti = parameter|collection_format %}

        {%- if parameter.required %}
        // verify required parameter '{{ name|attribute_name }}' is not null or undefined
        if ({{ name|attribute_name }} === null || {{ name|attribute_name }} === undefined) {
            throw new RequiredError('Required parameter {{ name|attribute_name }} was null or undefined when calling {{operation.operationId}}.');
        }
        {%- endif %}


        // Path Params
        const localVarPath = '{{ path }}'{%- if parameter.in == "path" %}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){%- endif %};

        // Make Request Context
        const requestContext = getServer(_config, '{{classname}}.{{operation.operationId}}').makeRequestContext(localVarPath, HttpMethod.{{httpMethod}});
        {%- if hasProduces %}
        {%- if produces %}
        {%- if loop.first %}requestContext.setHeaderParam("Accept", "{{ mediaType }}");{%- endif %}
        {%- endif %}
        {%- else %}
        requestContext.setHeaderParam("Accept", "application/json");
        {%- endif %}
        requestContext.setHttpConfig(_config.httpConfig);
        {%- if parameter.in == "query" %}
        {%- if loop.first %}

        // Query Params
        {%- endif %}
        if ({{paramName}} !== undefined) {
            requestContext.setQueryParam("{{baseName}}", ObjectSerializer.serialize({{paramName}}, "{{ dataType }}", "{{dataFormat}}"));
        }
        {%- endif %}
        {%- if parameter.in == "header" %}
        {%- if loop.first %}

        // Header Params
        {%- endif %}
        if ({{paramName}} !== undefined) {
            requestContext.setHeaderParam("{{baseName}}", ObjectSerializer.serialize({{paramName}}, "{{ dataType }}", "{{dataFormat}}"));
        }
        {%- endif %}
        {%- if formParams %}

        // Form Params
        let localVarFormParams = new FormData();
        {%- endif %}

        {%- if formParams %}
        formParams: {{formParams}}
        {%- if isArray %}
        if ({{paramName}}) {
        {%- if isCollectionFormatMulti %}
            {{paramName}}.forEach((element) => {
                localVarFormParams.append('{{parameter|collection_format}}', element as any);
            })
        {%- endif %}
        {%- if not isCollectionFormatMulti %}
            // TODO: replace .append with .set
            localVarFormParams.append('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
        {%- endif %}
        }
        {%- else %}
        if ({{paramName}} !== undefined) {
             // TODO: replace .append with .set
             {%- if not isFile %}
             localVarFormParams.append('{{baseName}}', {{paramName}} as any);
             {%- endif %}
             {%- if isFile %}
             {%- if platforms %}
             {%- if node %}
             localVarFormParams.append('{{baseName}}', {{paramName}}.data, {{paramName}}.name);
             {%- else %}
             localVarFormParams.append('{{baseName}}', {{paramName}}, {{paramName}}.name);
             {%- endif %}
             {%- endif %}
             {%- endif %}
        }
        {%- endif %}
        {%- endif %}
        {%- if hasFormParams %}
        requestContext.setBody(localVarFormParams);
        {%- endif %}
        {%- if bodyParam %}

        // Body Params
        const contentType = ObjectSerializer.getPreferredMediaType([{%- if consumes %}
            "{{ mediaType }}"{%- if not loop.last %}},{%- endif %}}
        {%- endif %}]);
        requestContext.setHeaderParam("Content-Type", contentType);
        const serializedBody = ObjectSerializer.stringify(
            ObjectSerializer.serialize({{paramName}}, "{{ dataType }}", "{{dataFormat}}"),
            contentType
        );
        requestContext.setBody(serializedBody);
        {%- endif %}
        {%- endfor %}
        {%- set authMethods = operation.security if "security" in operation else openapi.security %}
        {%- if authMethods %}
        // Apply auth methods
        applySecurityAuthentication(_config, requestContext, [{%- for auth in (authMethods or []) %}"{{ '", "'.join(auth.keys()) }}"{%- if not loop.last %}, {% endif %}{%- endfor %}]);
        {%- endif %}

        return requestContext;
    }

{%- endfor %}
}

export class {{classname}}ResponseProcessor {
    {%- for path, method, operation in operations|sort(attribute="2.operationId") %}
    {%- set httpMethod = method.upper() %}
    {%- set returnType = operation|return_type %}
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to {{operation.operationId}}
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async {{operation.operationId}}(response: ResponseContext): Promise<{{ returnType }} {%- if not returnType %}void{%- endif %}> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);

        {%- for responseCode, response in operation.responses.items() %}
        {%- set dataType = response|response_type %}

        if (isCodeInRange("{{responseCode}}", response.httpStatusCode)) {
            {%- if dataType %}
            {%- if response.content %}
            {%- if dataType == "binary" %}
            const body: {{ dataType }} = await response.getBodyAsFile() as any as {{ returnType }};
            {%- else %}
            const body: {{ dataType }} = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "{{ dataType }}", ""
            ) as {{ dataType }};
            {%- endif %}
            {%- if responseCode.startswith("2") %}
            return body;
            {%- else %}
            throw new ApiException<{{ dataType }}>({{responseCode}}, body);
            {%- endif %}
            {%- else %}
            {%- if responseCode.startswith("2") %}
            return;
            {%- else %}
            throw new ApiException<string>(response.httpStatusCode, "{{message}}");
            {%- endif %}
            {%- endif %}
            {%- endif %}
        }
        {%- endfor %}

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            {%- if returnType %}
            {%- if dataType == "binary" %}
            const body: {{ returnType }} = await response.getBodyAsFile() as any as {{ returnType }};
            {%- else %}
            const body: {{ returnType }} = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "{{ returnType }}", "{{returnFormat}}"
            ) as {{ returnType }};
            {%- endif %}
            return body;
            {%- else %}
            return;
            {%- endif %}
        }

        const body = (await response.body.text()) || "";
        throw new ApiException<string>(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
    }
{%- endfor %}
}

{%- for path, method, operation in operations|sort(attribute="2.operationId") %}
{%- if operation|parameters|list|length > 0 %}
export interface {{classname}}{{operation.operationId}}Request {
    {%- for name, parameter in operation|parameters %}
    {%- set parameterType = get_type_for_parameter(parameter) %}
    /**
     * {{parameter.description}}
     * @type {{parameterType}}
     */
    {{name}}{%- if not parameter.required %}?{%- endif %}: {{ parameterType }}
    {%- endfor %}
}
{%- endif %}
{%- endfor %}

export class {{classname}} {

    private requestFactory: {{classname}}RequestFactory;
    private responseProcessor: {{classname}}ResponseProcessor;
    private configuration: Configuration;

    public constructor(configuration: Configuration, requestFactory?: {{classname}}RequestFactory, responseProcessor?: {{classname}}ResponseProcessor) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new {{classname}}RequestFactory(configuration);
        this.responseProcessor = responseProcessor || new {{classname}}ResponseProcessor();
    }

{%- for path, method, operation in operations|sort(attribute="2.operationId") %}
{%- set returnType = operation|return_type %}
    /**
     {%- if operation.description %}
     * {{operation.description}}
     {%- endif %}
     * @param param The request object
     */
    public {{operation.operationId|untitle_case}}({%- if operation|parameters|list|length > 0 %}param: {{classname}}{{operation.operationId}}Request{%- if get_required_parameters(operation)|length == 0 %} = {}{%- endif %}, {%- endif %} options?: Configuration): Promise<{{ returnType }}{%- if not returnType %}void{%- endif %}> {
        const requestContextPromise = this.requestFactory.{{operation.operationId|untitle_case}}({%- for name, parameter in operation|parameters %}param.{{name}}, {%- endfor %}options);
        return requestContextPromise.then(requestContext => {
                return this.configuration.httpApi.send(requestContext).then(responseContext => {
                        return this.responseProcessor.{{operation.operationId|untitle_case}}(responseContext);
                });
        });
    }

{%- endfor %}
}
