
export class UnparsedObject {
  unparsedObject:any;
  constructor(data:any) {
    this.unparsedObject = data;
  }
}

export type AttributeTypeMap = {
  [key: string]: {
    baseName: string;
    type: string;
    required?: boolean;
    format?: string;
  };
}

export class DDate extends Date {
  rfc3339TzOffset: string | undefined;
}

const RFC3339Re: RegExp = /^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})\.?(\d+)?(?:(?:([+-]\d{2}):?(\d{2}))|Z)?$/;
export function dateFromRFC3339String(date: string): DDate {
  const m = RFC3339Re.exec(date);
  if (m) {
    const _date = new DDate(date)
    if( m[8] === undefined && m[9] === undefined){
      _date.rfc3339TzOffset = 'Z'
    } else {
      _date.rfc3339TzOffset = `${m[8]}:${m[9]}`
    }

    return _date
  } else {
    throw new Error('unexpected date format: ' + date)
  }
}

export function dateToRFC3339String(date: Date | DDate): string {
  const offSetArr = getRFC3339TimezoneOffset(date).split(":")
  const tzHour = offSetArr.length == 1 ? 0 : +offSetArr[0];
  const tzMin  = offSetArr.length == 1 ? 0 : +offSetArr[1];

  const year = date.getFullYear() ;
  const month = date.getMonth();
  const day = date.getUTCDate();
  const hour = date.getUTCHours() + +tzHour;
  const minute = date.getUTCMinutes() + +tzMin;
  const second = date.getUTCSeconds();
  let msec = date.getUTCMilliseconds().toString();

  msec = +msec === 0 ? "" : `.${msec}`

  return year + "-" +
    pad(month + 1) + "-" +
    pad(day) + "T" +
    pad(hour) + ":" +
    pad(minute) + ":" +
    pad(second) +
    msec +
    offSetArr.join(":");
}



// Helpers
function pad(num: number): string {
  return num < 10 ? "0" + num.toString() : num.toString();
}

function getRFC3339TimezoneOffset(date: Date | DDate): string {
  if (date instanceof DDate && date.rfc3339TzOffset) {
    return date.rfc3339TzOffset;
  }

  let offset = date.getTimezoneOffset()
  if (offset === 0) {
      return "Z";
  }

  const offsetSign = (offset > 0) ? "+" : "-";
  offset = Math.abs(offset);
  return offsetSign + pad(Math.floor(offset / 60)) + ":" + pad(offset % 60);
}
