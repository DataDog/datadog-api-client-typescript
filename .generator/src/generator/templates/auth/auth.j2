import { RequestContext } from "../http/http";

/**
 * Interface authentication schemes.
 */
export interface SecurityAuthentication {
  /*
   * @return returns the name of the security authentication as specified in OAI
   */
  getName(): string;

  /**
   * Applies the authentication scheme to the request context
   *
   * @params context the request context which should use this authentication scheme
   */
  applySecurityAuthentication(context: RequestContext): void;
}

export interface TokenProvider {
  getToken(): Promise<string> | string;
}

{%- for name, schema in openapi.components.securitySchemes.items()  %}

/**
 * Applies {{ schema.type }} authentication to the request context.
 */
export class {{ name|camel_case }}Authentication implements SecurityAuthentication {
  {%- if schema.type == "apiKey" %}
  /**
   * Configures this api key authentication with the necessary properties
   *
   * @param apiKey: The api key to be used for every request
   */
  public constructor(private apiKey: string) {}
  {%- endif %}
  {%- if schema.type == "basic" %}
  /**
   * Configures the http authentication with the required details.
   *
   * @param username username for http basic authentication
   * @param password password for http basic authentication
   */
  public constructor(
    private username: string,
    private password: string
  ) {}
  {%- endif %}
  {%- if schema.type == "bearer" %}
  /**
   * Configures the http authentication with the required details.
   *
   * @param tokenProvider service that can provide the up-to-date token when needed
   */
  public constructor(private tokenProvider: TokenProvider) {}
  {%- endif %}
  {%- if schema.type == "oauth2" %}
  /**
   * Configures OAuth2 with the necessary properties
   *
   * @param accessToken: The access token to be used for every request
   */
  public constructor(private accessToken: string) {}
  {%- endif %}

  public getName(): string {
    return "{{ name }}";
  }

  public {% if schema.type == "bearer" %}async {% endif %}applySecurityAuthentication(context: RequestContext): void {
    {%- if schema.type == "apiKey" %}
    context.{%- if schema["in"] == "header" %}setHeaderParam{%- endif %}{%- if schema["in"] == "query" %}setQueryParam{%- endif %}{%- if schema["in"] == "cookie" %}addCookie{%- endif %}("{{ schema["name"] }}", this.apiKey);
    {%- endif %}
    {%- if schema.type == "basic" %}
    let comb = this.username + ":" + this.password;
    context.setHeaderParam("Authorization", "Basic " + btoa(comb));
    {%- endif %}
    {%- if schema.type == "bearer" %}
    context.setHeaderParam("Authorization", "Bearer " + await this.tokenProvider.getToken());
    {%- endif %}
    {%- if schema.type == "oauth2" %}
    context.setHeaderParam("Authorization", "Bearer " + this.accessToken);
    {%- endif %}
  }
}

{%- endfor %}

export type AuthMethods = {
  {%- for name, schema in openapi.components.securitySchemes.items() %}
  "{{ name }}"?: SecurityAuthentication{%- if loop.nextitem %},{%- endif %}
  {%- endfor %}
}

export type ApiKeyConfiguration = string;
export type HttpBasicConfiguration = { "username": string, "password": string };
export type HttpBearerConfiguration = { tokenProvider: TokenProvider };
export type OAuth2Configuration = { accessToken: string };

export type AuthMethodsConfiguration = {
  {%- for name, schema in openapi.components.securitySchemes.items() %}
  "{{ name }}"?: {% if schema.type == "apiKey" %}ApiKeyConfiguration{%-endif %}{% if schema.type == "basic" %}HttpBasicConfiguration{%- endif %}{% if schema.type == "bearer" %}HttpBearerConfiguration{%- endif %}{% if schema.type == "oauth2" %}OAuth2Configuration{%- endif %}{%- if loop.nextitem %},{%- endif %}
  {%- endfor %}
}

/**
 * Creates the authentication methods from a swagger description.
 *
 */
export function configureAuthMethods(config: AuthMethodsConfiguration | undefined): AuthMethods {
  let authMethods: AuthMethods = {}

  if (!config) {
    return authMethods;
  }

  {%- for name, schema in openapi.components.securitySchemes.items() %}

  if (config["{{ name }}"]) {
    authMethods["{{ name }}"] = new {{ name|camel_case }}Authentication(
      {% if schema.type == "apiKey" %}
      config["{{ name }}"]
      {%- endif %}
      {% if schema.type == "basic" %}
      config["{{ name }}"]["username"],
      config["{{ name }}"]["password"]
      {%- endif %}
      {% if schema.type == "bearer" %}
      config["{{ name }}"]["tokenProvider"]
      {%- endif %}
      {% if schema.type == "oauth2" %}
      config["{{ name }}"]["accessToken"]
      {%- endif %}
    );
  }

  {%- endfor %}

  return authMethods;
}
