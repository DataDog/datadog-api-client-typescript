import { RequestContext } from "../http/http";

/**
 * Interface authentication schemes.
 */
export interface SecurityAuthentication {
    /*
     * @return returns the name of the security authentication as specified in OAI
     */
    getName(): string;

    /**
     * Applies the authentication scheme to the request context
     *
     * @params context the request context which should use this authentication scheme
     */
    applySecurityAuthentication(context: RequestContext): void;
}

export interface TokenProvider {
  getToken(): Promise<string> | string;
}
{%- for path, method, operation in operations|sort(attribute="2.operationId") %}
{%- set authMethods = operation.security if "security" in operation else openapi.security %}
{%- if authMethods %}
{%- for name in authMethod %}
/**
 * Applies {{type}} authentication to the request context.
 */
export class {{name | camel_case}}Authentication implements SecurityAuthentication {
    {%- if schema.type == "apiKey" %}
    /**
     * Configures this api key authentication with the necessary properties
     *
     * @param apiKey: The api key to be used for every request
     */
    public constructor(private apiKey: string) {}
    {%- endif %}
    {%- if schema.scheme == "basic" %}
    /**
     * Configures the http authentication with the required details.
     *
     * @param username username for http basic authentication
     * @param password password for http basic authentication
     */
    public constructor(
        private username: string,
        private password: string
    ) {}
    {%- endif %}
    {%- if schema.scheme == "bearer" %}
    /**
     * Configures the http authentication with the required details.
     *
     * @param tokenProvider service that can provide the up-to-date token when needed
     */
    public constructor(private tokenProvider: TokenProvider) {}
    {%- endif %}
    {%- if schema.type == "oauth2" %}
    /**
     * Configures OAuth2 with the necessary properties
     *
     * @param accessToken: The access token to be used for every request
     */
    public constructor(private accessToken: string) {}
    {%- endif %}

    public getName(): string {
        return "{{name}}";
    }

    public {%- if schema.scheme == "bearer" %}async {%- endif %}applySecurityAuthentication(context: RequestContext): void {
        {%- if schema.type == "apiKey" %}
        context.{%- if isKeyInHeader %}setHeaderParam{%- endif %}{%- if isKeyInQuery %}setQueryParam{%- endif %}{%- if isKeyInCookie %}addCookie{%- endif %}("{{keyParamName}}", this.apiKey);
        {%- endif %}
        {%- if schema.scheme == "basic" %}
        let comb = this.username + ":" + this.password;
        context.setHeaderParam("Authorization", "Basic " + btoa(comb));
        {%- endif %}
        {%- if schema.scheme == "bearer" %}
        context.setHeaderParam("Authorization", "Bearer " + await this.tokenProvider.getToken());
        {%- endif %}
        {%- if schema.type == "oauth2" %}
        context.setHeaderParam("Authorization", "Bearer " + this.accessToken);
        {%- endif %}
    }
}
{%- endfor %}
{%- endif %}
{%- endfor %}

export type AuthMethods = {
    {%- for path, method, operation in operations|sort(attribute="2.operationId") %}
    {%- set authMethods = operation.security if "security" in operation else openapi.security %}
    {%- if authMethods %}
    "{{name}}"?: SecurityAuthentication{%- if not loop.last %}},{%- endif %}}
    {%- endif %}
    {%- endfor %}
}
{%- if useInversify %}

export const authMethodServices = {
    {%- for path, method, operation in operations|sort(attribute="2.operationId") %}
    {%- set authMethods = operation.security if "security" in operation else openapi.security %}
    {%- if authMethods %}
    "{{name}}": {{name | camel_case}}Authentication{%- if not loop.last %}},{%- endif %}}
    {%- endif %}
    {%- endfor %}
}
{%- endif %}

export type ApiKeyConfiguration = string;
export type HttpBasicConfiguration = { "username": string, "password": string };
export type HttpBearerConfiguration = { tokenProvider: TokenProvider };
export type OAuth2Configuration = { accessToken: string };

export type AuthMethodsConfiguration = {
    {%- for path, method, operation in operations|sort(attribute="2.operationId") %}
    {%- set authMethods = operation.security if "security" in operation else openapi.security %}
    {%- for authMethod in authMethods %}
	{%- for name in authMethod %}
    {%- set schema = openapi.components.securitySchemes[name] %}
    "{{name}}"?: {%- if schema.type == "apiKey" %}ApiKeyConfiguration{%- endif %}{%- if schema.scheme == "basic" %}HttpBasicConfiguration{%- endif %}{%- if schema.scheme == "bearer" %}HttpBearerConfiguration{%- endif %}{%- if schema.type == "oauth2" %}OAuth2Configuration{%- endif %}{%- if not loop.last %}},{%- endif %}}
    {%- endfor %}
    {%- endfor %}
    {%- endfor %}
}

/**
 * Creates the authentication methods from a swagger description.
 *
 */
export function configureAuthMethods(config: AuthMethodsConfiguration | undefined): AuthMethods {
    let authMethods: AuthMethods = {}

    if (!config) {
        return authMethods;
    }

    {%- if authMethods %}
    if (config["{{name}}"]) {
        authMethods["{{name}}"] = new {{name | camel_case}}Authentication(
            {%- if isApiKey %}
            config["{{name}}"]
            {%- endif %}
            {%- if schema.scheme == "basic" %}
            config["{{name}}"]["username"],
            config["{{name}}"]["password"]
            {%- endif %}
            {%- if schema.scheme == "bearer" %}
            config["{{name}}"]["tokenProvider"]
            {%- endif %}
            {%- if schema.type == "oauth2" %}
            config["{{name}}"]["accessToken"]
            {%- endif %}
        );
    }

    {%- endif %}
    return authMethods;
}
