import { RequestContext, HttpMethod } from "./http/http{{extensionForDeno}}";

/**
 *
 * Represents the configuration of a server
 *
 */
export class BaseServerConfiguration {
    public constructor(private url: string, private variableConfiguration: { [key: string]: string }) {}

    /**
     * Sets the value of the variables of this server.
     *
     * @param variableConfiguration a partial variable configuration for the variables contained in the url
     */
    public setVariables(variableConfiguration: { [key: string]: string }): void {
        Object.assign(this.variableConfiguration, variableConfiguration);
    }

    public getConfiguration(): { [key: string]: string } {
        return this.variableConfiguration
    }

    private getUrl() {
        let replacedUrl = this.url;
        for (const key in this.variableConfiguration) {
            var re = new RegExp("{" + key + "}","g");
            replacedUrl = replacedUrl.replace(re, this.variableConfiguration[key]);
        }
        return replacedUrl
    }

    /**
     * Creates a new request context for this server using the url with variables
     * replaced with their respective values and the endpoint of the request appended.
     *
     * @param endpoint the endpoint to be queried on the server
     * @param httpMethod httpMethod to be used
     *
     */
    public makeRequestContext(endpoint: string, httpMethod: HttpMethod): RequestContext {
        return new RequestContext(this.getUrl() + endpoint, httpMethod);
    }
}

/**
 *
 * Represents the configuration of a server including its
 * url template and variable configuration based on the url.
 *
 */
export class ServerConfiguration<T extends { [key: string]: string }> extends BaseServerConfiguration {}

{%- if servers %}
export const server{{-index}} = new ServerConfiguration<{ {%- if variables %}
    "{{name}}": {%- if enumValues %}"{{enumValues}}"{%- if not loop.last %}} | {%- endif %}}{%- endif %}{%- if not enumValues %}string{%- endif %}{%- if not loop.last %}},{%- endif %}}
{%- endif %} }>("{{url}}", { {%- if variables %}
    "{{name}}": "{{defaultValue}}" {%- if not loop.last %}},{%- endif %}}{%- endif %}
})
{%- endif %}

export const servers = [{%- if servers %}server{{-index}}{%- if not loop.last %}}, {%- endif %}}{%- endif %}];

export const operationServers: { [endpoint: string]: BaseServerConfiguration[] } = {
{%- if apiInfo %}
{%- if apis %}
{%- if operations %}
{%- if operation %}
{%- if servers %}
{%- if loop.first %}
    "{{ classname }}.{{ nickname }}": [
{%- endif %}
        new ServerConfiguration<{ {%- if variables %}
            "{{name}}": {%- if enumValues %}"{{enumValues}}"{%- if not loop.last %}} | {%- endif %}}{%- endif %}{%- if not enumValues %}string{%- endif %}{%- if not loop.last %}},{%- endif %}}
        {%- endif %} }>("{{url}}", { {%- if variables %}
            "{{name}}": "{{defaultValue}}" {%- if not loop.last %}},{%- endif %}}{%- endif %}
        }),
{%- if loop.last %}}
    ],
{%- endif %}}
{%- endif %}
{%- endif %}
{%- endif %}
{%- endif %}
{%- endif %}
}
