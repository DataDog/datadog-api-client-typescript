import { RequestContext, HttpMethod } from "./http/http";

/**
 *
 * Represents the configuration of a server
 *
 */
export class BaseServerConfiguration {
  public constructor(private url: string, private variableConfiguration: { [key: string]: string }) {}

  /**
   * Sets the value of the variables of this server.
   *
   * @param variableConfiguration a partial variable configuration for the variables contained in the url
   */
  public setVariables(variableConfiguration: { [key: string]: string }): void {
    Object.assign(this.variableConfiguration, variableConfiguration);
  }

  public getConfiguration(): { [key: string]: string } {
    return this.variableConfiguration
  }

  private getUrl() {
    let replacedUrl = this.url;
    for (const key in this.variableConfiguration) {
      var re = new RegExp("{" + key + "}","g");
      replacedUrl = replacedUrl.replace(re, this.variableConfiguration[key]);
    }
    return replacedUrl
  }

  /**
   * Creates a new request context for this server using the url with variables
   * replaced with their respective values and the endpoint of the request appended.
   *
   * @param endpoint the endpoint to be queried on the server
   * @param httpMethod httpMethod to be used
   *
   */
  public makeRequestContext(endpoint: string, httpMethod: HttpMethod): RequestContext {
    return new RequestContext(this.getUrl() + endpoint, httpMethod);
  }
}

/**
 *
 * Represents the configuration of a server including its
 * url template and variable configuration based on the url.
 *
 */
export class ServerConfiguration<T extends { [key: string]: string }> extends BaseServerConfiguration {}

{%- for idx ,server in enumerate(openapi.servers) %}
{%- set serverCount = idx + 1 %}
export const server{{ serverCount }} = new ServerConfiguration<{
  {%- for name, value in server.get("variables", {}).items() %}
  "{{ name }}": {%- for enumValue in value.get("enum", []) %}"{{ enumValue }}"{%- if not loop.last %} | {% endif %}{%- endfor %}{% if not value.get("enum") %}string{%- endif %}{%- if not loop.last %},{%- endif %}
  {%- endfor %}
  }>("{{ server.url }}", {
  {%- for name, value in server.get("variables", {}).items() %}
  "{{ name }}": "{{ value.default }}" {%- if not loop.last %},{%- endif %}
  {%- endfor %}
})
{%- endfor %}

export const servers = [{% for index, server in enumerate(openapi.servers) %}server{{ index+1 }}{%- if not loop.last %}, {% endif %}{%- endfor %}];

export const operationServers: { [endpoint: string]: BaseServerConfiguration[] } = {
  {%- for path in openapi.paths.values() %}
  {%- for operation in path.values() %}
  {%- for server in operation.servers %}
  {%- if loop.first %}
  "{{ operation.tags[0].replace(" ", "") }}Api.{{ operation.operationId|untitle_case }}": [
  {%- endif %}
    new ServerConfiguration<{
    {%- for name, value in server.get("variables", {}).items() %}
      "{{ name }}": {%- for enumValue in value.get("enum", []) %}"{{ enumValue }}"{%- if not loop.last %} | {% endif %}{%- endfor %}{% if not value.get("enum") %}string{%- endif %}{%- if not loop.last %},{%- endif %}
    {%- endfor %} }>("{{ server.url }}", {
    {%- for name, value in server.get("variables", {}).items() %}
      "{{ name }}": "{{ value.default }}" {%- if not loop.last %},{%- endif %}
    {%- endfor %}
    }),
  {%- if loop.last %}
    ],
  {%- endif %}
  {%- endfor %}
  {%- endfor %}
  {%- endfor %}
}

