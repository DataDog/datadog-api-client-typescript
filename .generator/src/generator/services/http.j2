{%- if useRxJS %}
import type { Observable } from "rxjs";
{%- endif %}
import type { {%- if not useRxJS %}Promise{%- endif %}HttpLibrary, HttpMethod, RequestContext, ResponseContext } from "../http/http";
import type { {%- if not useRxJS %}Promise{%- endif %}Middleware } from "../middleware";
import type { BaseServerConfiguration } from "../servers";

export abstract class AbstractHttpLibrary implements {%- if not useRxJS %}Promise{%- endif %}HttpLibrary {
    public abstract send(request: RequestContext): {%- if useRxJS %}Observable{%- endif %}{%- if not useRxJS %}Promise{%- endif %}<ResponseContext>;
};

export abstract class AbstractMiddleware implements {%- if not useRxJS %}Promise{%- endif %}Middleware {
    public abstract pre(context: RequestContext): {%- if useRxJS %}Observable{%- endif %}{%- if not useRxJS %}Promise{%- endif %}<RequestContext>;
    public abstract post(context: ResponseContext): {%- if useRxJS %}Observable{%- endif %}{%- if not useRxJS %}Promise{%- endif %}<ResponseContext>;
}

export abstract class AbstractServerConfiguration implements BaseServerConfiguration {
    public abstract makeRequestContext(endpoint: string, httpMethod: HttpMethod): RequestContext;
};
