name: Post status check
description: Create status check in target repository based on result of the current workflow run.
inputs:
  github-token:
    description: A valid GitHub token that can create status check in target repository
    default: ${{ github.token }}
    required: false
  owner:
    description: Name of the repository owner
    default: ${{ context.repo.owner }}
    required: false
  repo:
    description: Name of the repository where the status should be created
    default: 'datadog-api-spec'
    required: false
  context:
    description: Name of the status check
    required: true
  status:
    description: A valid status value for the commit
    default: 'success'
    required: false
outputs:
  result:
    description: "Commit status details"
    value: ${{ steps.status.result }}
runs:
  using: "composite"
  steps:
    - id: status
      uses: actions/github-script@v4.0.2
      env:
        TARGET_OWNER: ${{ inputs.owner }}
        TARGET_REPO: ${{ inputs.repo }}
        TARGET_STATUS: ${{ inputs.status }}
        TARGET_CONTEXT: ${{ input.context }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const pr_num = context.payload.pull_request.head.ref.split("/")[2]
          const {data: pr} = await github.pulls.get({
              owner: process.env.TARGET_OWNER,
              repo: process.env.TARGET_REPO,
              pull_number: pr_num
          });
          const { data: jobs } = await github.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
          });
          return await github.repos.createCommitStatus({
              owner: process.env.TARGET_OWNER,
              repo: process.env.TARGET_REPO,
              sha: pr.head.sha,
              state: process.env.TARGET_STATUS,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${context.payload.pull_request.number}/checks?check_run_id=${jobs.jobs[0].id}`,
              description: `${context.repo.repo}: ${context.workflow}`,
              context: `${context.repo.repo}_${process.env.TARGET_CONTEXT}_tests`
          });